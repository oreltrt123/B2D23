{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@ai-sdk/google/src/google-provider.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/version.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-generative-ai-embedding-model.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-error.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-generative-ai-embedding-options.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-generative-ai-language-model.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/convert-json-schema-to-openapi-schema.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/convert-to-google-generative-ai-messages.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/get-model-path.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-generative-ai-options.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-prepare-tools.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/map-google-generative-ai-finish-reason.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/tool/code-execution.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/tool/google-search.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/tool/url-context.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-tools.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-generative-ai-image-model.ts"],"sourcesContent":["import {\n  EmbeddingModelV2,\n  LanguageModelV2,\n  ProviderV2,\n  ImageModelV2,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  generateId,\n  loadApiKey,\n  withoutTrailingSlash,\n  withUserAgentSuffix,\n} from '@ai-sdk/provider-utils';\nimport { VERSION } from './version';\nimport { GoogleGenerativeAIEmbeddingModel } from './google-generative-ai-embedding-model';\nimport { GoogleGenerativeAIEmbeddingModelId } from './google-generative-ai-embedding-options';\nimport { GoogleGenerativeAILanguageModel } from './google-generative-ai-language-model';\nimport { GoogleGenerativeAIModelId } from './google-generative-ai-options';\nimport { googleTools } from './google-tools';\n\nimport {\n  GoogleGenerativeAIImageSettings,\n  GoogleGenerativeAIImageModelId,\n} from './google-generative-ai-image-settings';\nimport { GoogleGenerativeAIImageModel } from './google-generative-ai-image-model';\n\nexport interface GoogleGenerativeAIProvider extends ProviderV2 {\n  (modelId: GoogleGenerativeAIModelId): LanguageModelV2;\n\n  languageModel(modelId: GoogleGenerativeAIModelId): LanguageModelV2;\n\n  chat(modelId: GoogleGenerativeAIModelId): LanguageModelV2;\n\n  /**\nCreates a model for image generation.\n */\n  image(\n    modelId: GoogleGenerativeAIImageModelId,\n    settings?: GoogleGenerativeAIImageSettings,\n  ): ImageModelV2;\n\n  /**\n   * @deprecated Use `chat()` instead.\n   */\n  generativeAI(modelId: GoogleGenerativeAIModelId): LanguageModelV2;\n\n  /**\n@deprecated Use `textEmbedding()` instead.\n   */\n  embedding(\n    modelId: GoogleGenerativeAIEmbeddingModelId,\n  ): EmbeddingModelV2<string>;\n\n  textEmbedding(\n    modelId: GoogleGenerativeAIEmbeddingModelId,\n  ): EmbeddingModelV2<string>;\n\n  textEmbeddingModel(\n    modelId: GoogleGenerativeAIEmbeddingModelId,\n  ): EmbeddingModelV2<string>;\n\n  tools: typeof googleTools;\n}\n\nexport interface GoogleGenerativeAIProviderSettings {\n  /**\nUse a different URL prefix for API calls, e.g. to use proxy servers.\nThe default prefix is `https://generativelanguage.googleapis.com/v1beta`.\n   */\n  baseURL?: string;\n\n  /**\nAPI key that is being send using the `x-goog-api-key` header.\nIt defaults to the `GOOGLE_GENERATIVE_AI_API_KEY` environment variable.\n   */\n  apiKey?: string;\n\n  /**\nCustom headers to include in the requests.\n     */\n  headers?: Record<string, string | undefined>;\n\n  /**\nCustom fetch implementation. You can use it as a middleware to intercept requests,\nor to provide a custom fetch implementation for e.g. testing.\n    */\n  fetch?: FetchFunction;\n\n  /**\nOptional function to generate a unique ID for each request.\n     */\n  generateId?: () => string;\n}\n\n/**\nCreate a Google Generative AI provider instance.\n */\nexport function createGoogleGenerativeAI(\n  options: GoogleGenerativeAIProviderSettings = {},\n): GoogleGenerativeAIProvider {\n  const baseURL =\n    withoutTrailingSlash(options.baseURL) ??\n    'https://generativelanguage.googleapis.com/v1beta';\n\n  const getHeaders = () =>\n    withUserAgentSuffix(\n      {\n        'x-goog-api-key': loadApiKey({\n          apiKey: options.apiKey,\n          environmentVariableName: 'GOOGLE_GENERATIVE_AI_API_KEY',\n          description: 'Google Generative AI',\n        }),\n        ...options.headers,\n      },\n      `ai-sdk/google/${VERSION}`,\n    );\n\n  const createChatModel = (modelId: GoogleGenerativeAIModelId) =>\n    new GoogleGenerativeAILanguageModel(modelId, {\n      provider: 'google.generative-ai',\n      baseURL,\n      headers: getHeaders,\n      generateId: options.generateId ?? generateId,\n      supportedUrls: () => ({\n        '*': [\n          // Google Generative Language \"files\" endpoint\n          // e.g. https://generativelanguage.googleapis.com/v1beta/files/...\n          new RegExp(`^${baseURL}/files/.*$`),\n          // YouTube URLs (public or unlisted videos)\n          new RegExp(\n            `^https://(?:www\\\\.)?youtube\\\\.com/watch\\\\?v=[\\\\w-]+(?:&[\\\\w=&.-]*)?$`,\n          ),\n          new RegExp(`^https://youtu\\\\.be/[\\\\w-]+(?:\\\\?[\\\\w=&.-]*)?$`),\n        ],\n      }),\n      fetch: options.fetch,\n    });\n\n  const createEmbeddingModel = (modelId: GoogleGenerativeAIEmbeddingModelId) =>\n    new GoogleGenerativeAIEmbeddingModel(modelId, {\n      provider: 'google.generative-ai',\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n    });\n\n  const createImageModel = (\n    modelId: GoogleGenerativeAIImageModelId,\n    settings: GoogleGenerativeAIImageSettings = {},\n  ) =>\n    new GoogleGenerativeAIImageModel(modelId, settings, {\n      provider: 'google.generative-ai',\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n    });\n\n  const provider = function (modelId: GoogleGenerativeAIModelId) {\n    if (new.target) {\n      throw new Error(\n        'The Google Generative AI model function cannot be called with the new keyword.',\n      );\n    }\n\n    return createChatModel(modelId);\n  };\n\n  provider.languageModel = createChatModel;\n  provider.chat = createChatModel;\n  provider.generativeAI = createChatModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.tools = googleTools;\n  return provider as GoogleGenerativeAIProvider;\n}\n\n/**\nDefault Google Generative AI provider instance.\n */\nexport const google = createGoogleGenerativeAI();\n","// Version string of this package injected at build time.\ndeclare const __PACKAGE_VERSION__: string | undefined;\nexport const VERSION: string =\n  typeof __PACKAGE_VERSION__ !== 'undefined'\n    ? __PACKAGE_VERSION__\n    : '0.0.0-test';\n","import {\n  EmbeddingModelV2,\n  TooManyEmbeddingValuesForCallError,\n} from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createJsonResponseHandler,\n  FetchFunction,\n  lazySchema,\n  parseProviderOptions,\n  postJsonToApi,\n  resolve,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { googleFailedResponseHandler } from './google-error';\nimport {\n  GoogleGenerativeAIEmbeddingModelId,\n  googleGenerativeAIEmbeddingProviderOptions,\n} from './google-generative-ai-embedding-options';\n\ntype GoogleGenerativeAIEmbeddingConfig = {\n  provider: string;\n  baseURL: string;\n  headers: () => Record<string, string | undefined>;\n  fetch?: FetchFunction;\n};\n\nexport class GoogleGenerativeAIEmbeddingModel\n  implements EmbeddingModelV2<string>\n{\n  readonly specificationVersion = 'v2';\n  readonly modelId: GoogleGenerativeAIEmbeddingModelId;\n  readonly maxEmbeddingsPerCall = 2048;\n  readonly supportsParallelCalls = true;\n\n  private readonly config: GoogleGenerativeAIEmbeddingConfig;\n\n  get provider(): string {\n    return this.config.provider;\n  }\n  constructor(\n    modelId: GoogleGenerativeAIEmbeddingModelId,\n    config: GoogleGenerativeAIEmbeddingConfig,\n  ) {\n    this.modelId = modelId;\n    this.config = config;\n  }\n\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions,\n  }: Parameters<EmbeddingModelV2<string>['doEmbed']>[0]): Promise<\n    Awaited<ReturnType<EmbeddingModelV2<string>['doEmbed']>>\n  > {\n    // Parse provider options\n    const googleOptions = await parseProviderOptions({\n      provider: 'google',\n      providerOptions,\n      schema: googleGenerativeAIEmbeddingProviderOptions,\n    });\n\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values,\n      });\n    }\n\n    const mergedHeaders = combineHeaders(\n      await resolve(this.config.headers),\n      headers,\n    );\n\n    // For single embeddings, use the single endpoint (ratelimits, etc.)\n    if (values.length === 1) {\n      const {\n        responseHeaders,\n        value: response,\n        rawValue,\n      } = await postJsonToApi({\n        url: `${this.config.baseURL}/models/${this.modelId}:embedContent`,\n        headers: mergedHeaders,\n        body: {\n          model: `models/${this.modelId}`,\n          content: {\n            parts: [{ text: values[0] }],\n          },\n          outputDimensionality: googleOptions?.outputDimensionality,\n          taskType: googleOptions?.taskType,\n        },\n        failedResponseHandler: googleFailedResponseHandler,\n        successfulResponseHandler: createJsonResponseHandler(\n          googleGenerativeAISingleEmbeddingResponseSchema,\n        ),\n        abortSignal,\n        fetch: this.config.fetch,\n      });\n\n      return {\n        embeddings: [response.embedding.values],\n        usage: undefined,\n        response: { headers: responseHeaders, body: rawValue },\n      };\n    }\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue,\n    } = await postJsonToApi({\n      url: `${this.config.baseURL}/models/${this.modelId}:batchEmbedContents`,\n      headers: mergedHeaders,\n      body: {\n        requests: values.map(value => ({\n          model: `models/${this.modelId}`,\n          content: { role: 'user', parts: [{ text: value }] },\n          outputDimensionality: googleOptions?.outputDimensionality,\n          taskType: googleOptions?.taskType,\n        })),\n      },\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        googleGenerativeAITextEmbeddingResponseSchema,\n      ),\n      abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    return {\n      embeddings: response.embeddings.map(item => item.values),\n      usage: undefined,\n      response: { headers: responseHeaders, body: rawValue },\n    };\n  }\n}\n\n// minimal version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst googleGenerativeAITextEmbeddingResponseSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      embeddings: z.array(z.object({ values: z.array(z.number()) })),\n    }),\n  ),\n);\n\n// Schema for single embedding response\nconst googleGenerativeAISingleEmbeddingResponseSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      embedding: z.object({ values: z.array(z.number()) }),\n    }),\n  ),\n);\n","import {\n  createJsonErrorResponseHandler,\n  type InferValidator,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst googleErrorDataSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      error: z.object({\n        code: z.number().nullable(),\n        message: z.string(),\n        status: z.string(),\n      }),\n    }),\n  ),\n);\n\nexport type GoogleErrorData = InferValidator<typeof googleErrorDataSchema>;\n\nexport const googleFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: googleErrorDataSchema,\n  errorToMessage: data => data.error.message,\n});\n","import {\n  type InferValidator,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport type GoogleGenerativeAIEmbeddingModelId =\n  | 'gemini-embedding-001'\n  | 'text-embedding-004'\n  | (string & {});\n\nexport const googleGenerativeAIEmbeddingProviderOptions = lazySchema(() =>\n  zodSchema(\n    z.object({\n      /**\n       * Optional. Optional reduced dimension for the output embedding.\n       * If set, excessive values in the output embedding are truncated from the end.\n       */\n      outputDimensionality: z.number().optional(),\n\n      /**\n       * Optional. Specifies the task type for generating embeddings.\n       * Supported task types:\n       * - SEMANTIC_SIMILARITY: Optimized for text similarity.\n       * - CLASSIFICATION: Optimized for text classification.\n       * - CLUSTERING: Optimized for clustering texts based on similarity.\n       * - RETRIEVAL_DOCUMENT: Optimized for document retrieval.\n       * - RETRIEVAL_QUERY: Optimized for query-based retrieval.\n       * - QUESTION_ANSWERING: Optimized for answering questions.\n       * - FACT_VERIFICATION: Optimized for verifying factual information.\n       * - CODE_RETRIEVAL_QUERY: Optimized for retrieving code blocks based on natural language queries.\n       */\n      taskType: z\n        .enum([\n          'SEMANTIC_SIMILARITY',\n          'CLASSIFICATION',\n          'CLUSTERING',\n          'RETRIEVAL_DOCUMENT',\n          'RETRIEVAL_QUERY',\n          'QUESTION_ANSWERING',\n          'FACT_VERIFICATION',\n          'CODE_RETRIEVAL_QUERY',\n        ])\n        .optional(),\n    }),\n  ),\n);\n\nexport type GoogleGenerativeAIEmbeddingProviderOptions = InferValidator<\n  typeof googleGenerativeAIEmbeddingProviderOptions\n>;\n","import {\n  LanguageModelV2,\n  LanguageModelV2CallWarning,\n  LanguageModelV2Content,\n  LanguageModelV2FinishReason,\n  LanguageModelV2Source,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  InferValidator,\n  ParseResult,\n  Resolvable,\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonResponseHandler,\n  generateId,\n  lazySchema,\n  parseProviderOptions,\n  postJsonToApi,\n  resolve,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { convertJSONSchemaToOpenAPISchema } from './convert-json-schema-to-openapi-schema';\nimport { convertToGoogleGenerativeAIMessages } from './convert-to-google-generative-ai-messages';\nimport { getModelPath } from './get-model-path';\nimport { googleFailedResponseHandler } from './google-error';\nimport { GoogleGenerativeAIContentPart } from './google-generative-ai-prompt';\nimport {\n  GoogleGenerativeAIModelId,\n  googleGenerativeAIProviderOptions,\n} from './google-generative-ai-options';\nimport { prepareTools } from './google-prepare-tools';\nimport { mapGoogleGenerativeAIFinishReason } from './map-google-generative-ai-finish-reason';\n\ntype GoogleGenerativeAIConfig = {\n  provider: string;\n  baseURL: string;\n  headers: Resolvable<Record<string, string | undefined>>;\n  fetch?: FetchFunction;\n  generateId: () => string;\n\n  /**\n   * The supported URLs for the model.\n   */\n  supportedUrls?: () => LanguageModelV2['supportedUrls'];\n};\n\nexport class GoogleGenerativeAILanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  readonly modelId: GoogleGenerativeAIModelId;\n\n  private readonly config: GoogleGenerativeAIConfig;\n  private readonly generateId: () => string;\n\n  constructor(\n    modelId: GoogleGenerativeAIModelId,\n    config: GoogleGenerativeAIConfig,\n  ) {\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = config.generateId ?? generateId;\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  get supportedUrls() {\n    return this.config.supportedUrls?.() ?? {};\n  }\n\n  private async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions,\n  }: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const warnings: LanguageModelV2CallWarning[] = [];\n\n    const googleOptions = await parseProviderOptions({\n      provider: 'google',\n      providerOptions,\n      schema: googleGenerativeAIProviderOptions,\n    });\n\n    // Add warning if includeThoughts is used with a non-Vertex Google provider\n    if (\n      googleOptions?.thinkingConfig?.includeThoughts === true &&\n      !this.config.provider.startsWith('google.vertex.')\n    ) {\n      warnings.push({\n        type: 'other',\n        message:\n          \"The 'includeThoughts' option is only supported with the Google Vertex provider \" +\n          'and might not be supported or could behave unexpectedly with the current Google provider ' +\n          `(${this.config.provider}).`,\n      });\n    }\n\n    const isGemmaModel = this.modelId.toLowerCase().startsWith('gemma-');\n\n    const { contents, systemInstruction } = convertToGoogleGenerativeAIMessages(\n      prompt,\n      { isGemmaModel },\n    );\n\n    const {\n      tools: googleTools,\n      toolConfig: googleToolConfig,\n      toolWarnings,\n    } = prepareTools({\n      tools,\n      toolChoice,\n      modelId: this.modelId,\n    });\n\n    return {\n      args: {\n        generationConfig: {\n          // standardized settings:\n          maxOutputTokens,\n          temperature,\n          topK,\n          topP,\n          frequencyPenalty,\n          presencePenalty,\n          stopSequences,\n          seed,\n\n          // response format:\n          responseMimeType:\n            responseFormat?.type === 'json' ? 'application/json' : undefined,\n          responseSchema:\n            responseFormat?.type === 'json' &&\n            responseFormat.schema != null &&\n            // Google GenAI does not support all OpenAPI Schema features,\n            // so this is needed as an escape hatch:\n            // TODO convert into provider option\n            (googleOptions?.structuredOutputs ?? true)\n              ? convertJSONSchemaToOpenAPISchema(responseFormat.schema)\n              : undefined,\n          ...(googleOptions?.audioTimestamp && {\n            audioTimestamp: googleOptions.audioTimestamp,\n          }),\n\n          // provider options:\n          responseModalities: googleOptions?.responseModalities,\n          thinkingConfig: googleOptions?.thinkingConfig,\n          ...(googleOptions?.imageConfig && {\n            imageConfig: googleOptions.imageConfig,\n          }),\n          ...(googleOptions?.mediaResolution && {\n            mediaResolution: googleOptions.mediaResolution,\n          }),\n        },\n        contents,\n        systemInstruction: isGemmaModel ? undefined : systemInstruction,\n        safetySettings: googleOptions?.safetySettings,\n        tools: googleTools,\n        toolConfig: googleToolConfig,\n        cachedContent: googleOptions?.cachedContent,\n        labels: googleOptions?.labels,\n      },\n      warnings: [...warnings, ...toolWarnings],\n    };\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args, warnings } = await this.getArgs(options);\n    const body = JSON.stringify(args);\n\n    const mergedHeaders = combineHeaders(\n      await resolve(this.config.headers),\n      options.headers,\n    );\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId,\n      )}:generateContent`,\n      headers: mergedHeaders,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(responseSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const candidate = response.candidates[0];\n    const content: Array<LanguageModelV2Content> = [];\n\n    // map ordered parts to content:\n    const parts = candidate.content?.parts ?? [];\n\n    const usageMetadata = response.usageMetadata;\n\n    // Associates a code execution result with its preceding call.\n    let lastCodeExecutionToolCallId: string | undefined;\n\n    // Build content array from all parts\n    for (const part of parts) {\n      if ('executableCode' in part && part.executableCode?.code) {\n        const toolCallId = this.config.generateId();\n        lastCodeExecutionToolCallId = toolCallId;\n\n        content.push({\n          type: 'tool-call',\n          toolCallId,\n          toolName: 'code_execution',\n          input: JSON.stringify(part.executableCode),\n          providerExecuted: true,\n        });\n      } else if ('codeExecutionResult' in part && part.codeExecutionResult) {\n        content.push({\n          type: 'tool-result',\n          // Assumes a result directly follows its corresponding call part.\n          toolCallId: lastCodeExecutionToolCallId!,\n          toolName: 'code_execution',\n          result: {\n            outcome: part.codeExecutionResult.outcome,\n            output: part.codeExecutionResult.output,\n          },\n          providerExecuted: true,\n        });\n        // Clear the ID after use to avoid accidental reuse.\n        lastCodeExecutionToolCallId = undefined;\n      } else if ('text' in part && part.text != null && part.text.length > 0) {\n        content.push({\n          type: part.thought === true ? 'reasoning' : 'text',\n          text: part.text,\n          providerMetadata: part.thoughtSignature\n            ? { google: { thoughtSignature: part.thoughtSignature } }\n            : undefined,\n        });\n      } else if ('functionCall' in part) {\n        content.push({\n          type: 'tool-call' as const,\n          toolCallId: this.config.generateId(),\n          toolName: part.functionCall.name,\n          input: JSON.stringify(part.functionCall.args),\n          providerMetadata: part.thoughtSignature\n            ? { google: { thoughtSignature: part.thoughtSignature } }\n            : undefined,\n        });\n      } else if ('inlineData' in part) {\n        content.push({\n          type: 'file' as const,\n          data: part.inlineData.data,\n          mediaType: part.inlineData.mimeType,\n        });\n      }\n    }\n\n    const sources =\n      extractSources({\n        groundingMetadata: candidate.groundingMetadata,\n        generateId: this.config.generateId,\n      }) ?? [];\n    for (const source of sources) {\n      content.push(source);\n    }\n\n    return {\n      content,\n      finishReason: mapGoogleGenerativeAIFinishReason({\n        finishReason: candidate.finishReason,\n        hasToolCalls: content.some(part => part.type === 'tool-call'),\n      }),\n      usage: {\n        inputTokens: usageMetadata?.promptTokenCount ?? undefined,\n        outputTokens: usageMetadata?.candidatesTokenCount ?? undefined,\n        totalTokens: usageMetadata?.totalTokenCount ?? undefined,\n        reasoningTokens: usageMetadata?.thoughtsTokenCount ?? undefined,\n        cachedInputTokens: usageMetadata?.cachedContentTokenCount ?? undefined,\n      },\n      warnings,\n      providerMetadata: {\n        google: {\n          promptFeedback: response.promptFeedback ?? null,\n          groundingMetadata: candidate.groundingMetadata ?? null,\n          urlContextMetadata: candidate.urlContextMetadata ?? null,\n          safetyRatings: candidate.safetyRatings ?? null,\n          usageMetadata: usageMetadata ?? null,\n        },\n      },\n      request: { body },\n      response: {\n        // TODO timestamp, model id, id\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings } = await this.getArgs(options);\n\n    const body = JSON.stringify(args);\n    const headers = combineHeaders(\n      await resolve(this.config.headers),\n      options.headers,\n    );\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId,\n      )}:streamGenerateContent?alt=sse`,\n      headers,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(chunkSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    let finishReason: LanguageModelV2FinishReason = 'unknown';\n    const usage: LanguageModelV2Usage = {\n      inputTokens: undefined,\n      outputTokens: undefined,\n      totalTokens: undefined,\n    };\n    let providerMetadata: SharedV2ProviderMetadata | undefined = undefined;\n\n    const generateId = this.config.generateId;\n    let hasToolCalls = false;\n\n    // Track active blocks to group consecutive parts of same type\n    let currentTextBlockId: string | null = null;\n    let currentReasoningBlockId: string | null = null;\n    let blockCounter = 0;\n\n    // Track emitted sources to prevent duplicates\n    const emittedSourceUrls = new Set<string>();\n    // Associates a code execution result with its preceding call.\n    let lastCodeExecutionToolCallId: string | undefined;\n\n    return {\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<ChunkSchema>,\n          LanguageModelV2StreamPart\n        >({\n          start(controller) {\n            controller.enqueue({ type: 'stream-start', warnings });\n          },\n\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: 'raw', rawValue: chunk.rawValue });\n            }\n\n            if (!chunk.success) {\n              controller.enqueue({ type: 'error', error: chunk.error });\n              return;\n            }\n\n            const value = chunk.value;\n\n            const usageMetadata = value.usageMetadata;\n\n            if (usageMetadata != null) {\n              usage.inputTokens = usageMetadata.promptTokenCount ?? undefined;\n              usage.outputTokens =\n                usageMetadata.candidatesTokenCount ?? undefined;\n              usage.totalTokens = usageMetadata.totalTokenCount ?? undefined;\n              usage.reasoningTokens =\n                usageMetadata.thoughtsTokenCount ?? undefined;\n              usage.cachedInputTokens =\n                usageMetadata.cachedContentTokenCount ?? undefined;\n            }\n\n            const candidate = value.candidates?.[0];\n\n            // sometimes the API returns an empty candidates array\n            if (candidate == null) {\n              return;\n            }\n\n            const content = candidate.content;\n\n            const sources = extractSources({\n              groundingMetadata: candidate.groundingMetadata,\n              generateId,\n            });\n            if (sources != null) {\n              for (const source of sources) {\n                if (\n                  source.sourceType === 'url' &&\n                  !emittedSourceUrls.has(source.url)\n                ) {\n                  emittedSourceUrls.add(source.url);\n                  controller.enqueue(source);\n                }\n              }\n            }\n\n            // Process tool call's parts before determining finishReason to ensure hasToolCalls is properly set\n            if (content != null) {\n              // Process text parts individually to handle reasoning parts\n              const parts = content.parts ?? [];\n              for (const part of parts) {\n                if ('executableCode' in part && part.executableCode?.code) {\n                  const toolCallId = generateId();\n                  lastCodeExecutionToolCallId = toolCallId;\n\n                  controller.enqueue({\n                    type: 'tool-call',\n                    toolCallId,\n                    toolName: 'code_execution',\n                    input: JSON.stringify(part.executableCode),\n                    providerExecuted: true,\n                  });\n\n                  hasToolCalls = true;\n                } else if (\n                  'codeExecutionResult' in part &&\n                  part.codeExecutionResult\n                ) {\n                  // Assumes a result directly follows its corresponding call part.\n                  const toolCallId = lastCodeExecutionToolCallId;\n\n                  if (toolCallId) {\n                    controller.enqueue({\n                      type: 'tool-result',\n                      toolCallId,\n                      toolName: 'code_execution',\n                      result: {\n                        outcome: part.codeExecutionResult.outcome,\n                        output: part.codeExecutionResult.output,\n                      },\n                      providerExecuted: true,\n                    });\n                    // Clear the ID after use.\n                    lastCodeExecutionToolCallId = undefined;\n                  }\n                } else if (\n                  'text' in part &&\n                  part.text != null &&\n                  part.text.length > 0\n                ) {\n                  if (part.thought === true) {\n                    // End any active text block before starting reasoning\n                    if (currentTextBlockId !== null) {\n                      controller.enqueue({\n                        type: 'text-end',\n                        id: currentTextBlockId,\n                      });\n                      currentTextBlockId = null;\n                    }\n\n                    // Start new reasoning block if not already active\n                    if (currentReasoningBlockId === null) {\n                      currentReasoningBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: 'reasoning-start',\n                        id: currentReasoningBlockId,\n                        providerMetadata: part.thoughtSignature\n                          ? {\n                              google: {\n                                thoughtSignature: part.thoughtSignature,\n                              },\n                            }\n                          : undefined,\n                      });\n                    }\n\n                    controller.enqueue({\n                      type: 'reasoning-delta',\n                      id: currentReasoningBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature\n                        ? {\n                            google: { thoughtSignature: part.thoughtSignature },\n                          }\n                        : undefined,\n                    });\n                  } else {\n                    // End any active reasoning block before starting text\n                    if (currentReasoningBlockId !== null) {\n                      controller.enqueue({\n                        type: 'reasoning-end',\n                        id: currentReasoningBlockId,\n                      });\n                      currentReasoningBlockId = null;\n                    }\n\n                    // Start new text block if not already active\n                    if (currentTextBlockId === null) {\n                      currentTextBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: 'text-start',\n                        id: currentTextBlockId,\n                        providerMetadata: part.thoughtSignature\n                          ? {\n                              google: {\n                                thoughtSignature: part.thoughtSignature,\n                              },\n                            }\n                          : undefined,\n                      });\n                    }\n\n                    controller.enqueue({\n                      type: 'text-delta',\n                      id: currentTextBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature\n                        ? {\n                            google: { thoughtSignature: part.thoughtSignature },\n                          }\n                        : undefined,\n                    });\n                  }\n                }\n              }\n\n              const inlineDataParts = getInlineDataParts(content.parts);\n              if (inlineDataParts != null) {\n                for (const part of inlineDataParts) {\n                  controller.enqueue({\n                    type: 'file',\n                    mediaType: part.inlineData.mimeType,\n                    data: part.inlineData.data,\n                  });\n                }\n              }\n\n              const toolCallDeltas = getToolCallsFromParts({\n                parts: content.parts,\n                generateId,\n              });\n\n              if (toolCallDeltas != null) {\n                for (const toolCall of toolCallDeltas) {\n                  controller.enqueue({\n                    type: 'tool-input-start',\n                    id: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  controller.enqueue({\n                    type: 'tool-input-delta',\n                    id: toolCall.toolCallId,\n                    delta: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  controller.enqueue({\n                    type: 'tool-input-end',\n                    id: toolCall.toolCallId,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  controller.enqueue({\n                    type: 'tool-call',\n                    toolCallId: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    input: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  hasToolCalls = true;\n                }\n              }\n            }\n\n            if (candidate.finishReason != null) {\n              finishReason = mapGoogleGenerativeAIFinishReason({\n                finishReason: candidate.finishReason,\n                hasToolCalls,\n              });\n\n              providerMetadata = {\n                google: {\n                  promptFeedback: value.promptFeedback ?? null,\n                  groundingMetadata: candidate.groundingMetadata ?? null,\n                  urlContextMetadata: candidate.urlContextMetadata ?? null,\n                  safetyRatings: candidate.safetyRatings ?? null,\n                },\n              };\n              if (usageMetadata != null) {\n                providerMetadata.google.usageMetadata = usageMetadata;\n              }\n            }\n          },\n\n          flush(controller) {\n            // Close any open blocks before finishing\n            if (currentTextBlockId !== null) {\n              controller.enqueue({\n                type: 'text-end',\n                id: currentTextBlockId,\n              });\n            }\n            if (currentReasoningBlockId !== null) {\n              controller.enqueue({\n                type: 'reasoning-end',\n                id: currentReasoningBlockId,\n              });\n            }\n\n            controller.enqueue({\n              type: 'finish',\n              finishReason,\n              usage,\n              providerMetadata,\n            });\n          },\n        }),\n      ),\n      response: { headers: responseHeaders },\n      request: { body },\n    };\n  }\n}\n\nfunction getToolCallsFromParts({\n  parts,\n  generateId,\n}: {\n  parts: ContentSchema['parts'];\n  generateId: () => string;\n}) {\n  const functionCallParts = parts?.filter(\n    part => 'functionCall' in part,\n  ) as Array<\n    GoogleGenerativeAIContentPart & {\n      functionCall: { name: string; args: unknown };\n      thoughtSignature?: string | null;\n    }\n  >;\n\n  return functionCallParts == null || functionCallParts.length === 0\n    ? undefined\n    : functionCallParts.map(part => ({\n        type: 'tool-call' as const,\n        toolCallId: generateId(),\n        toolName: part.functionCall.name,\n        args: JSON.stringify(part.functionCall.args),\n        providerMetadata: part.thoughtSignature\n          ? { google: { thoughtSignature: part.thoughtSignature } }\n          : undefined,\n      }));\n}\n\nfunction getInlineDataParts(parts: ContentSchema['parts']) {\n  return parts?.filter(\n    (\n      part,\n    ): part is {\n      inlineData: { mimeType: string; data: string };\n    } => 'inlineData' in part,\n  );\n}\n\nfunction extractSources({\n  groundingMetadata,\n  generateId,\n}: {\n  groundingMetadata: GroundingMetadataSchema | undefined | null;\n  generateId: () => string;\n}): undefined | LanguageModelV2Source[] {\n  return groundingMetadata?.groundingChunks\n    ?.filter(\n      (\n        chunk,\n      ): chunk is GroundingChunkSchema & {\n        web: { uri: string; title?: string };\n      } => chunk.web != null,\n    )\n    .map(chunk => ({\n      type: 'source',\n      sourceType: 'url',\n      id: generateId(),\n      url: chunk.web.uri,\n      title: chunk.web.title,\n    }));\n}\n\nexport const getGroundingMetadataSchema = () =>\n  z.object({\n    webSearchQueries: z.array(z.string()).nullish(),\n    retrievalQueries: z.array(z.string()).nullish(),\n    searchEntryPoint: z.object({ renderedContent: z.string() }).nullish(),\n    groundingChunks: z\n      .array(\n        z.object({\n          web: z.object({ uri: z.string(), title: z.string() }).nullish(),\n          retrievedContext: z\n            .object({ uri: z.string(), title: z.string() })\n            .nullish(),\n        }),\n      )\n      .nullish(),\n    groundingSupports: z\n      .array(\n        z.object({\n          segment: z.object({\n            startIndex: z.number().nullish(),\n            endIndex: z.number().nullish(),\n            text: z.string().nullish(),\n          }),\n          segment_text: z.string().nullish(),\n          groundingChunkIndices: z.array(z.number()).nullish(),\n          supportChunkIndices: z.array(z.number()).nullish(),\n          confidenceScores: z.array(z.number()).nullish(),\n          confidenceScore: z.array(z.number()).nullish(),\n        }),\n      )\n      .nullish(),\n    retrievalMetadata: z\n      .union([\n        z.object({\n          webDynamicRetrievalScore: z.number(),\n        }),\n        z.object({}),\n      ])\n      .nullish(),\n  });\n\nconst getContentSchema = () =>\n  z.object({\n    parts: z\n      .array(\n        z.union([\n          // note: order matters since text can be fully empty\n          z.object({\n            functionCall: z.object({\n              name: z.string(),\n              args: z.unknown(),\n            }),\n            thoughtSignature: z.string().nullish(),\n          }),\n          z.object({\n            inlineData: z.object({\n              mimeType: z.string(),\n              data: z.string(),\n            }),\n          }),\n          z.object({\n            executableCode: z\n              .object({\n                language: z.string(),\n                code: z.string(),\n              })\n              .nullish(),\n            codeExecutionResult: z\n              .object({\n                outcome: z.string(),\n                output: z.string(),\n              })\n              .nullish(),\n            text: z.string().nullish(),\n            thought: z.boolean().nullish(),\n            thoughtSignature: z.string().nullish(),\n          }),\n        ]),\n      )\n      .nullish(),\n  });\n\n// https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/configure-safety-filters\nconst getSafetyRatingSchema = () =>\n  z.object({\n    category: z.string().nullish(),\n    probability: z.string().nullish(),\n    probabilityScore: z.number().nullish(),\n    severity: z.string().nullish(),\n    severityScore: z.number().nullish(),\n    blocked: z.boolean().nullish(),\n  });\n\nconst usageSchema = z.object({\n  cachedContentTokenCount: z.number().nullish(),\n  thoughtsTokenCount: z.number().nullish(),\n  promptTokenCount: z.number().nullish(),\n  candidatesTokenCount: z.number().nullish(),\n  totalTokenCount: z.number().nullish(),\n});\n\n// https://ai.google.dev/api/generate-content#UrlRetrievalMetadata\nexport const getUrlContextMetadataSchema = () =>\n  z.object({\n    urlMetadata: z.array(\n      z.object({\n        retrievedUrl: z.string(),\n        urlRetrievalStatus: z.string(),\n      }),\n    ),\n  });\n\nconst responseSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      candidates: z.array(\n        z.object({\n          content: getContentSchema().nullish().or(z.object({}).strict()),\n          finishReason: z.string().nullish(),\n          safetyRatings: z.array(getSafetyRatingSchema()).nullish(),\n          groundingMetadata: getGroundingMetadataSchema().nullish(),\n          urlContextMetadata: getUrlContextMetadataSchema().nullish(),\n        }),\n      ),\n      usageMetadata: usageSchema.nullish(),\n      promptFeedback: z\n        .object({\n          blockReason: z.string().nullish(),\n          safetyRatings: z.array(getSafetyRatingSchema()).nullish(),\n        })\n        .nullish(),\n    }),\n  ),\n);\n\ntype ContentSchema = NonNullable<\n  InferValidator<typeof responseSchema>['candidates'][number]['content']\n>;\nexport type GroundingMetadataSchema = NonNullable<\n  InferValidator<\n    typeof responseSchema\n  >['candidates'][number]['groundingMetadata']\n>;\n\ntype GroundingChunkSchema = NonNullable<\n  GroundingMetadataSchema['groundingChunks']\n>[number];\n\nexport type UrlContextMetadataSchema = NonNullable<\n  InferValidator<\n    typeof responseSchema\n  >['candidates'][number]['urlContextMetadata']\n>;\n\nexport type SafetyRatingSchema = NonNullable<\n  InferValidator<typeof responseSchema>['candidates'][number]['safetyRatings']\n>[number];\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst chunkSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      candidates: z\n        .array(\n          z.object({\n            content: getContentSchema().nullish(),\n            finishReason: z.string().nullish(),\n            safetyRatings: z.array(getSafetyRatingSchema()).nullish(),\n            groundingMetadata: getGroundingMetadataSchema().nullish(),\n            urlContextMetadata: getUrlContextMetadataSchema().nullish(),\n          }),\n        )\n        .nullish(),\n      usageMetadata: usageSchema.nullish(),\n      promptFeedback: z\n        .object({\n          blockReason: z.string().nullish(),\n          safetyRatings: z.array(getSafetyRatingSchema()).nullish(),\n        })\n        .nullish(),\n    }),\n  ),\n);\n\ntype ChunkSchema = InferValidator<typeof chunkSchema>;\n","import { JSONSchema7Definition } from '@ai-sdk/provider';\n\n/**\n * Converts JSON Schema 7 to OpenAPI Schema 3.0\n */\nexport function convertJSONSchemaToOpenAPISchema(\n  jsonSchema: JSONSchema7Definition | undefined,\n): unknown {\n  // parameters need to be undefined if they are empty objects:\n  if (jsonSchema == null || isEmptyObjectSchema(jsonSchema)) {\n    return undefined;\n  }\n\n  if (typeof jsonSchema === 'boolean') {\n    return { type: 'boolean', properties: {} };\n  }\n\n  const {\n    type,\n    description,\n    required,\n    properties,\n    items,\n    allOf,\n    anyOf,\n    oneOf,\n    format,\n    const: constValue,\n    minLength,\n    enum: enumValues,\n  } = jsonSchema;\n\n  const result: Record<string, unknown> = {};\n\n  if (description) result.description = description;\n  if (required) result.required = required;\n  if (format) result.format = format;\n\n  if (constValue !== undefined) {\n    result.enum = [constValue];\n  }\n\n  // Handle type\n  if (type) {\n    if (Array.isArray(type)) {\n      if (type.includes('null')) {\n        result.type = type.filter(t => t !== 'null')[0];\n        result.nullable = true;\n      } else {\n        result.type = type;\n      }\n    } else if (type === 'null') {\n      result.type = 'null';\n    } else {\n      result.type = type;\n    }\n  }\n\n  // Handle enum\n  if (enumValues !== undefined) {\n    result.enum = enumValues;\n  }\n\n  if (properties != null) {\n    result.properties = Object.entries(properties).reduce(\n      (acc, [key, value]) => {\n        acc[key] = convertJSONSchemaToOpenAPISchema(value);\n        return acc;\n      },\n      {} as Record<string, unknown>,\n    );\n  }\n\n  if (items) {\n    result.items = Array.isArray(items)\n      ? items.map(convertJSONSchemaToOpenAPISchema)\n      : convertJSONSchemaToOpenAPISchema(items);\n  }\n\n  if (allOf) {\n    result.allOf = allOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n  if (anyOf) {\n    // Handle cases where anyOf includes a null type\n    if (\n      anyOf.some(\n        schema => typeof schema === 'object' && schema?.type === 'null',\n      )\n    ) {\n      const nonNullSchemas = anyOf.filter(\n        schema => !(typeof schema === 'object' && schema?.type === 'null'),\n      );\n\n      if (nonNullSchemas.length === 1) {\n        // If there's only one non-null schema, convert it and make it nullable\n        const converted = convertJSONSchemaToOpenAPISchema(nonNullSchemas[0]);\n        if (typeof converted === 'object') {\n          result.nullable = true;\n          Object.assign(result, converted);\n        }\n      } else {\n        // If there are multiple non-null schemas, keep them in anyOf\n        result.anyOf = nonNullSchemas.map(convertJSONSchemaToOpenAPISchema);\n        result.nullable = true;\n      }\n    } else {\n      result.anyOf = anyOf.map(convertJSONSchemaToOpenAPISchema);\n    }\n  }\n  if (oneOf) {\n    result.oneOf = oneOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n\n  if (minLength !== undefined) {\n    result.minLength = minLength;\n  }\n\n  return result;\n}\n\nfunction isEmptyObjectSchema(jsonSchema: JSONSchema7Definition): boolean {\n  return (\n    jsonSchema != null &&\n    typeof jsonSchema === 'object' &&\n    jsonSchema.type === 'object' &&\n    (jsonSchema.properties == null ||\n      Object.keys(jsonSchema.properties).length === 0) &&\n    !jsonSchema.additionalProperties\n  );\n}\n","import {\n  LanguageModelV2Prompt,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  GoogleGenerativeAIContent,\n  GoogleGenerativeAIContentPart,\n  GoogleGenerativeAIPrompt,\n} from './google-generative-ai-prompt';\nimport { convertToBase64 } from '@ai-sdk/provider-utils';\n\nexport function convertToGoogleGenerativeAIMessages(\n  prompt: LanguageModelV2Prompt,\n  options?: { isGemmaModel?: boolean },\n): GoogleGenerativeAIPrompt {\n  const systemInstructionParts: Array<{ text: string }> = [];\n  const contents: Array<GoogleGenerativeAIContent> = [];\n  let systemMessagesAllowed = true;\n  const isGemmaModel = options?.isGemmaModel ?? false;\n\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case 'system': {\n        if (!systemMessagesAllowed) {\n          throw new UnsupportedFunctionalityError({\n            functionality:\n              'system messages are only supported at the beginning of the conversation',\n          });\n        }\n\n        systemInstructionParts.push({ text: content });\n        break;\n      }\n\n      case 'user': {\n        systemMessagesAllowed = false;\n\n        const parts: GoogleGenerativeAIContentPart[] = [];\n\n        for (const part of content) {\n          switch (part.type) {\n            case 'text': {\n              parts.push({ text: part.text });\n              break;\n            }\n\n            case 'file': {\n              // default to image/jpeg for unknown image/* types\n              const mediaType =\n                part.mediaType === 'image/*' ? 'image/jpeg' : part.mediaType;\n\n              parts.push(\n                part.data instanceof URL\n                  ? {\n                      fileData: {\n                        mimeType: mediaType,\n                        fileUri: part.data.toString(),\n                      },\n                    }\n                  : {\n                      inlineData: {\n                        mimeType: mediaType,\n                        data: convertToBase64(part.data),\n                      },\n                    },\n              );\n\n              break;\n            }\n          }\n        }\n\n        contents.push({ role: 'user', parts });\n        break;\n      }\n\n      case 'assistant': {\n        systemMessagesAllowed = false;\n\n        contents.push({\n          role: 'model',\n          parts: content\n            .map(part => {\n              switch (part.type) {\n                case 'text': {\n                  return part.text.length === 0\n                    ? undefined\n                    : {\n                        text: part.text,\n                        thoughtSignature:\n                          part.providerOptions?.google?.thoughtSignature,\n                      };\n                }\n\n                case 'reasoning': {\n                  return part.text.length === 0\n                    ? undefined\n                    : {\n                        text: part.text,\n                        thought: true,\n                        thoughtSignature:\n                          part.providerOptions?.google?.thoughtSignature,\n                      };\n                }\n\n                case 'file': {\n                  if (part.mediaType !== 'image/png') {\n                    throw new UnsupportedFunctionalityError({\n                      functionality:\n                        'Only PNG images are supported in assistant messages',\n                    });\n                  }\n\n                  if (part.data instanceof URL) {\n                    throw new UnsupportedFunctionalityError({\n                      functionality:\n                        'File data URLs in assistant messages are not supported',\n                    });\n                  }\n\n                  return {\n                    inlineData: {\n                      mimeType: part.mediaType,\n                      data: convertToBase64(part.data),\n                    },\n                  };\n                }\n\n                case 'tool-call': {\n                  return {\n                    functionCall: {\n                      name: part.toolName,\n                      args: part.input,\n                    },\n                    thoughtSignature:\n                      part.providerOptions?.google?.thoughtSignature,\n                  };\n                }\n              }\n            })\n            .filter(part => part !== undefined),\n        });\n        break;\n      }\n\n      case 'tool': {\n        systemMessagesAllowed = false;\n\n        const parts: GoogleGenerativeAIContentPart[] = [];\n\n        for (const part of content) {\n          const output = part.output;\n\n          if (output.type === 'content') {\n            for (const contentPart of output.value) {\n              switch (contentPart.type) {\n                case 'text':\n                  parts.push({\n                    functionResponse: {\n                      name: part.toolName,\n                      response: {\n                        name: part.toolName,\n                        content: contentPart.text,\n                      },\n                    },\n                  });\n                  break;\n                case 'media':\n                  parts.push(\n                    {\n                      inlineData: {\n                        mimeType: contentPart.mediaType,\n                        data: contentPart.data,\n                      },\n                    },\n                    {\n                      text: 'Tool executed successfully and returned this image as a response',\n                    },\n                  );\n                  break;\n                default:\n                  parts.push({ text: JSON.stringify(contentPart) });\n                  break;\n              }\n            }\n          } else {\n            parts.push({\n              functionResponse: {\n                name: part.toolName,\n                response: {\n                  name: part.toolName,\n                  content: output.value,\n                },\n              },\n            });\n          }\n        }\n\n        contents.push({\n          role: 'user',\n          parts,\n        });\n        break;\n      }\n    }\n  }\n\n  if (\n    isGemmaModel &&\n    systemInstructionParts.length > 0 &&\n    contents.length > 0 &&\n    contents[0].role === 'user'\n  ) {\n    const systemText = systemInstructionParts\n      .map(part => part.text)\n      .join('\\n\\n');\n\n    contents[0].parts.unshift({ text: systemText + '\\n\\n' });\n  }\n\n  return {\n    systemInstruction:\n      systemInstructionParts.length > 0 && !isGemmaModel\n        ? { parts: systemInstructionParts }\n        : undefined,\n    contents,\n  };\n}\n","export function getModelPath(modelId: string): string {\n  return modelId.includes('/') ? modelId : `models/${modelId}`;\n}\n","import {\n  type InferValidator,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport type GoogleGenerativeAIModelId =\n  // Stable models\n  // https://ai.google.dev/gemini-api/docs/models/gemini\n  | 'gemini-1.5-flash'\n  | 'gemini-1.5-flash-latest'\n  | 'gemini-1.5-flash-001'\n  | 'gemini-1.5-flash-002'\n  | 'gemini-1.5-flash-8b'\n  | 'gemini-1.5-flash-8b-latest'\n  | 'gemini-1.5-flash-8b-001'\n  | 'gemini-1.5-pro'\n  | 'gemini-1.5-pro-latest'\n  | 'gemini-1.5-pro-001'\n  | 'gemini-1.5-pro-002'\n  | 'gemini-2.0-flash'\n  | 'gemini-2.0-flash-001'\n  | 'gemini-2.0-flash-live-001'\n  | 'gemini-2.0-flash-lite'\n  | 'gemini-2.0-pro-exp-02-05'\n  | 'gemini-2.0-flash-thinking-exp-01-21'\n  | 'gemini-2.0-flash-exp'\n  | 'gemini-2.5-pro'\n  | 'gemini-2.5-flash'\n  | 'gemini-2.5-flash-image-preview'\n  | 'gemini-2.5-flash-lite'\n  | 'gemini-2.5-flash-lite-preview-09-2025'\n  | 'gemini-2.5-flash-preview-04-17'\n  | 'gemini-2.5-flash-preview-09-2025'\n  // Experimental models\n  // https://ai.google.dev/gemini-api/docs/models/experimental-models\n  | 'gemini-2.5-pro-exp-03-25'\n  | 'gemini-exp-1206'\n  | 'gemma-3-12b-it'\n  | 'gemma-3-27b-it'\n  | (string & {});\n\nexport const googleGenerativeAIProviderOptions = lazySchema(() =>\n  zodSchema(\n    z.object({\n      responseModalities: z.array(z.enum(['TEXT', 'IMAGE'])).optional(),\n\n      thinkingConfig: z\n        .object({\n          thinkingBudget: z.number().optional(),\n          includeThoughts: z.boolean().optional(),\n        })\n        .optional(),\n\n      /**\n       * Optional.\n       * The name of the cached content used as context to serve the prediction.\n       * Format: cachedContents/{cachedContent}\n       */\n      cachedContent: z.string().optional(),\n\n      /**\n       * Optional. Enable structured output. Default is true.\n       *\n       * This is useful when the JSON Schema contains elements that are\n       * not supported by the OpenAPI schema version that\n       * Google Generative AI uses. You can use this to disable\n       * structured outputs if you need to.\n       */\n      structuredOutputs: z.boolean().optional(),\n\n      /**\n       * Optional. A list of unique safety settings for blocking unsafe content.\n       */\n      safetySettings: z\n        .array(\n          z.object({\n            category: z.enum([\n              'HARM_CATEGORY_UNSPECIFIED',\n              'HARM_CATEGORY_HATE_SPEECH',\n              'HARM_CATEGORY_DANGEROUS_CONTENT',\n              'HARM_CATEGORY_HARASSMENT',\n              'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n              'HARM_CATEGORY_CIVIC_INTEGRITY',\n            ]),\n            threshold: z.enum([\n              'HARM_BLOCK_THRESHOLD_UNSPECIFIED',\n              'BLOCK_LOW_AND_ABOVE',\n              'BLOCK_MEDIUM_AND_ABOVE',\n              'BLOCK_ONLY_HIGH',\n              'BLOCK_NONE',\n              'OFF',\n            ]),\n          }),\n        )\n        .optional(),\n\n      threshold: z\n        .enum([\n          'HARM_BLOCK_THRESHOLD_UNSPECIFIED',\n          'BLOCK_LOW_AND_ABOVE',\n          'BLOCK_MEDIUM_AND_ABOVE',\n          'BLOCK_ONLY_HIGH',\n          'BLOCK_NONE',\n          'OFF',\n        ])\n        .optional(),\n\n      /**\n       * Optional. Enables timestamp understanding for audio-only files.\n       *\n       * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/audio-understanding\n       */\n      audioTimestamp: z.boolean().optional(),\n\n      /**\n       * Optional. Defines labels used in billing reports. Available on Vertex AI only.\n       *\n       * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/add-labels-to-api-calls\n       */\n      labels: z.record(z.string(), z.string()).optional(),\n\n      /**\n       * Optional. If specified, the media resolution specified will be used.\n       *\n       * https://ai.google.dev/api/generate-content#MediaResolution\n       */\n      mediaResolution: z\n        .enum([\n          'MEDIA_RESOLUTION_UNSPECIFIED',\n          'MEDIA_RESOLUTION_LOW',\n          'MEDIA_RESOLUTION_MEDIUM',\n          'MEDIA_RESOLUTION_HIGH',\n        ])\n        .optional(),\n\n      /**\n       * Optional. Configures the image generation aspect ratio for Gemini models.\n       *\n       * https://ai.google.dev/gemini-api/docs/image-generation#aspect_ratios\n       */\n      imageConfig: z\n        .object({\n          aspectRatio: z\n            .enum([\n              '1:1',\n              '2:3',\n              '3:2',\n              '3:4',\n              '4:3',\n              '4:5',\n              '5:4',\n              '9:16',\n              '16:9',\n              '21:9',\n            ])\n            .optional(),\n        })\n        .optional(),\n    }),\n  ),\n);\n\nexport type GoogleGenerativeAIProviderOptions = InferValidator<\n  typeof googleGenerativeAIProviderOptions\n>;\n","import {\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { convertJSONSchemaToOpenAPISchema } from './convert-json-schema-to-openapi-schema';\nimport { GoogleGenerativeAIModelId } from './google-generative-ai-options';\n\nexport function prepareTools({\n  tools,\n  toolChoice,\n  modelId,\n}: {\n  tools: LanguageModelV2CallOptions['tools'];\n  toolChoice?: LanguageModelV2CallOptions['toolChoice'];\n  modelId: GoogleGenerativeAIModelId;\n}): {\n  tools:\n    | {\n        functionDeclarations: Array<{\n          name: string;\n          description: string;\n          parameters: unknown;\n        }>;\n      }\n    | Record<string, any>\n    | undefined;\n  toolConfig:\n    | undefined\n    | {\n        functionCallingConfig: {\n          mode: 'AUTO' | 'NONE' | 'ANY';\n          allowedFunctionNames?: string[];\n        };\n      };\n  toolWarnings: LanguageModelV2CallWarning[];\n} {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  tools = tools?.length ? tools : undefined;\n\n  const toolWarnings: LanguageModelV2CallWarning[] = [];\n\n  const isGemini2 = modelId.includes('gemini-2');\n  const supportsDynamicRetrieval =\n    modelId.includes('gemini-1.5-flash') && !modelId.includes('-8b');\n\n  if (tools == null) {\n    return { tools: undefined, toolConfig: undefined, toolWarnings };\n  }\n\n  // Check for mixed tool types and add warnings\n  const hasFunctionTools = tools.some(tool => tool.type === 'function');\n  const hasProviderDefinedTools = tools.some(\n    tool => tool.type === 'provider-defined',\n  );\n\n  if (hasFunctionTools && hasProviderDefinedTools) {\n    toolWarnings.push({\n      type: 'unsupported-tool',\n      tool: tools.find(tool => tool.type === 'function')!,\n      details:\n        'Cannot mix function tools with provider-defined tools in the same request. Please use either function tools or provider-defined tools, but not both.',\n    });\n  }\n\n  if (hasProviderDefinedTools) {\n    const googleTools: any[] = [];\n\n    const providerDefinedTools = tools.filter(\n      tool => tool.type === 'provider-defined',\n    );\n    providerDefinedTools.forEach(tool => {\n      switch (tool.id) {\n        case 'google.google_search':\n          if (isGemini2) {\n            googleTools.push({ googleSearch: {} });\n          } else if (supportsDynamicRetrieval) {\n            // For non-Gemini-2 models that don't support dynamic retrieval, use basic googleSearchRetrieval\n            googleTools.push({\n              googleSearchRetrieval: {\n                dynamicRetrievalConfig: {\n                  mode: tool.args.mode as\n                    | 'MODE_DYNAMIC'\n                    | 'MODE_UNSPECIFIED'\n                    | undefined,\n                  dynamicThreshold: tool.args.dynamicThreshold as\n                    | number\n                    | undefined,\n                },\n              },\n            });\n          } else {\n            googleTools.push({ googleSearchRetrieval: {} });\n          }\n          break;\n        case 'google.url_context':\n          if (isGemini2) {\n            googleTools.push({ urlContext: {} });\n          } else {\n            toolWarnings.push({\n              type: 'unsupported-tool',\n              tool,\n              details:\n                'The URL context tool is not supported with other Gemini models than Gemini 2.',\n            });\n          }\n          break;\n        case 'google.code_execution':\n          if (isGemini2) {\n            googleTools.push({ codeExecution: {} });\n          } else {\n            toolWarnings.push({\n              type: 'unsupported-tool',\n              tool,\n              details:\n                'The code execution tools is not supported with other Gemini models than Gemini 2.',\n            });\n          }\n          break;\n        default:\n          toolWarnings.push({ type: 'unsupported-tool', tool });\n          break;\n      }\n    });\n\n    return {\n      tools: googleTools.length > 0 ? googleTools : undefined,\n      toolConfig: undefined,\n      toolWarnings,\n    };\n  }\n\n  const functionDeclarations = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case 'function':\n        functionDeclarations.push({\n          name: tool.name,\n          description: tool.description ?? '',\n          parameters: convertJSONSchemaToOpenAPISchema(tool.inputSchema),\n        });\n        break;\n      default:\n        toolWarnings.push({ type: 'unsupported-tool', tool });\n        break;\n    }\n  }\n\n  if (toolChoice == null) {\n    return {\n      tools: { functionDeclarations },\n      toolConfig: undefined,\n      toolWarnings,\n    };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: 'AUTO' } },\n        toolWarnings,\n      };\n    case 'none':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: 'NONE' } },\n        toolWarnings,\n      };\n    case 'required':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: 'ANY' } },\n        toolWarnings,\n      };\n    case 'tool':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: {\n          functionCallingConfig: {\n            mode: 'ANY',\n            allowedFunctionNames: [toolChoice.toolName],\n          },\n        },\n        toolWarnings,\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`,\n      });\n    }\n  }\n}\n","import { LanguageModelV2FinishReason } from '@ai-sdk/provider';\n\nexport function mapGoogleGenerativeAIFinishReason({\n  finishReason,\n  hasToolCalls,\n}: {\n  finishReason: string | null | undefined;\n  hasToolCalls: boolean;\n}): LanguageModelV2FinishReason {\n  switch (finishReason) {\n    case 'STOP':\n      return hasToolCalls ? 'tool-calls' : 'stop';\n    case 'MAX_TOKENS':\n      return 'length';\n    case 'IMAGE_SAFETY':\n    case 'RECITATION':\n    case 'SAFETY':\n    case 'BLOCKLIST':\n    case 'PROHIBITED_CONTENT':\n    case 'SPII':\n      return 'content-filter';\n    case 'FINISH_REASON_UNSPECIFIED':\n    case 'OTHER':\n      return 'other';\n    case 'MALFORMED_FUNCTION_CALL':\n      return 'error';\n    default:\n      return 'unknown';\n  }\n}\n","import { createProviderDefinedToolFactoryWithOutputSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n/**\n * A tool that enables the model to generate and run Python code.\n *\n * @note Ensure the selected model supports Code Execution.\n * Multi-tool usage with the code execution tool is typically compatible with Gemini >=2 models.\n *\n * @see https://ai.google.dev/gemini-api/docs/code-execution (Google AI)\n * @see https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/code-execution-api (Vertex AI)\n */\nexport const codeExecution = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    language: string;\n    code: string;\n  },\n  {\n    outcome: string;\n    output: string;\n  },\n  {}\n>({\n  id: 'google.code_execution',\n  name: 'code_execution',\n  inputSchema: z.object({\n    language: z.string().describe('The programming language of the code.'),\n    code: z.string().describe('The code to be executed.'),\n  }),\n  outputSchema: z.object({\n    outcome: z\n      .string()\n      .describe('The outcome of the execution (e.g., \"OUTCOME_OK\").'),\n    output: z.string().describe('The output from the code execution.'),\n  }),\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// https://ai.google.dev/gemini-api/docs/google-search\n// https://ai.google.dev/api/generate-content#GroundingSupport\n// https://cloud.google.com/vertex-ai/generative-ai/docs/grounding/grounding-with-google-search\n\nexport const googleSearch = createProviderDefinedToolFactory<\n  {},\n  {\n    /**\n     * The mode of the predictor to be used in dynamic retrieval. The following modes are supported:\n     *  - MODE_DYNAMIC: Run retrieval only when system decides it is necessary\n     *  - MODE_UNSPECIFIED: Always trigger retrieval\n     * @default MODE_UNSPECIFIED\n     */\n    mode?: 'MODE_DYNAMIC' | 'MODE_UNSPECIFIED';\n\n    /**\n     * The threshold to be used in dynamic retrieval (if not set, a system default value is used).\n     */\n    dynamicThreshold?: number;\n  }\n>({\n  id: 'google.google_search',\n  name: 'google_search',\n  inputSchema: lazySchema(() =>\n    zodSchema(\n      z.object({\n        mode: z\n          .enum(['MODE_DYNAMIC', 'MODE_UNSPECIFIED'])\n          .default('MODE_UNSPECIFIED'),\n        dynamicThreshold: z.number().default(1),\n      }),\n    ),\n  ),\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const urlContext = createProviderDefinedToolFactory<\n  {\n    // Url context does not have any input schema, it will directly use the url from the prompt\n  },\n  {}\n>({\n  id: 'google.url_context',\n  name: 'url_context',\n  inputSchema: lazySchema(() => zodSchema(z.object({}))),\n});\n","import { codeExecution } from './tool/code-execution';\nimport { googleSearch } from './tool/google-search';\nimport { urlContext } from './tool/url-context';\n\nexport const googleTools = {\n  /**\n   * Creates a Google search tool that gives Google direct access to real-time web content.\n   * Must have name \"google_search\".\n   */\n  googleSearch,\n\n  /**\n   * Creates a URL context tool that gives Google direct access to real-time web content.\n   * Must have name \"url_context\".\n   */\n  urlContext,\n  /**\n   * A tool that enables the model to generate and run Python code.\n   * Must have name \"code_execution\".\n   *\n   * @note Ensure the selected model supports Code Execution.\n   * Multi-tool usage with the code execution tool is typically compatible with Gemini >=2 models.\n   *\n   * @see https://ai.google.dev/gemini-api/docs/code-execution (Google AI)\n   * @see https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/code-execution-api (Vertex AI)\n   */\n  codeExecution,\n};\n","import { ImageModelV2, ImageModelV2CallWarning } from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createJsonResponseHandler,\n  type InferValidator,\n  lazySchema,\n  parseProviderOptions,\n  postJsonToApi,\n  resolve,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { googleFailedResponseHandler } from './google-error';\nimport {\n  GoogleGenerativeAIImageModelId,\n  GoogleGenerativeAIImageSettings,\n} from './google-generative-ai-image-settings';\nimport { FetchFunction, Resolvable } from '@ai-sdk/provider-utils';\n\ninterface GoogleGenerativeAIImageModelConfig {\n  provider: string;\n  baseURL: string;\n  headers?: Resolvable<Record<string, string | undefined>>;\n  fetch?: FetchFunction;\n  generateId?: () => string;\n  _internal?: {\n    currentDate?: () => Date;\n  };\n}\n\nexport class GoogleGenerativeAIImageModel implements ImageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  get maxImagesPerCall(): number {\n    // https://ai.google.dev/gemini-api/docs/imagen#imagen-model\n    return this.settings.maxImagesPerCall ?? 4;\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  constructor(\n    readonly modelId: GoogleGenerativeAIImageModelId,\n    private readonly settings: GoogleGenerativeAIImageSettings,\n    private readonly config: GoogleGenerativeAIImageModelConfig,\n  ) {}\n\n  async doGenerate(\n    options: Parameters<ImageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<ImageModelV2['doGenerate']>>> {\n    const {\n      prompt,\n      n = 1,\n      size = '1024x1024',\n      aspectRatio = '1:1',\n      seed,\n      providerOptions,\n      headers,\n      abortSignal,\n    } = options;\n    const warnings: Array<ImageModelV2CallWarning> = [];\n\n    if (size != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'size',\n        details:\n          'This model does not support the `size` option. Use `aspectRatio` instead.',\n      });\n    }\n\n    if (seed != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'seed',\n        details:\n          'This model does not support the `seed` option through this provider.',\n      });\n    }\n\n    const googleOptions = await parseProviderOptions({\n      provider: 'google',\n      providerOptions,\n      schema: googleImageProviderOptionsSchema,\n    });\n\n    const currentDate = this.config._internal?.currentDate?.() ?? new Date();\n\n    const parameters: Record<string, unknown> = {\n      sampleCount: n,\n    };\n\n    if (aspectRatio != null) {\n      parameters.aspectRatio = aspectRatio;\n    }\n\n    if (googleOptions) {\n      Object.assign(parameters, googleOptions);\n    }\n\n    const body = {\n      instances: [{ prompt }],\n      parameters,\n    };\n\n    const { responseHeaders, value: response } = await postJsonToApi<{\n      predictions: Array<{ bytesBase64Encoded: string }>;\n    }>({\n      url: `${this.config.baseURL}/models/${this.modelId}:predict`,\n      headers: combineHeaders(await resolve(this.config.headers), headers),\n      body,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        googleImageResponseSchema,\n      ),\n      abortSignal,\n      fetch: this.config.fetch,\n    });\n    return {\n      images: response.predictions.map(\n        (p: { bytesBase64Encoded: string }) => p.bytesBase64Encoded,\n      ),\n      warnings: warnings ?? [],\n      providerMetadata: {\n        google: {\n          images: response.predictions.map(prediction => ({\n            // Add any prediction-specific metadata here\n          })),\n        },\n      },\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n      },\n    };\n  }\n}\n\n// minimal version of the schema\nconst googleImageResponseSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      predictions: z\n        .array(z.object({ bytesBase64Encoded: z.string() }))\n        .default([]),\n    }),\n  ),\n);\n\n// Note: For the initial GA launch of Imagen 3, safety filters are not configurable.\n// https://ai.google.dev/gemini-api/docs/imagen#imagen-model\nconst googleImageProviderOptionsSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      personGeneration: z\n        .enum(['dont_allow', 'allow_adult', 'allow_all'])\n        .nullish(),\n      aspectRatio: z.enum(['1:1', '3:4', '4:3', '9:16', '16:9']).nullish(),\n    }),\n  ),\n);\n\nexport type GoogleGenerativeAIImageProviderOptions = InferValidator<\n  typeof googleImageProviderOptionsSchema\n>;\n"],"names":["lazySchema","zodSchema","z","responseHeaders","response","rawValue","_a","googleTools","UnsupportedFunctionalityError","parseProviderOptions","combineHeaders","resolve","postJsonToApi","createJsonResponseHandler","generateId","createProviderDefinedToolFactory"],"mappings":"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"}},
    {"offset": {"line": 1547, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1552, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@ai-sdk/google/src/google-generative-ai-language-model.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/convert-json-schema-to-openapi-schema.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/convert-to-google-generative-ai-messages.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/get-model-path.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-error.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-generative-ai-options.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-prepare-tools.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/map-google-generative-ai-finish-reason.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/tool/code-execution.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/tool/google-search.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/tool/url-context.ts","/turbopack/[project]/node_modules/@ai-sdk/google/src/google-tools.ts"],"sourcesContent":["import {\n  LanguageModelV2,\n  LanguageModelV2CallWarning,\n  LanguageModelV2Content,\n  LanguageModelV2FinishReason,\n  LanguageModelV2Source,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  InferValidator,\n  ParseResult,\n  Resolvable,\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonResponseHandler,\n  generateId,\n  lazySchema,\n  parseProviderOptions,\n  postJsonToApi,\n  resolve,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { convertJSONSchemaToOpenAPISchema } from './convert-json-schema-to-openapi-schema';\nimport { convertToGoogleGenerativeAIMessages } from './convert-to-google-generative-ai-messages';\nimport { getModelPath } from './get-model-path';\nimport { googleFailedResponseHandler } from './google-error';\nimport { GoogleGenerativeAIContentPart } from './google-generative-ai-prompt';\nimport {\n  GoogleGenerativeAIModelId,\n  googleGenerativeAIProviderOptions,\n} from './google-generative-ai-options';\nimport { prepareTools } from './google-prepare-tools';\nimport { mapGoogleGenerativeAIFinishReason } from './map-google-generative-ai-finish-reason';\n\ntype GoogleGenerativeAIConfig = {\n  provider: string;\n  baseURL: string;\n  headers: Resolvable<Record<string, string | undefined>>;\n  fetch?: FetchFunction;\n  generateId: () => string;\n\n  /**\n   * The supported URLs for the model.\n   */\n  supportedUrls?: () => LanguageModelV2['supportedUrls'];\n};\n\nexport class GoogleGenerativeAILanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  readonly modelId: GoogleGenerativeAIModelId;\n\n  private readonly config: GoogleGenerativeAIConfig;\n  private readonly generateId: () => string;\n\n  constructor(\n    modelId: GoogleGenerativeAIModelId,\n    config: GoogleGenerativeAIConfig,\n  ) {\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = config.generateId ?? generateId;\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  get supportedUrls() {\n    return this.config.supportedUrls?.() ?? {};\n  }\n\n  private async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions,\n  }: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const warnings: LanguageModelV2CallWarning[] = [];\n\n    const googleOptions = await parseProviderOptions({\n      provider: 'google',\n      providerOptions,\n      schema: googleGenerativeAIProviderOptions,\n    });\n\n    // Add warning if includeThoughts is used with a non-Vertex Google provider\n    if (\n      googleOptions?.thinkingConfig?.includeThoughts === true &&\n      !this.config.provider.startsWith('google.vertex.')\n    ) {\n      warnings.push({\n        type: 'other',\n        message:\n          \"The 'includeThoughts' option is only supported with the Google Vertex provider \" +\n          'and might not be supported or could behave unexpectedly with the current Google provider ' +\n          `(${this.config.provider}).`,\n      });\n    }\n\n    const isGemmaModel = this.modelId.toLowerCase().startsWith('gemma-');\n\n    const { contents, systemInstruction } = convertToGoogleGenerativeAIMessages(\n      prompt,\n      { isGemmaModel },\n    );\n\n    const {\n      tools: googleTools,\n      toolConfig: googleToolConfig,\n      toolWarnings,\n    } = prepareTools({\n      tools,\n      toolChoice,\n      modelId: this.modelId,\n    });\n\n    return {\n      args: {\n        generationConfig: {\n          // standardized settings:\n          maxOutputTokens,\n          temperature,\n          topK,\n          topP,\n          frequencyPenalty,\n          presencePenalty,\n          stopSequences,\n          seed,\n\n          // response format:\n          responseMimeType:\n            responseFormat?.type === 'json' ? 'application/json' : undefined,\n          responseSchema:\n            responseFormat?.type === 'json' &&\n            responseFormat.schema != null &&\n            // Google GenAI does not support all OpenAPI Schema features,\n            // so this is needed as an escape hatch:\n            // TODO convert into provider option\n            (googleOptions?.structuredOutputs ?? true)\n              ? convertJSONSchemaToOpenAPISchema(responseFormat.schema)\n              : undefined,\n          ...(googleOptions?.audioTimestamp && {\n            audioTimestamp: googleOptions.audioTimestamp,\n          }),\n\n          // provider options:\n          responseModalities: googleOptions?.responseModalities,\n          thinkingConfig: googleOptions?.thinkingConfig,\n          ...(googleOptions?.imageConfig && {\n            imageConfig: googleOptions.imageConfig,\n          }),\n          ...(googleOptions?.mediaResolution && {\n            mediaResolution: googleOptions.mediaResolution,\n          }),\n        },\n        contents,\n        systemInstruction: isGemmaModel ? undefined : systemInstruction,\n        safetySettings: googleOptions?.safetySettings,\n        tools: googleTools,\n        toolConfig: googleToolConfig,\n        cachedContent: googleOptions?.cachedContent,\n        labels: googleOptions?.labels,\n      },\n      warnings: [...warnings, ...toolWarnings],\n    };\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args, warnings } = await this.getArgs(options);\n    const body = JSON.stringify(args);\n\n    const mergedHeaders = combineHeaders(\n      await resolve(this.config.headers),\n      options.headers,\n    );\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId,\n      )}:generateContent`,\n      headers: mergedHeaders,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(responseSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const candidate = response.candidates[0];\n    const content: Array<LanguageModelV2Content> = [];\n\n    // map ordered parts to content:\n    const parts = candidate.content?.parts ?? [];\n\n    const usageMetadata = response.usageMetadata;\n\n    // Associates a code execution result with its preceding call.\n    let lastCodeExecutionToolCallId: string | undefined;\n\n    // Build content array from all parts\n    for (const part of parts) {\n      if ('executableCode' in part && part.executableCode?.code) {\n        const toolCallId = this.config.generateId();\n        lastCodeExecutionToolCallId = toolCallId;\n\n        content.push({\n          type: 'tool-call',\n          toolCallId,\n          toolName: 'code_execution',\n          input: JSON.stringify(part.executableCode),\n          providerExecuted: true,\n        });\n      } else if ('codeExecutionResult' in part && part.codeExecutionResult) {\n        content.push({\n          type: 'tool-result',\n          // Assumes a result directly follows its corresponding call part.\n          toolCallId: lastCodeExecutionToolCallId!,\n          toolName: 'code_execution',\n          result: {\n            outcome: part.codeExecutionResult.outcome,\n            output: part.codeExecutionResult.output,\n          },\n          providerExecuted: true,\n        });\n        // Clear the ID after use to avoid accidental reuse.\n        lastCodeExecutionToolCallId = undefined;\n      } else if ('text' in part && part.text != null && part.text.length > 0) {\n        content.push({\n          type: part.thought === true ? 'reasoning' : 'text',\n          text: part.text,\n          providerMetadata: part.thoughtSignature\n            ? { google: { thoughtSignature: part.thoughtSignature } }\n            : undefined,\n        });\n      } else if ('functionCall' in part) {\n        content.push({\n          type: 'tool-call' as const,\n          toolCallId: this.config.generateId(),\n          toolName: part.functionCall.name,\n          input: JSON.stringify(part.functionCall.args),\n          providerMetadata: part.thoughtSignature\n            ? { google: { thoughtSignature: part.thoughtSignature } }\n            : undefined,\n        });\n      } else if ('inlineData' in part) {\n        content.push({\n          type: 'file' as const,\n          data: part.inlineData.data,\n          mediaType: part.inlineData.mimeType,\n        });\n      }\n    }\n\n    const sources =\n      extractSources({\n        groundingMetadata: candidate.groundingMetadata,\n        generateId: this.config.generateId,\n      }) ?? [];\n    for (const source of sources) {\n      content.push(source);\n    }\n\n    return {\n      content,\n      finishReason: mapGoogleGenerativeAIFinishReason({\n        finishReason: candidate.finishReason,\n        hasToolCalls: content.some(part => part.type === 'tool-call'),\n      }),\n      usage: {\n        inputTokens: usageMetadata?.promptTokenCount ?? undefined,\n        outputTokens: usageMetadata?.candidatesTokenCount ?? undefined,\n        totalTokens: usageMetadata?.totalTokenCount ?? undefined,\n        reasoningTokens: usageMetadata?.thoughtsTokenCount ?? undefined,\n        cachedInputTokens: usageMetadata?.cachedContentTokenCount ?? undefined,\n      },\n      warnings,\n      providerMetadata: {\n        google: {\n          promptFeedback: response.promptFeedback ?? null,\n          groundingMetadata: candidate.groundingMetadata ?? null,\n          urlContextMetadata: candidate.urlContextMetadata ?? null,\n          safetyRatings: candidate.safetyRatings ?? null,\n          usageMetadata: usageMetadata ?? null,\n        },\n      },\n      request: { body },\n      response: {\n        // TODO timestamp, model id, id\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings } = await this.getArgs(options);\n\n    const body = JSON.stringify(args);\n    const headers = combineHeaders(\n      await resolve(this.config.headers),\n      options.headers,\n    );\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId,\n      )}:streamGenerateContent?alt=sse`,\n      headers,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(chunkSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    let finishReason: LanguageModelV2FinishReason = 'unknown';\n    const usage: LanguageModelV2Usage = {\n      inputTokens: undefined,\n      outputTokens: undefined,\n      totalTokens: undefined,\n    };\n    let providerMetadata: SharedV2ProviderMetadata | undefined = undefined;\n\n    const generateId = this.config.generateId;\n    let hasToolCalls = false;\n\n    // Track active blocks to group consecutive parts of same type\n    let currentTextBlockId: string | null = null;\n    let currentReasoningBlockId: string | null = null;\n    let blockCounter = 0;\n\n    // Track emitted sources to prevent duplicates\n    const emittedSourceUrls = new Set<string>();\n    // Associates a code execution result with its preceding call.\n    let lastCodeExecutionToolCallId: string | undefined;\n\n    return {\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<ChunkSchema>,\n          LanguageModelV2StreamPart\n        >({\n          start(controller) {\n            controller.enqueue({ type: 'stream-start', warnings });\n          },\n\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: 'raw', rawValue: chunk.rawValue });\n            }\n\n            if (!chunk.success) {\n              controller.enqueue({ type: 'error', error: chunk.error });\n              return;\n            }\n\n            const value = chunk.value;\n\n            const usageMetadata = value.usageMetadata;\n\n            if (usageMetadata != null) {\n              usage.inputTokens = usageMetadata.promptTokenCount ?? undefined;\n              usage.outputTokens =\n                usageMetadata.candidatesTokenCount ?? undefined;\n              usage.totalTokens = usageMetadata.totalTokenCount ?? undefined;\n              usage.reasoningTokens =\n                usageMetadata.thoughtsTokenCount ?? undefined;\n              usage.cachedInputTokens =\n                usageMetadata.cachedContentTokenCount ?? undefined;\n            }\n\n            const candidate = value.candidates?.[0];\n\n            // sometimes the API returns an empty candidates array\n            if (candidate == null) {\n              return;\n            }\n\n            const content = candidate.content;\n\n            const sources = extractSources({\n              groundingMetadata: candidate.groundingMetadata,\n              generateId,\n            });\n            if (sources != null) {\n              for (const source of sources) {\n                if (\n                  source.sourceType === 'url' &&\n                  !emittedSourceUrls.has(source.url)\n                ) {\n                  emittedSourceUrls.add(source.url);\n                  controller.enqueue(source);\n                }\n              }\n            }\n\n            // Process tool call's parts before determining finishReason to ensure hasToolCalls is properly set\n            if (content != null) {\n              // Process text parts individually to handle reasoning parts\n              const parts = content.parts ?? [];\n              for (const part of parts) {\n                if ('executableCode' in part && part.executableCode?.code) {\n                  const toolCallId = generateId();\n                  lastCodeExecutionToolCallId = toolCallId;\n\n                  controller.enqueue({\n                    type: 'tool-call',\n                    toolCallId,\n                    toolName: 'code_execution',\n                    input: JSON.stringify(part.executableCode),\n                    providerExecuted: true,\n                  });\n\n                  hasToolCalls = true;\n                } else if (\n                  'codeExecutionResult' in part &&\n                  part.codeExecutionResult\n                ) {\n                  // Assumes a result directly follows its corresponding call part.\n                  const toolCallId = lastCodeExecutionToolCallId;\n\n                  if (toolCallId) {\n                    controller.enqueue({\n                      type: 'tool-result',\n                      toolCallId,\n                      toolName: 'code_execution',\n                      result: {\n                        outcome: part.codeExecutionResult.outcome,\n                        output: part.codeExecutionResult.output,\n                      },\n                      providerExecuted: true,\n                    });\n                    // Clear the ID after use.\n                    lastCodeExecutionToolCallId = undefined;\n                  }\n                } else if (\n                  'text' in part &&\n                  part.text != null &&\n                  part.text.length > 0\n                ) {\n                  if (part.thought === true) {\n                    // End any active text block before starting reasoning\n                    if (currentTextBlockId !== null) {\n                      controller.enqueue({\n                        type: 'text-end',\n                        id: currentTextBlockId,\n                      });\n                      currentTextBlockId = null;\n                    }\n\n                    // Start new reasoning block if not already active\n                    if (currentReasoningBlockId === null) {\n                      currentReasoningBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: 'reasoning-start',\n                        id: currentReasoningBlockId,\n                        providerMetadata: part.thoughtSignature\n                          ? {\n                              google: {\n                                thoughtSignature: part.thoughtSignature,\n                              },\n                            }\n                          : undefined,\n                      });\n                    }\n\n                    controller.enqueue({\n                      type: 'reasoning-delta',\n                      id: currentReasoningBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature\n                        ? {\n                            google: { thoughtSignature: part.thoughtSignature },\n                          }\n                        : undefined,\n                    });\n                  } else {\n                    // End any active reasoning block before starting text\n                    if (currentReasoningBlockId !== null) {\n                      controller.enqueue({\n                        type: 'reasoning-end',\n                        id: currentReasoningBlockId,\n                      });\n                      currentReasoningBlockId = null;\n                    }\n\n                    // Start new text block if not already active\n                    if (currentTextBlockId === null) {\n                      currentTextBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: 'text-start',\n                        id: currentTextBlockId,\n                        providerMetadata: part.thoughtSignature\n                          ? {\n                              google: {\n                                thoughtSignature: part.thoughtSignature,\n                              },\n                            }\n                          : undefined,\n                      });\n                    }\n\n                    controller.enqueue({\n                      type: 'text-delta',\n                      id: currentTextBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature\n                        ? {\n                            google: { thoughtSignature: part.thoughtSignature },\n                          }\n                        : undefined,\n                    });\n                  }\n                }\n              }\n\n              const inlineDataParts = getInlineDataParts(content.parts);\n              if (inlineDataParts != null) {\n                for (const part of inlineDataParts) {\n                  controller.enqueue({\n                    type: 'file',\n                    mediaType: part.inlineData.mimeType,\n                    data: part.inlineData.data,\n                  });\n                }\n              }\n\n              const toolCallDeltas = getToolCallsFromParts({\n                parts: content.parts,\n                generateId,\n              });\n\n              if (toolCallDeltas != null) {\n                for (const toolCall of toolCallDeltas) {\n                  controller.enqueue({\n                    type: 'tool-input-start',\n                    id: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  controller.enqueue({\n                    type: 'tool-input-delta',\n                    id: toolCall.toolCallId,\n                    delta: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  controller.enqueue({\n                    type: 'tool-input-end',\n                    id: toolCall.toolCallId,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  controller.enqueue({\n                    type: 'tool-call',\n                    toolCallId: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    input: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  hasToolCalls = true;\n                }\n              }\n            }\n\n            if (candidate.finishReason != null) {\n              finishReason = mapGoogleGenerativeAIFinishReason({\n                finishReason: candidate.finishReason,\n                hasToolCalls,\n              });\n\n              providerMetadata = {\n                google: {\n                  promptFeedback: value.promptFeedback ?? null,\n                  groundingMetadata: candidate.groundingMetadata ?? null,\n                  urlContextMetadata: candidate.urlContextMetadata ?? null,\n                  safetyRatings: candidate.safetyRatings ?? null,\n                },\n              };\n              if (usageMetadata != null) {\n                providerMetadata.google.usageMetadata = usageMetadata;\n              }\n            }\n          },\n\n          flush(controller) {\n            // Close any open blocks before finishing\n            if (currentTextBlockId !== null) {\n              controller.enqueue({\n                type: 'text-end',\n                id: currentTextBlockId,\n              });\n            }\n            if (currentReasoningBlockId !== null) {\n              controller.enqueue({\n                type: 'reasoning-end',\n                id: currentReasoningBlockId,\n              });\n            }\n\n            controller.enqueue({\n              type: 'finish',\n              finishReason,\n              usage,\n              providerMetadata,\n            });\n          },\n        }),\n      ),\n      response: { headers: responseHeaders },\n      request: { body },\n    };\n  }\n}\n\nfunction getToolCallsFromParts({\n  parts,\n  generateId,\n}: {\n  parts: ContentSchema['parts'];\n  generateId: () => string;\n}) {\n  const functionCallParts = parts?.filter(\n    part => 'functionCall' in part,\n  ) as Array<\n    GoogleGenerativeAIContentPart & {\n      functionCall: { name: string; args: unknown };\n      thoughtSignature?: string | null;\n    }\n  >;\n\n  return functionCallParts == null || functionCallParts.length === 0\n    ? undefined\n    : functionCallParts.map(part => ({\n        type: 'tool-call' as const,\n        toolCallId: generateId(),\n        toolName: part.functionCall.name,\n        args: JSON.stringify(part.functionCall.args),\n        providerMetadata: part.thoughtSignature\n          ? { google: { thoughtSignature: part.thoughtSignature } }\n          : undefined,\n      }));\n}\n\nfunction getInlineDataParts(parts: ContentSchema['parts']) {\n  return parts?.filter(\n    (\n      part,\n    ): part is {\n      inlineData: { mimeType: string; data: string };\n    } => 'inlineData' in part,\n  );\n}\n\nfunction extractSources({\n  groundingMetadata,\n  generateId,\n}: {\n  groundingMetadata: GroundingMetadataSchema | undefined | null;\n  generateId: () => string;\n}): undefined | LanguageModelV2Source[] {\n  return groundingMetadata?.groundingChunks\n    ?.filter(\n      (\n        chunk,\n      ): chunk is GroundingChunkSchema & {\n        web: { uri: string; title?: string };\n      } => chunk.web != null,\n    )\n    .map(chunk => ({\n      type: 'source',\n      sourceType: 'url',\n      id: generateId(),\n      url: chunk.web.uri,\n      title: chunk.web.title,\n    }));\n}\n\nexport const getGroundingMetadataSchema = () =>\n  z.object({\n    webSearchQueries: z.array(z.string()).nullish(),\n    retrievalQueries: z.array(z.string()).nullish(),\n    searchEntryPoint: z.object({ renderedContent: z.string() }).nullish(),\n    groundingChunks: z\n      .array(\n        z.object({\n          web: z.object({ uri: z.string(), title: z.string() }).nullish(),\n          retrievedContext: z\n            .object({ uri: z.string(), title: z.string() })\n            .nullish(),\n        }),\n      )\n      .nullish(),\n    groundingSupports: z\n      .array(\n        z.object({\n          segment: z.object({\n            startIndex: z.number().nullish(),\n            endIndex: z.number().nullish(),\n            text: z.string().nullish(),\n          }),\n          segment_text: z.string().nullish(),\n          groundingChunkIndices: z.array(z.number()).nullish(),\n          supportChunkIndices: z.array(z.number()).nullish(),\n          confidenceScores: z.array(z.number()).nullish(),\n          confidenceScore: z.array(z.number()).nullish(),\n        }),\n      )\n      .nullish(),\n    retrievalMetadata: z\n      .union([\n        z.object({\n          webDynamicRetrievalScore: z.number(),\n        }),\n        z.object({}),\n      ])\n      .nullish(),\n  });\n\nconst getContentSchema = () =>\n  z.object({\n    parts: z\n      .array(\n        z.union([\n          // note: order matters since text can be fully empty\n          z.object({\n            functionCall: z.object({\n              name: z.string(),\n              args: z.unknown(),\n            }),\n            thoughtSignature: z.string().nullish(),\n          }),\n          z.object({\n            inlineData: z.object({\n              mimeType: z.string(),\n              data: z.string(),\n            }),\n          }),\n          z.object({\n            executableCode: z\n              .object({\n                language: z.string(),\n                code: z.string(),\n              })\n              .nullish(),\n            codeExecutionResult: z\n              .object({\n                outcome: z.string(),\n                output: z.string(),\n              })\n              .nullish(),\n            text: z.string().nullish(),\n            thought: z.boolean().nullish(),\n            thoughtSignature: z.string().nullish(),\n          }),\n        ]),\n      )\n      .nullish(),\n  });\n\n// https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/configure-safety-filters\nconst getSafetyRatingSchema = () =>\n  z.object({\n    category: z.string().nullish(),\n    probability: z.string().nullish(),\n    probabilityScore: z.number().nullish(),\n    severity: z.string().nullish(),\n    severityScore: z.number().nullish(),\n    blocked: z.boolean().nullish(),\n  });\n\nconst usageSchema = z.object({\n  cachedContentTokenCount: z.number().nullish(),\n  thoughtsTokenCount: z.number().nullish(),\n  promptTokenCount: z.number().nullish(),\n  candidatesTokenCount: z.number().nullish(),\n  totalTokenCount: z.number().nullish(),\n});\n\n// https://ai.google.dev/api/generate-content#UrlRetrievalMetadata\nexport const getUrlContextMetadataSchema = () =>\n  z.object({\n    urlMetadata: z.array(\n      z.object({\n        retrievedUrl: z.string(),\n        urlRetrievalStatus: z.string(),\n      }),\n    ),\n  });\n\nconst responseSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      candidates: z.array(\n        z.object({\n          content: getContentSchema().nullish().or(z.object({}).strict()),\n          finishReason: z.string().nullish(),\n          safetyRatings: z.array(getSafetyRatingSchema()).nullish(),\n          groundingMetadata: getGroundingMetadataSchema().nullish(),\n          urlContextMetadata: getUrlContextMetadataSchema().nullish(),\n        }),\n      ),\n      usageMetadata: usageSchema.nullish(),\n      promptFeedback: z\n        .object({\n          blockReason: z.string().nullish(),\n          safetyRatings: z.array(getSafetyRatingSchema()).nullish(),\n        })\n        .nullish(),\n    }),\n  ),\n);\n\ntype ContentSchema = NonNullable<\n  InferValidator<typeof responseSchema>['candidates'][number]['content']\n>;\nexport type GroundingMetadataSchema = NonNullable<\n  InferValidator<\n    typeof responseSchema\n  >['candidates'][number]['groundingMetadata']\n>;\n\ntype GroundingChunkSchema = NonNullable<\n  GroundingMetadataSchema['groundingChunks']\n>[number];\n\nexport type UrlContextMetadataSchema = NonNullable<\n  InferValidator<\n    typeof responseSchema\n  >['candidates'][number]['urlContextMetadata']\n>;\n\nexport type SafetyRatingSchema = NonNullable<\n  InferValidator<typeof responseSchema>['candidates'][number]['safetyRatings']\n>[number];\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst chunkSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      candidates: z\n        .array(\n          z.object({\n            content: getContentSchema().nullish(),\n            finishReason: z.string().nullish(),\n            safetyRatings: z.array(getSafetyRatingSchema()).nullish(),\n            groundingMetadata: getGroundingMetadataSchema().nullish(),\n            urlContextMetadata: getUrlContextMetadataSchema().nullish(),\n          }),\n        )\n        .nullish(),\n      usageMetadata: usageSchema.nullish(),\n      promptFeedback: z\n        .object({\n          blockReason: z.string().nullish(),\n          safetyRatings: z.array(getSafetyRatingSchema()).nullish(),\n        })\n        .nullish(),\n    }),\n  ),\n);\n\ntype ChunkSchema = InferValidator<typeof chunkSchema>;\n","import { JSONSchema7Definition } from '@ai-sdk/provider';\n\n/**\n * Converts JSON Schema 7 to OpenAPI Schema 3.0\n */\nexport function convertJSONSchemaToOpenAPISchema(\n  jsonSchema: JSONSchema7Definition | undefined,\n): unknown {\n  // parameters need to be undefined if they are empty objects:\n  if (jsonSchema == null || isEmptyObjectSchema(jsonSchema)) {\n    return undefined;\n  }\n\n  if (typeof jsonSchema === 'boolean') {\n    return { type: 'boolean', properties: {} };\n  }\n\n  const {\n    type,\n    description,\n    required,\n    properties,\n    items,\n    allOf,\n    anyOf,\n    oneOf,\n    format,\n    const: constValue,\n    minLength,\n    enum: enumValues,\n  } = jsonSchema;\n\n  const result: Record<string, unknown> = {};\n\n  if (description) result.description = description;\n  if (required) result.required = required;\n  if (format) result.format = format;\n\n  if (constValue !== undefined) {\n    result.enum = [constValue];\n  }\n\n  // Handle type\n  if (type) {\n    if (Array.isArray(type)) {\n      if (type.includes('null')) {\n        result.type = type.filter(t => t !== 'null')[0];\n        result.nullable = true;\n      } else {\n        result.type = type;\n      }\n    } else if (type === 'null') {\n      result.type = 'null';\n    } else {\n      result.type = type;\n    }\n  }\n\n  // Handle enum\n  if (enumValues !== undefined) {\n    result.enum = enumValues;\n  }\n\n  if (properties != null) {\n    result.properties = Object.entries(properties).reduce(\n      (acc, [key, value]) => {\n        acc[key] = convertJSONSchemaToOpenAPISchema(value);\n        return acc;\n      },\n      {} as Record<string, unknown>,\n    );\n  }\n\n  if (items) {\n    result.items = Array.isArray(items)\n      ? items.map(convertJSONSchemaToOpenAPISchema)\n      : convertJSONSchemaToOpenAPISchema(items);\n  }\n\n  if (allOf) {\n    result.allOf = allOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n  if (anyOf) {\n    // Handle cases where anyOf includes a null type\n    if (\n      anyOf.some(\n        schema => typeof schema === 'object' && schema?.type === 'null',\n      )\n    ) {\n      const nonNullSchemas = anyOf.filter(\n        schema => !(typeof schema === 'object' && schema?.type === 'null'),\n      );\n\n      if (nonNullSchemas.length === 1) {\n        // If there's only one non-null schema, convert it and make it nullable\n        const converted = convertJSONSchemaToOpenAPISchema(nonNullSchemas[0]);\n        if (typeof converted === 'object') {\n          result.nullable = true;\n          Object.assign(result, converted);\n        }\n      } else {\n        // If there are multiple non-null schemas, keep them in anyOf\n        result.anyOf = nonNullSchemas.map(convertJSONSchemaToOpenAPISchema);\n        result.nullable = true;\n      }\n    } else {\n      result.anyOf = anyOf.map(convertJSONSchemaToOpenAPISchema);\n    }\n  }\n  if (oneOf) {\n    result.oneOf = oneOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n\n  if (minLength !== undefined) {\n    result.minLength = minLength;\n  }\n\n  return result;\n}\n\nfunction isEmptyObjectSchema(jsonSchema: JSONSchema7Definition): boolean {\n  return (\n    jsonSchema != null &&\n    typeof jsonSchema === 'object' &&\n    jsonSchema.type === 'object' &&\n    (jsonSchema.properties == null ||\n      Object.keys(jsonSchema.properties).length === 0) &&\n    !jsonSchema.additionalProperties\n  );\n}\n","import {\n  LanguageModelV2Prompt,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  GoogleGenerativeAIContent,\n  GoogleGenerativeAIContentPart,\n  GoogleGenerativeAIPrompt,\n} from './google-generative-ai-prompt';\nimport { convertToBase64 } from '@ai-sdk/provider-utils';\n\nexport function convertToGoogleGenerativeAIMessages(\n  prompt: LanguageModelV2Prompt,\n  options?: { isGemmaModel?: boolean },\n): GoogleGenerativeAIPrompt {\n  const systemInstructionParts: Array<{ text: string }> = [];\n  const contents: Array<GoogleGenerativeAIContent> = [];\n  let systemMessagesAllowed = true;\n  const isGemmaModel = options?.isGemmaModel ?? false;\n\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case 'system': {\n        if (!systemMessagesAllowed) {\n          throw new UnsupportedFunctionalityError({\n            functionality:\n              'system messages are only supported at the beginning of the conversation',\n          });\n        }\n\n        systemInstructionParts.push({ text: content });\n        break;\n      }\n\n      case 'user': {\n        systemMessagesAllowed = false;\n\n        const parts: GoogleGenerativeAIContentPart[] = [];\n\n        for (const part of content) {\n          switch (part.type) {\n            case 'text': {\n              parts.push({ text: part.text });\n              break;\n            }\n\n            case 'file': {\n              // default to image/jpeg for unknown image/* types\n              const mediaType =\n                part.mediaType === 'image/*' ? 'image/jpeg' : part.mediaType;\n\n              parts.push(\n                part.data instanceof URL\n                  ? {\n                      fileData: {\n                        mimeType: mediaType,\n                        fileUri: part.data.toString(),\n                      },\n                    }\n                  : {\n                      inlineData: {\n                        mimeType: mediaType,\n                        data: convertToBase64(part.data),\n                      },\n                    },\n              );\n\n              break;\n            }\n          }\n        }\n\n        contents.push({ role: 'user', parts });\n        break;\n      }\n\n      case 'assistant': {\n        systemMessagesAllowed = false;\n\n        contents.push({\n          role: 'model',\n          parts: content\n            .map(part => {\n              switch (part.type) {\n                case 'text': {\n                  return part.text.length === 0\n                    ? undefined\n                    : {\n                        text: part.text,\n                        thoughtSignature:\n                          part.providerOptions?.google?.thoughtSignature,\n                      };\n                }\n\n                case 'reasoning': {\n                  return part.text.length === 0\n                    ? undefined\n                    : {\n                        text: part.text,\n                        thought: true,\n                        thoughtSignature:\n                          part.providerOptions?.google?.thoughtSignature,\n                      };\n                }\n\n                case 'file': {\n                  if (part.mediaType !== 'image/png') {\n                    throw new UnsupportedFunctionalityError({\n                      functionality:\n                        'Only PNG images are supported in assistant messages',\n                    });\n                  }\n\n                  if (part.data instanceof URL) {\n                    throw new UnsupportedFunctionalityError({\n                      functionality:\n                        'File data URLs in assistant messages are not supported',\n                    });\n                  }\n\n                  return {\n                    inlineData: {\n                      mimeType: part.mediaType,\n                      data: convertToBase64(part.data),\n                    },\n                  };\n                }\n\n                case 'tool-call': {\n                  return {\n                    functionCall: {\n                      name: part.toolName,\n                      args: part.input,\n                    },\n                    thoughtSignature:\n                      part.providerOptions?.google?.thoughtSignature,\n                  };\n                }\n              }\n            })\n            .filter(part => part !== undefined),\n        });\n        break;\n      }\n\n      case 'tool': {\n        systemMessagesAllowed = false;\n\n        const parts: GoogleGenerativeAIContentPart[] = [];\n\n        for (const part of content) {\n          const output = part.output;\n\n          if (output.type === 'content') {\n            for (const contentPart of output.value) {\n              switch (contentPart.type) {\n                case 'text':\n                  parts.push({\n                    functionResponse: {\n                      name: part.toolName,\n                      response: {\n                        name: part.toolName,\n                        content: contentPart.text,\n                      },\n                    },\n                  });\n                  break;\n                case 'media':\n                  parts.push(\n                    {\n                      inlineData: {\n                        mimeType: contentPart.mediaType,\n                        data: contentPart.data,\n                      },\n                    },\n                    {\n                      text: 'Tool executed successfully and returned this image as a response',\n                    },\n                  );\n                  break;\n                default:\n                  parts.push({ text: JSON.stringify(contentPart) });\n                  break;\n              }\n            }\n          } else {\n            parts.push({\n              functionResponse: {\n                name: part.toolName,\n                response: {\n                  name: part.toolName,\n                  content: output.value,\n                },\n              },\n            });\n          }\n        }\n\n        contents.push({\n          role: 'user',\n          parts,\n        });\n        break;\n      }\n    }\n  }\n\n  if (\n    isGemmaModel &&\n    systemInstructionParts.length > 0 &&\n    contents.length > 0 &&\n    contents[0].role === 'user'\n  ) {\n    const systemText = systemInstructionParts\n      .map(part => part.text)\n      .join('\\n\\n');\n\n    contents[0].parts.unshift({ text: systemText + '\\n\\n' });\n  }\n\n  return {\n    systemInstruction:\n      systemInstructionParts.length > 0 && !isGemmaModel\n        ? { parts: systemInstructionParts }\n        : undefined,\n    contents,\n  };\n}\n","export function getModelPath(modelId: string): string {\n  return modelId.includes('/') ? modelId : `models/${modelId}`;\n}\n","import {\n  createJsonErrorResponseHandler,\n  type InferValidator,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst googleErrorDataSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      error: z.object({\n        code: z.number().nullable(),\n        message: z.string(),\n        status: z.string(),\n      }),\n    }),\n  ),\n);\n\nexport type GoogleErrorData = InferValidator<typeof googleErrorDataSchema>;\n\nexport const googleFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: googleErrorDataSchema,\n  errorToMessage: data => data.error.message,\n});\n","import {\n  type InferValidator,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport type GoogleGenerativeAIModelId =\n  // Stable models\n  // https://ai.google.dev/gemini-api/docs/models/gemini\n  | 'gemini-1.5-flash'\n  | 'gemini-1.5-flash-latest'\n  | 'gemini-1.5-flash-001'\n  | 'gemini-1.5-flash-002'\n  | 'gemini-1.5-flash-8b'\n  | 'gemini-1.5-flash-8b-latest'\n  | 'gemini-1.5-flash-8b-001'\n  | 'gemini-1.5-pro'\n  | 'gemini-1.5-pro-latest'\n  | 'gemini-1.5-pro-001'\n  | 'gemini-1.5-pro-002'\n  | 'gemini-2.0-flash'\n  | 'gemini-2.0-flash-001'\n  | 'gemini-2.0-flash-live-001'\n  | 'gemini-2.0-flash-lite'\n  | 'gemini-2.0-pro-exp-02-05'\n  | 'gemini-2.0-flash-thinking-exp-01-21'\n  | 'gemini-2.0-flash-exp'\n  | 'gemini-2.5-pro'\n  | 'gemini-2.5-flash'\n  | 'gemini-2.5-flash-image-preview'\n  | 'gemini-2.5-flash-lite'\n  | 'gemini-2.5-flash-lite-preview-09-2025'\n  | 'gemini-2.5-flash-preview-04-17'\n  | 'gemini-2.5-flash-preview-09-2025'\n  // Experimental models\n  // https://ai.google.dev/gemini-api/docs/models/experimental-models\n  | 'gemini-2.5-pro-exp-03-25'\n  | 'gemini-exp-1206'\n  | 'gemma-3-12b-it'\n  | 'gemma-3-27b-it'\n  | (string & {});\n\nexport const googleGenerativeAIProviderOptions = lazySchema(() =>\n  zodSchema(\n    z.object({\n      responseModalities: z.array(z.enum(['TEXT', 'IMAGE'])).optional(),\n\n      thinkingConfig: z\n        .object({\n          thinkingBudget: z.number().optional(),\n          includeThoughts: z.boolean().optional(),\n        })\n        .optional(),\n\n      /**\n       * Optional.\n       * The name of the cached content used as context to serve the prediction.\n       * Format: cachedContents/{cachedContent}\n       */\n      cachedContent: z.string().optional(),\n\n      /**\n       * Optional. Enable structured output. Default is true.\n       *\n       * This is useful when the JSON Schema contains elements that are\n       * not supported by the OpenAPI schema version that\n       * Google Generative AI uses. You can use this to disable\n       * structured outputs if you need to.\n       */\n      structuredOutputs: z.boolean().optional(),\n\n      /**\n       * Optional. A list of unique safety settings for blocking unsafe content.\n       */\n      safetySettings: z\n        .array(\n          z.object({\n            category: z.enum([\n              'HARM_CATEGORY_UNSPECIFIED',\n              'HARM_CATEGORY_HATE_SPEECH',\n              'HARM_CATEGORY_DANGEROUS_CONTENT',\n              'HARM_CATEGORY_HARASSMENT',\n              'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n              'HARM_CATEGORY_CIVIC_INTEGRITY',\n            ]),\n            threshold: z.enum([\n              'HARM_BLOCK_THRESHOLD_UNSPECIFIED',\n              'BLOCK_LOW_AND_ABOVE',\n              'BLOCK_MEDIUM_AND_ABOVE',\n              'BLOCK_ONLY_HIGH',\n              'BLOCK_NONE',\n              'OFF',\n            ]),\n          }),\n        )\n        .optional(),\n\n      threshold: z\n        .enum([\n          'HARM_BLOCK_THRESHOLD_UNSPECIFIED',\n          'BLOCK_LOW_AND_ABOVE',\n          'BLOCK_MEDIUM_AND_ABOVE',\n          'BLOCK_ONLY_HIGH',\n          'BLOCK_NONE',\n          'OFF',\n        ])\n        .optional(),\n\n      /**\n       * Optional. Enables timestamp understanding for audio-only files.\n       *\n       * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/audio-understanding\n       */\n      audioTimestamp: z.boolean().optional(),\n\n      /**\n       * Optional. Defines labels used in billing reports. Available on Vertex AI only.\n       *\n       * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/add-labels-to-api-calls\n       */\n      labels: z.record(z.string(), z.string()).optional(),\n\n      /**\n       * Optional. If specified, the media resolution specified will be used.\n       *\n       * https://ai.google.dev/api/generate-content#MediaResolution\n       */\n      mediaResolution: z\n        .enum([\n          'MEDIA_RESOLUTION_UNSPECIFIED',\n          'MEDIA_RESOLUTION_LOW',\n          'MEDIA_RESOLUTION_MEDIUM',\n          'MEDIA_RESOLUTION_HIGH',\n        ])\n        .optional(),\n\n      /**\n       * Optional. Configures the image generation aspect ratio for Gemini models.\n       *\n       * https://ai.google.dev/gemini-api/docs/image-generation#aspect_ratios\n       */\n      imageConfig: z\n        .object({\n          aspectRatio: z\n            .enum([\n              '1:1',\n              '2:3',\n              '3:2',\n              '3:4',\n              '4:3',\n              '4:5',\n              '5:4',\n              '9:16',\n              '16:9',\n              '21:9',\n            ])\n            .optional(),\n        })\n        .optional(),\n    }),\n  ),\n);\n\nexport type GoogleGenerativeAIProviderOptions = InferValidator<\n  typeof googleGenerativeAIProviderOptions\n>;\n","import {\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { convertJSONSchemaToOpenAPISchema } from './convert-json-schema-to-openapi-schema';\nimport { GoogleGenerativeAIModelId } from './google-generative-ai-options';\n\nexport function prepareTools({\n  tools,\n  toolChoice,\n  modelId,\n}: {\n  tools: LanguageModelV2CallOptions['tools'];\n  toolChoice?: LanguageModelV2CallOptions['toolChoice'];\n  modelId: GoogleGenerativeAIModelId;\n}): {\n  tools:\n    | {\n        functionDeclarations: Array<{\n          name: string;\n          description: string;\n          parameters: unknown;\n        }>;\n      }\n    | Record<string, any>\n    | undefined;\n  toolConfig:\n    | undefined\n    | {\n        functionCallingConfig: {\n          mode: 'AUTO' | 'NONE' | 'ANY';\n          allowedFunctionNames?: string[];\n        };\n      };\n  toolWarnings: LanguageModelV2CallWarning[];\n} {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  tools = tools?.length ? tools : undefined;\n\n  const toolWarnings: LanguageModelV2CallWarning[] = [];\n\n  const isGemini2 = modelId.includes('gemini-2');\n  const supportsDynamicRetrieval =\n    modelId.includes('gemini-1.5-flash') && !modelId.includes('-8b');\n\n  if (tools == null) {\n    return { tools: undefined, toolConfig: undefined, toolWarnings };\n  }\n\n  // Check for mixed tool types and add warnings\n  const hasFunctionTools = tools.some(tool => tool.type === 'function');\n  const hasProviderDefinedTools = tools.some(\n    tool => tool.type === 'provider-defined',\n  );\n\n  if (hasFunctionTools && hasProviderDefinedTools) {\n    toolWarnings.push({\n      type: 'unsupported-tool',\n      tool: tools.find(tool => tool.type === 'function')!,\n      details:\n        'Cannot mix function tools with provider-defined tools in the same request. Please use either function tools or provider-defined tools, but not both.',\n    });\n  }\n\n  if (hasProviderDefinedTools) {\n    const googleTools: any[] = [];\n\n    const providerDefinedTools = tools.filter(\n      tool => tool.type === 'provider-defined',\n    );\n    providerDefinedTools.forEach(tool => {\n      switch (tool.id) {\n        case 'google.google_search':\n          if (isGemini2) {\n            googleTools.push({ googleSearch: {} });\n          } else if (supportsDynamicRetrieval) {\n            // For non-Gemini-2 models that don't support dynamic retrieval, use basic googleSearchRetrieval\n            googleTools.push({\n              googleSearchRetrieval: {\n                dynamicRetrievalConfig: {\n                  mode: tool.args.mode as\n                    | 'MODE_DYNAMIC'\n                    | 'MODE_UNSPECIFIED'\n                    | undefined,\n                  dynamicThreshold: tool.args.dynamicThreshold as\n                    | number\n                    | undefined,\n                },\n              },\n            });\n          } else {\n            googleTools.push({ googleSearchRetrieval: {} });\n          }\n          break;\n        case 'google.url_context':\n          if (isGemini2) {\n            googleTools.push({ urlContext: {} });\n          } else {\n            toolWarnings.push({\n              type: 'unsupported-tool',\n              tool,\n              details:\n                'The URL context tool is not supported with other Gemini models than Gemini 2.',\n            });\n          }\n          break;\n        case 'google.code_execution':\n          if (isGemini2) {\n            googleTools.push({ codeExecution: {} });\n          } else {\n            toolWarnings.push({\n              type: 'unsupported-tool',\n              tool,\n              details:\n                'The code execution tools is not supported with other Gemini models than Gemini 2.',\n            });\n          }\n          break;\n        default:\n          toolWarnings.push({ type: 'unsupported-tool', tool });\n          break;\n      }\n    });\n\n    return {\n      tools: googleTools.length > 0 ? googleTools : undefined,\n      toolConfig: undefined,\n      toolWarnings,\n    };\n  }\n\n  const functionDeclarations = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case 'function':\n        functionDeclarations.push({\n          name: tool.name,\n          description: tool.description ?? '',\n          parameters: convertJSONSchemaToOpenAPISchema(tool.inputSchema),\n        });\n        break;\n      default:\n        toolWarnings.push({ type: 'unsupported-tool', tool });\n        break;\n    }\n  }\n\n  if (toolChoice == null) {\n    return {\n      tools: { functionDeclarations },\n      toolConfig: undefined,\n      toolWarnings,\n    };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: 'AUTO' } },\n        toolWarnings,\n      };\n    case 'none':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: 'NONE' } },\n        toolWarnings,\n      };\n    case 'required':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: 'ANY' } },\n        toolWarnings,\n      };\n    case 'tool':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: {\n          functionCallingConfig: {\n            mode: 'ANY',\n            allowedFunctionNames: [toolChoice.toolName],\n          },\n        },\n        toolWarnings,\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`,\n      });\n    }\n  }\n}\n","import { LanguageModelV2FinishReason } from '@ai-sdk/provider';\n\nexport function mapGoogleGenerativeAIFinishReason({\n  finishReason,\n  hasToolCalls,\n}: {\n  finishReason: string | null | undefined;\n  hasToolCalls: boolean;\n}): LanguageModelV2FinishReason {\n  switch (finishReason) {\n    case 'STOP':\n      return hasToolCalls ? 'tool-calls' : 'stop';\n    case 'MAX_TOKENS':\n      return 'length';\n    case 'IMAGE_SAFETY':\n    case 'RECITATION':\n    case 'SAFETY':\n    case 'BLOCKLIST':\n    case 'PROHIBITED_CONTENT':\n    case 'SPII':\n      return 'content-filter';\n    case 'FINISH_REASON_UNSPECIFIED':\n    case 'OTHER':\n      return 'other';\n    case 'MALFORMED_FUNCTION_CALL':\n      return 'error';\n    default:\n      return 'unknown';\n  }\n}\n","import { createProviderDefinedToolFactoryWithOutputSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n/**\n * A tool that enables the model to generate and run Python code.\n *\n * @note Ensure the selected model supports Code Execution.\n * Multi-tool usage with the code execution tool is typically compatible with Gemini >=2 models.\n *\n * @see https://ai.google.dev/gemini-api/docs/code-execution (Google AI)\n * @see https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/code-execution-api (Vertex AI)\n */\nexport const codeExecution = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    language: string;\n    code: string;\n  },\n  {\n    outcome: string;\n    output: string;\n  },\n  {}\n>({\n  id: 'google.code_execution',\n  name: 'code_execution',\n  inputSchema: z.object({\n    language: z.string().describe('The programming language of the code.'),\n    code: z.string().describe('The code to be executed.'),\n  }),\n  outputSchema: z.object({\n    outcome: z\n      .string()\n      .describe('The outcome of the execution (e.g., \"OUTCOME_OK\").'),\n    output: z.string().describe('The output from the code execution.'),\n  }),\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// https://ai.google.dev/gemini-api/docs/google-search\n// https://ai.google.dev/api/generate-content#GroundingSupport\n// https://cloud.google.com/vertex-ai/generative-ai/docs/grounding/grounding-with-google-search\n\nexport const googleSearch = createProviderDefinedToolFactory<\n  {},\n  {\n    /**\n     * The mode of the predictor to be used in dynamic retrieval. The following modes are supported:\n     *  - MODE_DYNAMIC: Run retrieval only when system decides it is necessary\n     *  - MODE_UNSPECIFIED: Always trigger retrieval\n     * @default MODE_UNSPECIFIED\n     */\n    mode?: 'MODE_DYNAMIC' | 'MODE_UNSPECIFIED';\n\n    /**\n     * The threshold to be used in dynamic retrieval (if not set, a system default value is used).\n     */\n    dynamicThreshold?: number;\n  }\n>({\n  id: 'google.google_search',\n  name: 'google_search',\n  inputSchema: lazySchema(() =>\n    zodSchema(\n      z.object({\n        mode: z\n          .enum(['MODE_DYNAMIC', 'MODE_UNSPECIFIED'])\n          .default('MODE_UNSPECIFIED'),\n        dynamicThreshold: z.number().default(1),\n      }),\n    ),\n  ),\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const urlContext = createProviderDefinedToolFactory<\n  {\n    // Url context does not have any input schema, it will directly use the url from the prompt\n  },\n  {}\n>({\n  id: 'google.url_context',\n  name: 'url_context',\n  inputSchema: lazySchema(() => zodSchema(z.object({}))),\n});\n","import { codeExecution } from './tool/code-execution';\nimport { googleSearch } from './tool/google-search';\nimport { urlContext } from './tool/url-context';\n\nexport const googleTools = {\n  /**\n   * Creates a Google search tool that gives Google direct access to real-time web content.\n   * Must have name \"google_search\".\n   */\n  googleSearch,\n\n  /**\n   * Creates a URL context tool that gives Google direct access to real-time web content.\n   * Must have name \"url_context\".\n   */\n  urlContext,\n  /**\n   * A tool that enables the model to generate and run Python code.\n   * Must have name \"code_execution\".\n   *\n   * @note Ensure the selected model supports Code Execution.\n   * Multi-tool usage with the code execution tool is typically compatible with Gemini >=2 models.\n   *\n   * @see https://ai.google.dev/gemini-api/docs/code-execution (Google AI)\n   * @see https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/code-execution-api (Vertex AI)\n   */\n  codeExecution,\n};\n"],"names":["_a","lazySchema","zodSchema","z","googleTools","UnsupportedFunctionalityError","generateId","createProviderDefinedToolFactory"],"mappings":"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"}},
    {"offset": {"line": 2794, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}