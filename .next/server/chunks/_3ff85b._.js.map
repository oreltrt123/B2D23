{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/api-errors.ts"],"sourcesContent":["export interface APIError {\n  statusCode?: number\n  message: string\n}\n\nexport function isRateLimitError(error: any): boolean {\n  return (\n    error &&\n    (error.statusCode === 429 ||\n      error.message.toLowerCase().includes('limit') ||\n      error.message.toLowerCase().includes('billing'))\n  )\n}\n\nexport function isOverloadedError(error: any): boolean {\n  return error && (error.statusCode === 529 || error.statusCode === 503)\n}\n\nexport function isAccessDeniedError(error: any): boolean {\n  return error && (error.statusCode === 403 || error.statusCode === 401)\n}\n\nexport function handleAPIError(\n  error: any,\n  context?: { hasOwnApiKey?: boolean },\n): Response {\n  // Log the error for debugging\n  console.error('API Error:', error)\n\n  if (isRateLimitError(error)) {\n    const message = context?.hasOwnApiKey\n      ? 'The provider is currently unavailable due to request limit.'\n      : 'The provider is currently unavailable due to request limit. Try using your own API key.'\n\n    return new Response(message, { status: 429 })\n  }\n\n  if (isOverloadedError(error)) {\n    return new Response(\n      'The provider is currently unavailable. Please try again later.',\n      { status: 529 },\n    )\n  }\n\n  if (isAccessDeniedError(error)) {\n    return new Response(\n      'Access denied. Please make sure your API key is valid.',\n      { status: 403 },\n    )\n  }\n\n  // Generic error handling\n  return new Response(\n    'An unexpected error has occurred. Please try again later.',\n    { status: 500 },\n  )\n}\n\nexport function createRateLimitResponse(limit: {\n  amount: number\n  remaining: number\n  reset: number\n}): Response {\n  return new Response('You have reached your request limit for the day.', {\n    status: 429,\n    headers: {\n      'X-RateLimit-Limit': limit.amount.toString(),\n      'X-RateLimit-Remaining': limit.remaining.toString(),\n      'X-RateLimit-Reset': limit.reset.toString(),\n    },\n  })\n}"],"names":[],"mappings":";;;;;;;AAKO,SAAS,iBAAiB,KAAU;IACzC,OACE,SACA,CAAC,MAAM,UAAU,KAAK,OACpB,MAAM,OAAO,CAAC,WAAW,GAAG,QAAQ,CAAC,YACrC,MAAM,OAAO,CAAC,WAAW,GAAG,QAAQ,CAAC,UAAU;AAErD;AAEO,SAAS,kBAAkB,KAAU;IAC1C,OAAO,SAAS,CAAC,MAAM,UAAU,KAAK,OAAO,MAAM,UAAU,KAAK,GAAG;AACvE;AAEO,SAAS,oBAAoB,KAAU;IAC5C,OAAO,SAAS,CAAC,MAAM,UAAU,KAAK,OAAO,MAAM,UAAU,KAAK,GAAG;AACvE;AAEO,SAAS,eACd,KAAU,EACV,OAAoC;IAEpC,8BAA8B;IAC9B,QAAQ,KAAK,CAAC,cAAc;IAE5B,IAAI,iBAAiB,QAAQ;QAC3B,MAAM,UAAU,SAAS,eACrB,gEACA;QAEJ,OAAO,IAAI,SAAS,SAAS;YAAE,QAAQ;QAAI;IAC7C;IAEA,IAAI,kBAAkB,QAAQ;QAC5B,OAAO,IAAI,SACT,kEACA;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI,oBAAoB,QAAQ;QAC9B,OAAO,IAAI,SACT,0DACA;YAAE,QAAQ;QAAI;IAElB;IAEA,yBAAyB;IACzB,OAAO,IAAI,SACT,6DACA;QAAE,QAAQ;IAAI;AAElB;AAEO,SAAS,wBAAwB,KAIvC;IACC,OAAO,IAAI,SAAS,oDAAoD;QACtE,QAAQ;QACR,SAAS;YACP,qBAAqB,MAAM,MAAM,CAAC,QAAQ;YAC1C,yBAAyB,MAAM,SAAS,CAAC,QAAQ;YACjD,qBAAqB,MAAM,KAAK,CAAC,QAAQ;QAC3C;IACF;AACF"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/models.ts"],"sourcesContent":["import { createAnthropic } from '@ai-sdk/anthropic'\nimport { createFireworks } from '@ai-sdk/fireworks'\nimport { createGoogleGenerativeAI } from '@ai-sdk/google'\nimport { createVertex } from '@ai-sdk/google-vertex'\nimport { createMistral } from '@ai-sdk/mistral'\nimport { createOpenAI } from '@ai-sdk/openai'\nimport { createOllama } from 'ollama-ai-provider'\n\nexport type LLMModel = {\n  id: string\n  name: string\n  provider: string\n  providerId: string\n  isBeta?: boolean\n}\n\nexport type LLMModelConfig = {\n  model?: string\n  apiKey?: string\n  baseURL?: string\n  temperature?: number\n  topP?: number\n  topK?: number\n  frequencyPenalty?: number\n  presencePenalty?: number\n  maxTokens?: number\n}\n\nexport function getModelClient(model: LLMModel, config: LLMModelConfig) {\n  const { id: modelNameString, providerId } = model\n  const { apiKey, baseURL } = config\n\n  const providerConfigs = {\n    anthropic: () => createAnthropic({ apiKey, baseURL })(modelNameString),\n    openai: () => createOpenAI({ apiKey, baseURL })(modelNameString),\n    google: () =>\n      createGoogleGenerativeAI({ apiKey, baseURL })(modelNameString),\n    mistral: () => createMistral({ apiKey, baseURL })(modelNameString),\n    groq: () =>\n      createOpenAI({\n        apiKey: apiKey || process.env.GROQ_API_KEY,\n        baseURL: baseURL || 'https://api.groq.com/openai/v1',\n      })(modelNameString),\n    togetherai: () =>\n      createOpenAI({\n        apiKey: apiKey || process.env.TOGETHER_API_KEY,\n        baseURL: baseURL || 'https://api.together.xyz/v1',\n      })(modelNameString),\n    ollama: () => createOllama({ baseURL })(modelNameString),\n    fireworks: () =>\n      createFireworks({\n        apiKey: apiKey || process.env.FIREWORKS_API_KEY,\n        baseURL: baseURL || 'https://api.fireworks.ai/inference/v1',\n      })(modelNameString),\n    vertex: () => {\n      const vertexCredentials = process.env.GOOGLE_VERTEX_CREDENTIALS;\n      \n      // Handle both API key and JSON credentials\n      if (!vertexCredentials) {\n        // Fallback to Google AI SDK if no Vertex credentials\n        return createGoogleGenerativeAI({ \n          apiKey: apiKey || process.env.GOOGLE_AI_API_KEY \n        })(modelNameString);\n      }\n      \n      // Try to parse as JSON first (service account credentials)\n      try {\n        const credentials = JSON.parse(vertexCredentials);\n        return createVertex({\n          googleAuthOptions: { credentials },\n        })(modelNameString);\n      } catch {\n        // If not JSON, treat as API key and use Google AI SDK instead\n        return createGoogleGenerativeAI({ \n          apiKey: vertexCredentials || apiKey || process.env.GOOGLE_AI_API_KEY \n        })(modelNameString);\n      }\n    },\n    xai: () =>\n      createOpenAI({\n        apiKey: apiKey || process.env.XAI_API_KEY,\n        baseURL: baseURL || 'https://api.x.ai/v1',\n      })(modelNameString),\n    deepseek: () =>\n      createOpenAI({\n        apiKey: apiKey || process.env.DEEPSEEK_API_KEY,\n        baseURL: baseURL || 'https://api.deepseek.com/v1',\n      })(modelNameString),\n  }\n\n  const createClient =\n    providerConfigs[providerId as keyof typeof providerConfigs]\n\n  if (!createClient) {\n    throw new Error(`Unsupported provider: ${providerId}`)\n  }\n\n  return createClient()\n}\n\nexport function getDefaultModelParams(model: LLMModel) {\n  // Return default parameters for the model\n  // This can be customized per provider/model if needed\n  return {\n    temperature: 0.7,\n    maxTokens: 4096,\n  }\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AA4BO,SAAS,eAAe,KAAe,EAAE,MAAsB;IACpE,MAAM,EAAE,IAAI,eAAe,EAAE,UAAU,EAAE,GAAG;IAC5C,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG;IAE5B,MAAM,kBAAkB;QACtB,WAAW,IAAM,CAAA,GAAA,4JAAA,CAAA,kBAAe,AAAD,EAAE;gBAAE;gBAAQ;YAAQ,GAAG;QACtD,QAAQ,IAAM,CAAA,GAAA,yJAAA,CAAA,eAAY,AAAD,EAAE;gBAAE;gBAAQ;YAAQ,GAAG;QAChD,QAAQ,IACN,CAAA,GAAA,yJAAA,CAAA,2BAAwB,AAAD,EAAE;gBAAE;gBAAQ;YAAQ,GAAG;QAChD,SAAS,IAAM,CAAA,GAAA,0JAAA,CAAA,gBAAa,AAAD,EAAE;gBAAE;gBAAQ;YAAQ,GAAG;QAClD,MAAM,IACJ,CAAA,GAAA,yJAAA,CAAA,eAAY,AAAD,EAAE;gBACX,QAAQ,UAAU,QAAQ,GAAG,CAAC,YAAY;gBAC1C,SAAS,WAAW;YACtB,GAAG;QACL,YAAY,IACV,CAAA,GAAA,yJAAA,CAAA,eAAY,AAAD,EAAE;gBACX,QAAQ,UAAU,QAAQ,GAAG,CAAC,gBAAgB;gBAC9C,SAAS,WAAW;YACtB,GAAG;QACL,QAAQ,IAAM,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD,EAAE;gBAAE;YAAQ,GAAG;QACxC,WAAW,IACT,CAAA,GAAA,4JAAA,CAAA,kBAAe,AAAD,EAAE;gBACd,QAAQ,UAAU,QAAQ,GAAG,CAAC,iBAAiB;gBAC/C,SAAS,WAAW;YACtB,GAAG;QACL,QAAQ;YACN,MAAM,oBAAoB,QAAQ,GAAG,CAAC,yBAAyB;YAE/D,2CAA2C;YAC3C,IAAI,CAAC,mBAAmB;gBACtB,qDAAqD;gBACrD,OAAO,CAAA,GAAA,yJAAA,CAAA,2BAAwB,AAAD,EAAE;oBAC9B,QAAQ,UAAU,QAAQ,GAAG,CAAC,iBAAiB;gBACjD,GAAG;YACL;YAEA,2DAA2D;YAC3D,IAAI;gBACF,MAAM,cAAc,KAAK,KAAK,CAAC;gBAC/B,OAAO,CAAA,GAAA,mKAAA,CAAA,eAAY,AAAD,EAAE;oBAClB,mBAAmB;wBAAE;oBAAY;gBACnC,GAAG;YACL,EAAE,OAAM;gBACN,8DAA8D;gBAC9D,OAAO,CAAA,GAAA,yJAAA,CAAA,2BAAwB,AAAD,EAAE;oBAC9B,QAAQ,qBAAqB,UAAU,QAAQ,GAAG,CAAC,iBAAiB;gBACtE,GAAG;YACL;QACF;QACA,KAAK,IACH,CAAA,GAAA,yJAAA,CAAA,eAAY,AAAD,EAAE;gBACX,QAAQ,UAAU,QAAQ,GAAG,CAAC,WAAW;gBACzC,SAAS,WAAW;YACtB,GAAG;QACL,UAAU,IACR,CAAA,GAAA,yJAAA,CAAA,eAAY,AAAD,EAAE;gBACX,QAAQ,UAAU,QAAQ,GAAG,CAAC,gBAAgB;gBAC9C,SAAS,WAAW;YACtB,GAAG;IACP;IAEA,MAAM,eACJ,eAAe,CAAC,WAA2C;IAE7D,IAAI,CAAC,cAAc;QACjB,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,WAAW,CAAC;IACvD;IAEA,OAAO;AACT;AAEO,SAAS,sBAAsB,KAAe;IACnD,0CAA0C;IAC1C,sDAAsD;IACtD,OAAO;QACL,aAAa;QACb,WAAW;IACb;AACF"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/templates.ts"],"sourcesContent":["import templates from './templates.json'\n\nexport default templates\nexport type Templates = typeof templates\nexport type TemplateId = keyof typeof templates\nexport type TemplateConfig = typeof templates[TemplateId]\n\nexport function templatesToPrompt(templates: Templates) {\n  return `${Object.entries(templates).map(([id, t], index) => `${index + 1}. ${id}: \"${t.instructions}\". File: ${t.file || 'none'}. Dependencies installed: ${t.lib ? t.lib.join(', ') : 'none'}. Port: ${t.port || 'none'}.`).join('\\n')}`\n}"],"names":[],"mappings":";;;;;;;uCAEe,wFAAA,CAAA,UAAS;AAKjB,SAAS,kBAAkB,SAAoB;IACpD,OAAO,CAAC,EAAE,OAAO,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,QAAU,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,YAAY,CAAC,SAAS,EAAE,EAAE,IAAI,IAAI,OAAO,0BAA0B,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,OAAO,QAAQ,EAAE,EAAE,IAAI,IAAI,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC;AAC3O"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/prompt.ts"],"sourcesContent":["import { Templates, templatesToPrompt } from '@/lib/templates'\r\n\r\nexport function toPrompt(template: Templates) {\r\n  return `\r\n    You are a skilled software engineer.\r\n    You do not make mistakes.\r\n    Generate an fragment.\r\n    You can install additional dependencies.\r\n    Do not touch project dependencies files like package.json, package-lock.json, requirements.txt, etc.\r\n    Do not wrap code in backticks.\r\n    Always break the lines correctly.\r\n    You can use one of the following templates:\r\n    ${templatesToPrompt(template)}\r\n  `\r\n}"],"names":[],"mappings":";;;;;;AAEO,SAAS,SAAS,QAAmB;IAC1C,OAAO,CAAC;;;;;;;;;IASN,EAAE,CAAA,GAAA,kHAAA,CAAA,oBAAiB,AAAD,EAAE,UAAU;EAChC,CAAC;AACH"}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/ratelimit.ts"],"sourcesContent":["import { Duration } from './duration'\nimport { Ratelimit } from '@upstash/ratelimit'\nimport { kv } from '@vercel/kv'\n\nexport default async function ratelimit(\n  key: string | null,\n  maxRequests: number,\n  window: Duration,\n) {\n  if (process.env.KV_REST_API_URL && process.env.KV_REST_API_TOKEN) {\n    const ratelimit = new Ratelimit({\n      redis: kv,\n      limiter: Ratelimit.slidingWindow(maxRequests, window),\n    })\n\n    const { success, limit, reset, remaining } = await ratelimit.limit(\n      `ratelimit_${key}`,\n    )\n\n    if (!success) {\n      return {\n        amount: limit,\n        reset,\n        remaining,\n      }\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAIe,eAAe,UAC5B,GAAkB,EAClB,WAAmB,EACnB,MAAgB;IAEhB,IAAI,QAAQ,GAAG,CAAC,eAAe,IAAI,QAAQ,GAAG,CAAC,iBAAiB,EAAE;QAChE,MAAM,YAAY,IAAI,yJAAA,CAAA,YAAS,CAAC;YAC9B,OAAO,iJAAA,CAAA,KAAE;YACT,SAAS,yJAAA,CAAA,YAAS,CAAC,aAAa,CAAC,aAAa;QAChD;QAEA,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,MAAM,UAAU,KAAK,CAChE,CAAC,UAAU,EAAE,IAAI,CAAC;QAGpB,IAAI,CAAC,SAAS;YACZ,OAAO;gBACL,QAAQ;gBACR;gBACA;YACF;QACF;IACF;AACF"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/schema.ts"],"sourcesContent":["import { z } from 'zod'\n\nexport const fragmentSchema = z.object({\n  commentary: z\n    .string()\n    .describe(\n      `Describe what you're about to do and the steps you want to take for generating the fragment in great detail.`,\n    ),\n  template: z\n    .string()\n    .describe('Name of the template used to generate the fragment.'),\n  // template_ready: z.boolean().describe('Detect if finished identifying the template.'),\n  title: z.string().describe('Short title of the fragment. Max 3 words.'),\n  description: z\n    .string()\n    .describe('Short description of the fragment. Max 1 sentence.'),\n  additional_dependencies: z\n    .array(z.string())\n    .describe(\n      'Additional dependencies required by the fragment. Do not include dependencies that are already included in the template.',\n    ),\n  has_additional_dependencies: z\n    .boolean()\n    .describe(\n      'Detect if additional dependencies that are not included in the template are required by the fragment.',\n    ),\n  install_dependencies_command: z\n    .string()\n    .describe(\n      'Command to install additional dependencies required by the fragment.',\n    ),\n  // install_dependencies_ready: z.boolean().describe('Detect if finished identifying additional dependencies.'),\n  port: z\n    .number()\n    .nullable()\n    .describe(\n      'Port number used by the resulted fragment. Null when no ports are exposed.',\n    ),\n  file_path: z\n    .string()\n    .describe('Relative path to the file, including the file name.'),\n  code: z\n    .string()\n    .describe('Code generated by the fragment. Only runnable code is allowed.'),\n  // code: z.array(z.object({\n  //   file_name: z.string().describe('Name of the file.'),\n  //   file_path: z.string().describe('Relative path to the file, including the file name.'),\n  //   file_content: z.string().describe('Content of the file.'),\n  //   file_finished: z.boolean().describe('Detect if finished generating the file.'),\n  // })),\n  // code_finished: z.boolean().describe('Detect if finished generating the code.'),\n  // error: z.string().optional().describe('Error message if the fragment is not valid.'),\n})\n\nexport type FragmentSchema = z.infer<typeof fragmentSchema>\n\n// Schema for morph edit instructions\nexport const morphEditSchema = z.object({\n  commentary: z\n    .string()\n    .describe('Explain what changes you are making and why'),\n  instruction: z\n    .string()\n    .describe('One line instruction on what the change is'),\n  edit: z\n    .string()\n    .describe(\n      \"You should make it clear what the edit is, while also minimizing the unchanged code you write. When writing the edit, you should specify each edit in sequence, with the special comment // ... existing code ... to represent unchanged code in between edited lines. For example: // ... existing code ... FIRST_EDIT // ... existing code ... SECOND_EDIT // ... existing code ... THIRD_EDIT // ... existing code ... Be Lazy when outputting code, rely heavily on the exisitng code comments, but each edit should contain minimally sufficient context of unchanged lines around the code you're editing to resolve ambiguity. DO NOT omit spans of pre-existing code (or comments) without using the // ... existing code ... comment to indicate its absence. If you omit the existing code comment, the model may inadvertently delete these lines. If you plan on deleting a section, you must provide context before and after to delete it. If the initial code is ```code \\\\n Block 1 \\\\n Block 2 \\\\n Block 3 \\\\n code```, and you want to remove Block 2, you would output ```// ... existing code ... \\\\n Block 1 \\\\n  Block 3 \\\\n // ... existing code ...```. \",\n    ),\n  file_path: z.string().describe('Path to the file being edited'),\n})\n\nexport type MorphEditSchema = z.infer<typeof morphEditSchema>"],"names":[],"mappings":";;;;;;;AAEO,MAAM,iBAAiB,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,YAAY,oKAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CACP,CAAC,4GAA4G,CAAC;IAElH,UAAU,oKAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,CAAC;IACZ,wFAAwF;IACxF,OAAO,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,oKAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;IACZ,yBAAyB,oKAAA,CAAA,IAAC,CACvB,KAAK,CAAC,oKAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CACP;IAEJ,6BAA6B,oKAAA,CAAA,IAAC,CAC3B,OAAO,GACP,QAAQ,CACP;IAEJ,8BAA8B,oKAAA,CAAA,IAAC,CAC5B,MAAM,GACN,QAAQ,CACP;IAEJ,+GAA+G;IAC/G,MAAM,oKAAA,CAAA,IAAC,CACJ,MAAM,GACN,QAAQ,GACR,QAAQ,CACP;IAEJ,WAAW,oKAAA,CAAA,IAAC,CACT,MAAM,GACN,QAAQ,CAAC;IACZ,MAAM,oKAAA,CAAA,IAAC,CACJ,MAAM,GACN,QAAQ,CAAC;AASd;AAKO,MAAM,kBAAkB,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,YAAY,oKAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;IACZ,aAAa,oKAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;IACZ,MAAM,oKAAA,CAAA,IAAC,CACJ,MAAM,GACN,QAAQ,CACP;IAEJ,WAAW,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC"}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/chat/route.ts"],"sourcesContent":["import { handleAPIError, createRateLimitResponse } from '@/lib/api-errors'\nimport { Duration } from '@/lib/duration'\nimport { getModelClient, LLMModel, LLMModelConfig } from '@/lib/models'\nimport { toPrompt } from '@/lib/prompt'\nimport ratelimit from '@/lib/ratelimit'\nimport { fragmentSchema as schema } from '@/lib/schema'\nimport { Templates } from '@/lib/templates'\nimport { streamObject, LanguageModel, CoreMessage } from 'ai'\n\nexport const maxDuration = 300\n\nconst rateLimitMaxRequests = process.env.RATE_LIMIT_MAX_REQUESTS\n  ? parseInt(process.env.RATE_LIMIT_MAX_REQUESTS)\n  : 10\nconst ratelimitWindow = process.env.RATE_LIMIT_WINDOW\n  ? (process.env.RATE_LIMIT_WINDOW as Duration)\n  : '1d'\n\nexport async function POST(req: Request) {\n  const {\n    messages,\n    userID,\n    teamID,\n    template,\n    model,\n    config,\n  }: {\n    messages: CoreMessage[]\n    userID: string | undefined\n    teamID: string | undefined\n    template: Templates\n    model: LLMModel\n    config: LLMModelConfig\n  } = await req.json()\n\n  const limit = !config.apiKey\n    ? await ratelimit(\n        req.headers.get('x-forwarded-for'),\n        rateLimitMaxRequests,\n        ratelimitWindow,\n      )\n    : false\n\n  if (limit) {\n    return createRateLimitResponse(limit)\n  }\n\n  console.log('userID', userID)\n  console.log('teamID', teamID)\n  // console.log('template', template)\n  console.log('model', model)\n  // console.log('config', config)\n\n  const { model: modelNameString, apiKey: modelApiKey, ...modelParams } = config\n  const modelClient = getModelClient(model, config)\n\n  try {\n    const stream = await streamObject({\n      model: modelClient as LanguageModel,\n      schema,\n      system: toPrompt(template),\n      messages,\n      maxRetries: 0, // do not retry on errors\n      ...modelParams,\n    })\n\n    return stream.toTextStreamResponse()\n  } catch (error: any) {\n    return handleAPIError(error, { hasOwnApiKey: !!config.apiKey })\n  }\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AASO,MAAM,cAAc;AAE3B,MAAM,uBAAuB,QAAQ,GAAG,CAAC,uBAAuB,GAC5D,SAAS,QAAQ,GAAG,CAAC,uBAAuB,IAC5C;AACJ,MAAM,kBAAkB,QAAQ,GAAG,CAAC,iBAAiB,GAChD,QAAQ,GAAG,CAAC,iBAAiB,GAC9B;AAEG,eAAe,KAAK,GAAY;IACrC,MAAM,EACJ,QAAQ,EACR,MAAM,EACN,MAAM,EACN,QAAQ,EACR,KAAK,EACL,MAAM,EACP,GAOG,MAAM,IAAI,IAAI;IAElB,MAAM,QAAQ,CAAC,OAAO,MAAM,GACxB,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD,EACZ,IAAI,OAAO,CAAC,GAAG,CAAC,oBAChB,sBACA,mBAEF;IAEJ,IAAI,OAAO;QACT,OAAO,CAAA,GAAA,sHAAA,CAAA,0BAAuB,AAAD,EAAE;IACjC;IAEA,QAAQ,GAAG,CAAC,UAAU;IACtB,QAAQ,GAAG,CAAC,UAAU;IACtB,oCAAoC;IACpC,QAAQ,GAAG,CAAC,SAAS;IACrB,gCAAgC;IAEhC,MAAM,EAAE,OAAO,eAAe,EAAE,QAAQ,WAAW,EAAE,GAAG,aAAa,GAAG;IACxE,MAAM,cAAc,CAAA,GAAA,+GAAA,CAAA,iBAAc,AAAD,EAAE,OAAO;IAE1C,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,sJAAA,CAAA,eAAY,AAAD,EAAE;YAChC,OAAO;YACP,QAAA,+GAAA,CAAA,iBAAM;YACN,QAAQ,CAAA,GAAA,+GAAA,CAAA,WAAQ,AAAD,EAAE;YACjB;YACA,YAAY;YACZ,GAAG,WAAW;QAChB;QAEA,OAAO,OAAO,oBAAoB;IACpC,EAAE,OAAO,OAAY;QACnB,OAAO,CAAA,GAAA,sHAAA,CAAA,iBAAc,AAAD,EAAE,OAAO;YAAE,cAAc,CAAC,CAAC,OAAO,MAAM;QAAC;IAC/D;AACF"}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}