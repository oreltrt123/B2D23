{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAIA,MAAM,qBAAO,gNAAM,UAAU,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,wPAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,gNAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,wPAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,gNAAM,UAAU,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,wPAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,gNAAM,UAAU,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,wPAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,gNAAM,UAAU,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,wPAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,gNAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,wPAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/ui/switch.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Switch = React.forwardRef<\r\n  React.ElementRef<typeof SwitchPrimitives.Root>,\r\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\r\n>(({ className, ...props }, ref) => (\r\n  <SwitchPrimitives.Root\r\n    className={cn(\r\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\r\n      className\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  >\r\n    <SwitchPrimitives.Thumb\r\n      className={cn(\r\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\r\n      )}\r\n    />\r\n  </SwitchPrimitives.Root>\r\n))\r\nSwitch.displayName = SwitchPrimitives.Root.displayName\r\n\r\nexport { Switch }"],"names":[],"mappings":";;;;;;;;AAAA;;;;;AAOA,MAAM,uBAAS,gNAAM,UAAU,CAG7B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,wPAAC,mKAAiB,IAAI;QACpB,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,+XACA;QAED,GAAG,KAAK;QACT,KAAK;kBAEL,cAAA,wPAAC,mKAAiB,KAAK;YACrB,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV;;;;;;;;;;;AAKR,OAAO,WAAW,GAAG,mKAAiB,IAAI,CAAC,WAAW"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\r\n        secondary:\r\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        destructive:\r\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\r\n        outline: \"text-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface BadgeProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof badgeVariants> {}\r\n\r\nfunction Badge({ className, variant, ...props }: BadgeProps) {\r\n  return (\r\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\r\n  )\r\n}\r\n\r\nexport { Badge, badgeVariants }"],"names":[],"mappings":";;;;;;;;;;;AAKA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,wKACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,wPAAC;QAAI,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/user-settings.ts"],"sourcesContent":["import { createSupabaseBrowserClient } from './supabase-browser'\r\nimport {\r\n  UserProfile,\r\n  UserPreferences,\r\n  UserIntegration,\r\n  UserSecuritySettings\r\n} from './database.types'\r\n\r\n// Lazy getter for supabase instance\r\nfunction getSupabase() {\r\n  return createSupabaseBrowserClient()\r\n}\r\n\r\n// Cache to prevent excessive API calls\r\nlet tablesExistCache: { [key: string]: boolean } = {}\r\nexport let cacheTime: { [key: string]: number } = {}\r\nconst CACHE_DURATION = 5 * 60 * 1000 // 5 minutes\r\n\r\n// Check if a table exists with caching\r\nexport async function tableExists(tableName: string): Promise<boolean> {\r\n  const now = Date.now()\r\n  \r\n  // Return cached result if recent\r\n  if (tablesExistCache[tableName] && (now - cacheTime[tableName]) < CACHE_DURATION) {\r\n    return tablesExistCache[tableName]\r\n  }\r\n\r\n  const supabase = getSupabase()\r\n  if (!supabase) {\r\n    tablesExistCache[tableName] = false\r\n    cacheTime[tableName] = now\r\n    return false\r\n  }\r\n\r\n  try {\r\n    const { error } = await supabase.from(tableName).select('id').limit(1)\r\n    const exists = !error || error.code !== 'PGRST106'\r\n    \r\n    tablesExistCache[tableName] = exists\r\n    cacheTime[tableName] = now\r\n    \r\n    if (!exists) {\r\n      console.warn(`Table ${tableName} does not exist. API calls will return defaults.`)\r\n    }\r\n    \r\n    return exists\r\n  } catch (error) {\r\n    console.error(`Error checking table ${tableName}:`, error)\r\n    tablesExistCache[tableName] = false\r\n    cacheTime[tableName] = now\r\n    return false\r\n  }\r\n}\r\n\r\n// Safe wrapper to prevent API calls when tables don't exist\r\nasync function safeOperation<T>(\r\n  tableName: string,\r\n  operation: () => Promise<T>,\r\n  fallback: T,\r\n  operationName: string\r\n): Promise<T> {\r\n  if (!(await tableExists(tableName))) {\r\n    console.warn(`Skipping ${operationName} - table ${tableName} does not exist`)\r\n    return fallback\r\n  }\r\n  \r\n  try {\r\n    return await operation()\r\n  } catch (error) {\r\n    console.error(`${operationName} failed:`, error)\r\n    return fallback\r\n  }\r\n}\r\n\r\n\r\nexport async function getUserProfile(userId: string): Promise<UserProfile | null> {\r\n  if (!userId) return null\r\n\r\n  return safeOperation(\r\n    'profiles',\r\n    async () => {\r\n      const supabase = getSupabase()\r\n      if (!supabase) throw new Error('Supabase not available')\r\n\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('user_id', userId) // Uses idx_profiles_user_id index\r\n        .single()\r\n\r\n      if (error) {\r\n        if (error.code === 'PGRST116') {\r\n          // No profile found, create one\r\n          return await createUserProfile(userId)\r\n        }\r\n        throw error\r\n      }\r\n      return data\r\n    },\r\n    getDefaultProfile(userId),\r\n    'getUserProfile'\r\n  )\r\n}\r\n\r\nfunction getDefaultProfile(userId: string): UserProfile {\r\n  return {\r\n    id: '',\r\n    user_id: userId,\r\n    full_name: '',\r\n    display_name: '',\r\n    first_name: '',\r\n    last_name: '',\r\n    work_description: '',\r\n    avatar_url: '',\r\n    onboarding_completed: false,\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  }\r\n}\r\n\r\nexport async function createUserProfile(userId: string, profile?: Partial<UserProfile>): Promise<UserProfile | null> {\r\n  if (!userId) return null\r\n\r\n  return safeOperation(\r\n    'profiles',\r\n    async () => {\r\n      const { data, error } = await getSupabase()!\r\n        .from('profiles')\r\n        .insert({\r\n          user_id: userId, // Uses idx_profiles_user_id index\r\n          full_name: profile?.full_name || '',\r\n          display_name: profile?.display_name || '',\r\n          first_name: profile?.first_name || '',\r\n          last_name: profile?.last_name || '',\r\n          work_description: profile?.work_description || '',\r\n          avatar_url: profile?.avatar_url || '',\r\n          onboarding_completed: profile?.onboarding_completed || false\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) throw error\r\n      return data\r\n    },\r\n    getDefaultProfile(userId),\r\n    'createUserProfile'\r\n  )\r\n}\r\n\r\nexport async function updateUserProfile(userId: string, updates: Partial<UserProfile>): Promise<boolean> {\r\n  if (!userId) return false\r\n\r\n  return safeOperation(\r\n    'profiles',\r\n    async () => {\r\n      const { error } = await getSupabase()!\r\n        .from('profiles')\r\n        .update(updates)\r\n        .eq('user_id', userId) // Uses idx_profiles_user_id index\r\n\r\n      if (error) throw error\r\n      return true\r\n    },\r\n    false,\r\n    'updateUserProfile'\r\n  )\r\n}\r\n\r\n// =============================================\r\n// USER PREFERENCES OPERATIONS  \r\n// =============================================\r\n\r\nexport async function getUserPreferences(userId: string): Promise<UserPreferences | null> {\r\n  if (!userId) return null\r\n\r\n  return safeOperation(\r\n    'user_preferences',\r\n    async () => {\r\n      const { data, error } = await getSupabase()!\r\n        .from('user_preferences')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .single()\r\n\r\n      if (error) {\r\n        if (error.code === 'PGRST116') {\r\n          return await createUserPreferences(userId)\r\n        }\r\n        throw error\r\n      }\r\n      return data\r\n    },\r\n    getDefaultPreferences(userId),\r\n    'getUserPreferences'\r\n  )\r\n}\r\n\r\nfunction getDefaultPreferences(userId: string): UserPreferences {\r\n  return {\r\n    id: '',\r\n    user_id: userId,\r\n    ai_assistance: true,\r\n    smart_suggestions: false,\r\n    theme: 'system',\r\n    font_family: 'inter',\r\n    email_notifications: true,\r\n    marketing_emails: false,\r\n    security_alerts: true,\r\n    analytics_enabled: true,\r\n    data_sharing_enabled: false,\r\n    telemetry_enabled: false,\r\n    auto_template: 'nextjs-developer',\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  }\r\n}\r\n\r\nexport async function createUserPreferences(userId: string, preferences?: Partial<UserPreferences>): Promise<UserPreferences | null> {\r\n  if (!userId) return null\r\n\r\n  return safeOperation(\r\n    'user_preferences',\r\n    async () => {\r\n      const { data, error } = await getSupabase()!\r\n        .from('user_preferences')\r\n        .insert({\r\n          user_id: userId,\r\n          ai_assistance: preferences?.ai_assistance ?? true,\r\n          smart_suggestions: preferences?.smart_suggestions ?? false,\r\n          theme: preferences?.theme ?? 'system',\r\n          font_family: preferences?.font_family ?? 'inter',\r\n          email_notifications: preferences?.email_notifications ?? true,\r\n          marketing_emails: preferences?.marketing_emails ?? false,\r\n          security_alerts: preferences?.security_alerts ?? true,\r\n          analytics_enabled: preferences?.analytics_enabled ?? true,\r\n          data_sharing_enabled: preferences?.data_sharing_enabled ?? false,\r\n          telemetry_enabled: preferences?.telemetry_enabled ?? false,\r\n          auto_template: preferences?.auto_template ?? 'nextjs-developer',\r\n          ...preferences\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) throw error\r\n      return data\r\n    },\r\n    getDefaultPreferences(userId),\r\n    'createUserPreferences'\r\n  )\r\n}\r\n\r\nexport async function updateUserPreferences(userId: string, updates: Partial<UserPreferences>): Promise<boolean> {\r\n  if (!userId) return false\r\n\r\n  return safeOperation(\r\n    'user_preferences',\r\n    async () => {\r\n      // Try to update first\r\n      const { data, error } = await getSupabase()!\r\n        .from('user_preferences')\r\n        .update(updates)\r\n        .eq('user_id', userId)\r\n        .select()\r\n\r\n      if (error) throw error\r\n\r\n      // If no rows updated, create preferences\r\n      if (!data || data.length === 0) {\r\n        const created = await createUserPreferences(userId, updates)\r\n        return !!created\r\n      }\r\n\r\n      return true\r\n    },\r\n    false,\r\n    'updateUserPreferences'\r\n  )\r\n}\r\n\r\nexport async function getUserIntegrations(userId: string): Promise<UserIntegration[]> {\r\n  if (!userId) return []\r\n\r\n  return safeOperation(\r\n    'user_integrations',\r\n    async () => {\r\n      const { data, error } = await getSupabase()!\r\n        .from('user_integrations')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .order('service_name')\r\n\r\n      if (error) throw error\r\n      return data || []\r\n    },\r\n    getDefaultIntegrations(userId),\r\n    'getUserIntegrations'\r\n  )\r\n}\r\n\r\nfunction getDefaultIntegrations(userId: string): UserIntegration[] {\r\n  const services = ['github', 'google_drive', 'gmail', 'google_calendar', 'artifacts']\r\n  const now = new Date().toISOString()\r\n  \r\n  return services.map(service => ({\r\n    id: '',\r\n    user_id: userId,\r\n    service_name: service,\r\n    is_connected: service === 'artifacts',\r\n    connection_data: undefined,\r\n    last_sync_at: undefined,\r\n    created_at: now,\r\n    updated_at: now\r\n  }))\r\n}\r\n\r\nexport async function upsertUserIntegration(userId: string, serviceName: string, integration: Partial<UserIntegration>): Promise<boolean> {\r\n  if (!userId) return false\r\n\r\n  return safeOperation(\r\n    'user_integrations',\r\n    async () => {\r\n      const { error } = await getSupabase()!\r\n        .from('user_integrations')\r\n        .upsert({\r\n          user_id: userId,\r\n          service_name: serviceName,\r\n          ...integration\r\n        })\r\n\r\n      if (error) throw error\r\n      return true\r\n    },\r\n    false,\r\n    'upsertUserIntegration'\r\n  )\r\n}\r\n\r\nexport async function disconnectUserIntegration(userId: string, serviceName: string): Promise<boolean> {\r\n  if (!userId) return false\r\n\r\n  return safeOperation(\r\n    'user_integrations',\r\n    async () => {\r\n      const { error } = await getSupabase()!\r\n        .from('user_integrations')\r\n        .update({ \r\n          is_connected: false,\r\n          connection_data: null\r\n        })\r\n        .eq('user_id', userId)\r\n        .eq('service_name', serviceName)\r\n\r\n      if (error) throw error\r\n      return true\r\n    },\r\n    false,\r\n    'disconnectUserIntegration'\r\n  )\r\n}\r\n\r\nexport async function getUserSecuritySettings(userId: string): Promise<UserSecuritySettings | null> {\r\n  if (!userId) return null\r\n\r\n  return safeOperation(\r\n    'user_security_settings',\r\n    async () => {\r\n      const { data, error } = await getSupabase()!\r\n        .from('user_security_settings')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .single()\r\n\r\n      if (error) {\r\n        if (error.code === 'PGRST116') {\r\n          return await createUserSecuritySettings(userId)\r\n        }\r\n        throw error\r\n      }\r\n      return data\r\n    },\r\n    getDefaultSecuritySettings(userId),\r\n    'getUserSecuritySettings'\r\n  )\r\n}\r\n\r\nfunction getDefaultSecuritySettings(userId: string): UserSecuritySettings {\r\n  return {\r\n    id: '',\r\n    user_id: userId,\r\n    two_factor_enabled: false,\r\n    backup_codes: undefined,\r\n    last_password_change: undefined,\r\n    login_notifications: true,\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  }\r\n}\r\n\r\nexport async function createUserSecuritySettings(userId: string): Promise<UserSecuritySettings | null> {\r\n  if (!userId) return null\r\n\r\n  return safeOperation(\r\n    'user_security_settings',\r\n    async () => {\r\n      const { data, error } = await getSupabase()!\r\n        .from('user_security_settings')\r\n        .insert({\r\n          user_id: userId,\r\n          two_factor_enabled: false,\r\n          login_notifications: true\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) throw error\r\n      return data\r\n    },\r\n    getDefaultSecuritySettings(userId),\r\n    'createUserSecuritySettings'\r\n  )\r\n}\r\n\r\nexport async function updateUserSecuritySettings(userId: string, updates: Partial<UserSecuritySettings>): Promise<boolean> {\r\n  if (!userId) return false\r\n\r\n  return safeOperation(\r\n    'user_security_settings',\r\n    async () => {\r\n      const { data, error } = await getSupabase()!\r\n        .from('user_security_settings')\r\n        .update(updates)\r\n        .eq('user_id', userId)\r\n        .select()\r\n\r\n      if (error) throw error\r\n\r\n      // If no rows updated, create settings\r\n      if (!data || data.length === 0) {\r\n        const created = await createUserSecuritySettings(userId)\r\n        if (created) {\r\n          return await updateUserSecuritySettings(userId, updates)\r\n        }\r\n      }\r\n\r\n      return true\r\n    },\r\n    false,\r\n    'updateUserSecuritySettings'\r\n  )\r\n}\r\n\r\n\r\nexport async function getUserData(userId: string) {\r\n  if (!userId) return null\r\n\r\n  const [profile, preferences, integrations, securitySettings] = await Promise.all([\r\n    getUserProfile(userId),\r\n    getUserPreferences(userId),\r\n    getUserIntegrations(userId),\r\n    getUserSecuritySettings(userId)\r\n  ])\r\n\r\n  return {\r\n    profile,\r\n    preferences,\r\n    integrations,\r\n    securitySettings\r\n  }\r\n}\r\n\r\n// Clear the cache (useful after running migration)\r\nexport function clearSettingsCache(): void {\r\n  tablesExistCache = {}\r\n  cacheTime = {}\r\n}\r\n\r\nexport async function checkSupabaseConnection(): Promise<boolean> {\r\n  const supabase = getSupabase()\r\n  if (!supabase) return false\r\n  \r\n  try {\r\n    const { data: { session } } = await supabase.auth.getSession()\r\n    return !!session\r\n  } catch (error) {\r\n    console.error('Supabase connection check failed:', error)\r\n    return false\r\n  }\r\n}\r\n\r\nexport async function checkEnhancedTablesExist() {\r\n  const tables = [\r\n    'profiles',\r\n    'user_preferences',\r\n    'user_integrations',\r\n    'user_security_settings'\r\n  ]\r\n  \r\n  const status: { [key: string]: boolean } = {}\r\n  \r\n  for (const table of tables) {\r\n    status[table] = await tableExists(table)\r\n  }\r\n  \r\n  return status\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 514, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/settings/integrations/page.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Switch } from '@/components/ui/switch'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { useToast } from '@/components/ui/use-toast'\r\nimport { \r\n  Mail, \r\n  Calendar, \r\n  FolderOpen, \r\n  Plus, \r\n  Unlink,\r\n  Loader2,\r\n  ExternalLink,\r\n  RefreshCw\r\n} from 'lucide-react'\r\nimport { useState, useEffect, useCallback } from 'react'\r\nimport { useAuth } from '@/lib/auth'\r\nimport { \r\n  getUserIntegrations, \r\n  upsertUserIntegration, \r\n  disconnectUserIntegration,\r\n} from '@/lib/user-settings'\r\nimport { UserIntegration } from '@/lib/database.types'\r\n\r\nconst availableIntegrations = [\r\n  {\r\n    id: 'google-drive',\r\n    name: 'Google Drive', \r\n    description: 'Import and export files from your Drive',\r\n    icon: FolderOpen,\r\n    color: 'bg-blue-600 text-white'\r\n  },\r\n  {\r\n    id: 'gmail',\r\n    name: 'Gmail',\r\n    description: 'Send emails and access your inbox',\r\n    icon: Mail,\r\n    color: 'bg-red-600 text-white'\r\n  },\r\n  {\r\n    id: 'google-calendar',\r\n    name: 'Google Calendar',\r\n    description: 'Schedule meetings and manage your calendar',\r\n    icon: Calendar,\r\n    color: 'bg-green-600 text-white'\r\n  }\r\n]\r\n\r\nexport default function IntegrationsSettings() {\r\n  const { session } = useAuth(() => {}, () => {})\r\n  const { toast } = useToast()\r\n  \r\n  const [integrations, setIntegrations] = useState<UserIntegration[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [connecting, setConnecting] = useState<string | null>(null)\r\n  const [disconnecting, setDisconnecting] = useState<string | null>(null)\r\n  const [refreshing, setRefreshing] = useState(false)\r\n\r\n  const loadIntegrations = useCallback(async () => {\r\n    if (!session?.user?.id) return\r\n\r\n    try {\r\n      console.log('Loading integrations for user:', session.user.id)\r\n      const userIntegrations = await getUserIntegrations(session.user.id)\r\n      console.log('Loaded integrations:', userIntegrations)\r\n      setIntegrations(userIntegrations)\r\n    } catch (error) {\r\n      console.error('Error loading integrations:', error)\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to load integrations. Please try again.\",\r\n        variant: \"destructive\",\r\n      })\r\n    }\r\n  }, [session?.user?.id, toast])\r\n\r\n  useEffect(() => {\r\n    if (!session?.user?.id) {\r\n      setIsLoading(false)\r\n      return\r\n    }\r\n\r\n    const initializeIntegrations = async () => {\r\n      setIsLoading(true)\r\n      await loadIntegrations()\r\n      setIsLoading(false)\r\n    }\r\n\r\n    initializeIntegrations()\r\n  }, [session?.user?.id, loadIntegrations])\r\n\r\n\r\n  const getIntegrationStatus = useCallback((serviceId: string) => {\r\n    const integration = integrations.find(integration => integration.service_name === serviceId)\r\n    console.log(`Integration status for ${serviceId}:`, integration)\r\n    return integration\r\n  }, [integrations])\r\n\r\n  const handleRefresh = async () => {\r\n    setRefreshing(true)\r\n    await loadIntegrations()\r\n    setRefreshing(false)\r\n    toast({\r\n      title: \"Refreshed\",\r\n      description: \"Integration status updated.\",\r\n    })\r\n  }\r\n\r\n  const handleConnect = async (serviceId: string) => {\r\n    if (!session?.user?.id) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Please log in to connect integrations.\",\r\n        variant: \"destructive\",\r\n      })\r\n      return\r\n    }\r\n\r\n    setConnecting(serviceId)\r\n    \r\n    try {\r\n      console.log(`Connecting ${serviceId} for user:`, session.user.id)\r\n      \r\n      const success = await upsertUserIntegration(session.user.id, serviceId, {\r\n        is_connected: true,\r\n        connection_data: {\r\n          connected_at: new Date().toISOString(),\r\n          simulated: true,\r\n        }\r\n      })\r\n\r\n      if (success) {\r\n        await loadIntegrations()\r\n        \r\n        toast({\r\n          title: \"Success\",\r\n          description: `${availableIntegrations.find(int => int.id === serviceId)?.name} connected successfully.`,\r\n        })\r\n      } else {\r\n        throw new Error('Failed to save integration to database')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error connecting service:', error)\r\n      toast({\r\n        title: \"Error\",\r\n        description: error instanceof Error ? error.message : \"Failed to connect service. Please try again.\",\r\n        variant: \"destructive\",\r\n      })\r\n    } finally {\r\n      setConnecting(null)\r\n    }\r\n  }\r\n\r\n  const handleDisconnect = async (serviceId: string) => {\r\n    if (!session?.user?.id) return\r\n\r\n    setDisconnecting(serviceId)\r\n    \r\n    try {\r\n      console.log(`Disconnecting ${serviceId} for user:`, session.user.id)\r\n\r\n      const success = await disconnectUserIntegration(session.user.id, serviceId)\r\n\r\n      if (success) {\r\n        await loadIntegrations()\r\n        \r\n        toast({\r\n          title: \"Success\",\r\n          description: `${availableIntegrations.find(int => int.id === serviceId)?.name} disconnected successfully.`,\r\n        })\r\n      } else {\r\n        throw new Error('Failed to disconnect service')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error disconnecting service:', error)\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to disconnect service. Please try again.\",\r\n        variant: \"destructive\",\r\n      })\r\n    } finally {\r\n      setDisconnecting(null)\r\n    }\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div>\r\n          <h2 className=\"text-lg font-medium\">Integrations</h2>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Connect external services to enhance your workflow.\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center justify-center py-12\">\r\n          <Loader2 className=\"h-6 w-6 animate-spin\" />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (!session?.user?.id) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div>\r\n          <h2 className=\"text-lg font-medium\">Integrations</h2>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Please log in to manage your integrations.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-lg font-medium\">Integrations</h2>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Connect external services to enhance your workflow.\r\n          </p>\r\n        </div>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={handleRefresh}\r\n          disabled={refreshing}\r\n        >\r\n          {refreshing ? (\r\n            <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n          ) : (\r\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n          )}\r\n          Refresh\r\n        </Button>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Connected Services</CardTitle>\r\n          <CardDescription>\r\n            Manage your connected third-party services and applications.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {availableIntegrations.map((service) => {\r\n              const Icon = service.icon\r\n              const integration = getIntegrationStatus(service.id)\r\n              const isConnected = Boolean(integration?.is_connected)\r\n              const isConnecting = connecting === service.id\r\n              const isDisconnecting = disconnecting === service.id\r\n              const isProcessing = isConnecting || isDisconnecting\r\n              const isHealthy = isConnected\r\n              \r\n              console.log(`Service ${service.id}: connected=${isConnected}, integration=`, integration)\r\n              \r\n              return (\r\n                <div\r\n                  key={service.id}\r\n                  className=\"flex items-center justify-between p-4 border rounded-lg\"\r\n                >\r\n                  <div className=\"flex items-center gap-4\">\r\n                    <div className={`p-2 rounded-lg ${service.color}`}>\r\n                      <Icon className=\"h-5 w-5\" />\r\n                    </div>\r\n                    <div className=\"space-y-1\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <h4 className=\"font-medium\">{service.name}</h4>\r\n                        {isConnected ? (\r\n                          <Badge variant={isHealthy ? \"default\" : \"secondary\"}>\r\n                            {isHealthy ? \"Connected\" : \"Needs Attention\"}\r\n                          </Badge>\r\n                        ) : (\r\n                          <Badge variant=\"outline\">Not connected</Badge>\r\n                        )}\r\n                      </div>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        {service.description}\r\n                      </p>\r\n                      {isConnected && integration?.connection_data &&\r\n                       typeof integration.connection_data === 'object' &&\r\n                       'connected_at' in integration.connection_data && (\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          Connected {new Date(integration.connection_data.connected_at as string).toLocaleDateString()}\r\n                        </p>\r\n                      )}\r\n                      {integration?.connection_data &&\r\n                       typeof integration.connection_data === 'object' &&\r\n                       'simulated' in integration.connection_data &&\r\n                       integration.connection_data.simulated && (\r\n                        <p className=\"text-xs text-yellow-600\">\r\n                          Simulated connection\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center gap-2\">\r\n                    {isConnected ? (\r\n                      <Button\r\n                        variant=\"outline\"\r\n                        size=\"sm\"\r\n                        onClick={() => handleDisconnect(service.id)}\r\n                        disabled={isProcessing}\r\n                      >\r\n                        {isDisconnecting ? (\r\n                          <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                        ) : (\r\n                          <Unlink className=\"h-4 w-4 mr-2\" />\r\n                        )}\r\n                        Disconnect\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        variant=\"default\"\r\n                        size=\"sm\"\r\n                        onClick={() => handleConnect(service.id)}\r\n                        disabled={isProcessing}\r\n                      >\r\n                        {isConnecting ? (\r\n                          <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                        ) : (\r\n                          <Plus className=\"h-4 w-4 mr-2\" />\r\n                        )}\r\n                        Connect\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Platform Capabilities</CardTitle>\r\n          <CardDescription>\r\n            Core features and capabilities enabled in your workspace.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"space-y-0.5\">\r\n                <h4 className=\"font-medium\">Artifacts</h4>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Enable creation and execution of code artifacts in the sandbox environment\r\n                </p>\r\n              </div>\r\n              <Switch defaultChecked disabled />\r\n            </div>\r\n            \r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"space-y-0.5\">\r\n                <h4 className=\"font-medium\">Fragment Templates</h4>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Access to pre-built templates for common development patterns\r\n                </p>\r\n              </div>\r\n              <Switch defaultChecked disabled />\r\n            </div>\r\n            \r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"space-y-0.5\">\r\n                <h4 className=\"font-medium\">E2B Sandbox</h4>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Cloud-based development environment for running and testing code\r\n                </p>\r\n              </div>\r\n              <Switch defaultChecked disabled />\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>API Access</CardTitle>\r\n          <CardDescription>\r\n            Manage API keys and access tokens for external integrations.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h4 className=\"font-medium\">Personal Access Token</h4>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                Generate tokens for API access and automation\r\n              </p>\r\n            </div>\r\n            <Button variant=\"outline\" size=\"sm\">\r\n              <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n              Manage Tokens\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1312, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}