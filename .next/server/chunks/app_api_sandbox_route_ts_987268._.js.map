{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/sandbox/route.ts"],"sourcesContent":["import { FragmentSchema } from '@/lib/schema'\nimport { ExecutionResultInterpreter, ExecutionResultWeb } from '@/lib/types'\nimport { Sandbox } from '@e2b/code-interpreter'\nimport { FileSystemNode } from '@/components/file-tree'\n\nconst sandboxTimeout = 10 * 60 * 1000\n\nasync function fetchSandboxFiles(sbx: Sandbox): Promise<FileSystemNode[]> {\n  try {\n    // Use E2B SDK's files.list() method for robust file listing\n    const filesList = await sbx.files.list('/home/user')\n    return convertE2BFilesToTree(filesList)\n  } catch (error) {\n    console.error('Error fetching sandbox files:', error)\n    return []\n  }\n}\n\nfunction convertE2BFilesToTree(e2bFiles: any[]): FileSystemNode[] {\n  return e2bFiles\n    .filter(file => !file.name.includes('node_modules')) // Filter out node_modules\n    .map(file => {\n      const node: FileSystemNode = {\n        name: file.name,\n        isDirectory: file.isDir,\n        path: `/${file.path}`,\n      }\n\n      // Recursively convert children if it's a directory\n      if (file.isDir && file.children) {\n        node.children = convertE2BFilesToTree(file.children)\n      }\n\n      return node\n    })\n}\n\nexport const maxDuration = 60\nexport const runtime = 'nodejs'\nexport const dynamic = 'force-dynamic'\n\nexport async function POST(req: Request) {\n  try {\n    const {\n      fragment,\n      userID,\n      teamID,\n      accessToken,\n    }: {\n      fragment: FragmentSchema\n      userID: string | undefined\n      teamID: string | undefined\n      accessToken: string | undefined\n    } = await req.json()\n\n    if (!fragment) {\n      return new Response(\n        JSON.stringify({ \n          error: 'Missing fragment data', \n          type: 'validation_error' \n        }),\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\n      )\n    }\n\n    if (!process.env.E2B_API_KEY) {\n      console.error('E2B_API_KEY environment variable not found')\n      return new Response(\n        JSON.stringify({ \n          error: 'Code execution service is not configured. Please check environment settings.',\n          type: 'config_error'\n        }),\n        { status: 503, headers: { 'Content-Type': 'application/json' } }\n      )\n    }\n\n    let sbx\n    try {\n      sbx = await Sandbox.create(fragment.template, {\n        metadata: {\n          template: fragment.template,\n          userID: userID ?? '',\n          teamID: teamID ?? '',\n        },\n        timeoutMs: sandboxTimeout,\n        ...(teamID && accessToken\n          ? {\n              headers: {\n                'X-Supabase-Team': teamID,\n                'X-Supabase-Token': accessToken,\n              },\n            }\n          : {}),\n      })\n    } catch (e2bError: any) {\n      console.error('E2B Sandbox creation failed:', e2bError)\n      return new Response(\n        JSON.stringify({ \n          error: 'Failed to create sandbox environment. Please try again later.',\n          type: 'sandbox_creation_error',\n          details: e2bError.message\n        }),\n        { status: 503, headers: { 'Content-Type': 'application/json' } }\n      )\n    }\n\n    try {\n      if (fragment.has_additional_dependencies) {\n        await sbx.commands.run(fragment.install_dependencies_command)\n      }\n\n      if (fragment.code && Array.isArray(fragment.code)) {\n        await Promise.all(fragment.code.map(async (file) => {\n          await sbx.files.write(file.file_path, file.file_content)\n        }))\n      } else if (fragment.code !== null && fragment.code !== undefined) {\n        await sbx.files.write(fragment.file_path, fragment.code)\n      } else {\n        return new Response(\n          JSON.stringify({\n            error: 'Missing code data',\n            type: 'validation_error'\n          }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        )\n      }\n\n      if (fragment.template === 'code-interpreter-v1') {\n        const { logs, error, results } = await sbx.runCode(fragment.code || '')\n\n        // Fetch file tree after execution\n        const files = await fetchSandboxFiles(sbx)\n\n        return new Response(\n          JSON.stringify({\n            sbxId: sbx?.sandboxId,\n            template: fragment.template,\n            stdout: logs.stdout,\n            stderr: logs.stderr,\n            runtimeError: error,\n            cellResults: results,\n            files,\n          } as ExecutionResultInterpreter),\n          { headers: { 'Content-Type': 'application/json' } }\n        )\n      }\n\n      await sbx.commands.run(fragment.install_dependencies_command, {\n        envs: {\n          PORT: (fragment.port || 80).toString(),\n        },\n      })\n\n      // Fetch file tree after project setup\n      const files = await fetchSandboxFiles(sbx)\n\n      return new Response(\n        JSON.stringify({\n          sbxId: sbx?.sandboxId,\n          template: fragment.template,\n          url: `https://${sbx?.getHost(fragment.port || 80)}`,\n          files,\n        } as ExecutionResultWeb),\n        { headers: { 'Content-Type': 'application/json' } }\n      )\n    } catch (executionError: any) {\n      console.error('Sandbox execution error:', executionError)\n      \n      // Clean up sandbox on execution error\n      try {\n        await sbx?.kill()\n      } catch {}\n\n      return new Response(\n        JSON.stringify({ \n          error: 'Code execution failed. There may be an error in your code or dependencies.',\n          type: 'execution_error',\n          details: executionError.message\n        }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      )\n    }\n\n  } catch (error: any) {\n    console.error('Sandbox API Error:', error)\n    return new Response(\n      JSON.stringify({\n        error: 'An unexpected error occurred while setting up the sandbox.',\n        type: 'unknown_error',\n        details: error?.message || 'Unknown error'\n      }),\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\n    )\n  }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}