{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/anthropic-provider.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/version.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/anthropic-messages-language-model.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/anthropic-error.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/anthropic-messages-api.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/anthropic-messages-options.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/anthropic-prepare-tools.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/get-cache-control.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/text-editor_20250728.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/web-search_20250305.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/web-fetch-20250910.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/convert-to-anthropic-messages-prompt.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/code-execution_20250522.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/code-execution_20250825.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/map-anthropic-stop-reason.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/bash_20241022.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/bash_20250124.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/computer_20241022.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/computer_20250124.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/memory_20250818.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/text-editor_20241022.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/text-editor_20250124.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/tool/text-editor_20250429.ts","/turbopack/[project]/node_modules/@ai-sdk/anthropic/src/anthropic-tools.ts"],"sourcesContent":["import {\n  LanguageModelV2,\n  NoSuchModelError,\n  ProviderV2,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  generateId,\n  loadApiKey,\n  withoutTrailingSlash,\n  withUserAgentSuffix,\n} from '@ai-sdk/provider-utils';\nimport { VERSION } from './version';\nimport { AnthropicMessagesLanguageModel } from './anthropic-messages-language-model';\nimport { AnthropicMessagesModelId } from './anthropic-messages-options';\nimport { anthropicTools } from './anthropic-tools';\n\nexport interface AnthropicProvider extends ProviderV2 {\n  /**\nCreates a model for text generation.\n*/\n  (modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  /**\nCreates a model for text generation.\n*/\n  languageModel(modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  chat(modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  messages(modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  /**\nAnthropic-specific computer use tool.\n   */\n  tools: typeof anthropicTools;\n}\n\nexport interface AnthropicProviderSettings {\n  /**\nUse a different URL prefix for API calls, e.g. to use proxy servers.\nThe default prefix is `https://api.anthropic.com/v1`.\n   */\n  baseURL?: string;\n\n  /**\nAPI key that is being send using the `x-api-key` header.\nIt defaults to the `ANTHROPIC_API_KEY` environment variable.\n   */\n  apiKey?: string;\n\n  /**\nCustom headers to include in the requests.\n     */\n  headers?: Record<string, string>;\n\n  /**\nCustom fetch implementation. You can use it as a middleware to intercept requests,\nor to provide a custom fetch implementation for e.g. testing.\n    */\n  fetch?: FetchFunction;\n\n  generateId?: () => string;\n}\n\n/**\nCreate an Anthropic provider instance.\n */\nexport function createAnthropic(\n  options: AnthropicProviderSettings = {},\n): AnthropicProvider {\n  const baseURL =\n    withoutTrailingSlash(options.baseURL) ?? 'https://api.anthropic.com/v1';\n\n  const getHeaders = () =>\n    withUserAgentSuffix(\n      {\n        'anthropic-version': '2023-06-01',\n        'x-api-key': loadApiKey({\n          apiKey: options.apiKey,\n          environmentVariableName: 'ANTHROPIC_API_KEY',\n          description: 'Anthropic',\n        }),\n        ...options.headers,\n      },\n      `ai-sdk/anthropic/${VERSION}`,\n    );\n\n  const createChatModel = (modelId: AnthropicMessagesModelId) =>\n    new AnthropicMessagesLanguageModel(modelId, {\n      provider: 'anthropic.messages',\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      generateId: options.generateId ?? generateId,\n      supportedUrls: () => ({\n        'image/*': [/^https?:\\/\\/.*$/],\n      }),\n    });\n\n  const provider = function (modelId: AnthropicMessagesModelId) {\n    if (new.target) {\n      throw new Error(\n        'The Anthropic model function cannot be called with the new keyword.',\n      );\n    }\n\n    return createChatModel(modelId);\n  };\n\n  provider.languageModel = createChatModel;\n  provider.chat = createChatModel;\n  provider.messages = createChatModel;\n\n  provider.textEmbeddingModel = (modelId: string) => {\n    throw new NoSuchModelError({ modelId, modelType: 'textEmbeddingModel' });\n  };\n  provider.imageModel = (modelId: string) => {\n    throw new NoSuchModelError({ modelId, modelType: 'imageModel' });\n  };\n\n  provider.tools = anthropicTools;\n\n  return provider;\n}\n\n/**\nDefault Anthropic provider instance.\n */\nexport const anthropic = createAnthropic();\n","// Version string of this package injected at build time.\ndeclare const __PACKAGE_VERSION__: string | undefined;\nexport const VERSION: string =\n  typeof __PACKAGE_VERSION__ !== 'undefined'\n    ? __PACKAGE_VERSION__\n    : '0.0.0-test';\n","import {\n  JSONObject,\n  LanguageModelV2,\n  LanguageModelV2CallWarning,\n  LanguageModelV2Content,\n  LanguageModelV2FinishReason,\n  LanguageModelV2FunctionTool,\n  LanguageModelV2Prompt,\n  LanguageModelV2Source,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonResponseHandler,\n  FetchFunction,\n  generateId,\n  InferValidator,\n  parseProviderOptions,\n  ParseResult,\n  postJsonToApi,\n  Resolvable,\n  resolve,\n} from '@ai-sdk/provider-utils';\nimport { anthropicFailedResponseHandler } from './anthropic-error';\nimport {\n  anthropicMessagesChunkSchema,\n  anthropicMessagesResponseSchema,\n  AnthropicReasoningMetadata,\n  Citation,\n} from './anthropic-messages-api';\nimport {\n  AnthropicMessagesModelId,\n  anthropicProviderOptions,\n} from './anthropic-messages-options';\nimport { prepareTools } from './anthropic-prepare-tools';\nimport { convertToAnthropicMessagesPrompt } from './convert-to-anthropic-messages-prompt';\nimport { mapAnthropicStopReason } from './map-anthropic-stop-reason';\n\nfunction createCitationSource(\n  citation: Citation,\n  citationDocuments: Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }>,\n  generateId: () => string,\n): LanguageModelV2Source | undefined {\n  if (citation.type !== 'page_location' && citation.type !== 'char_location') {\n    return;\n  }\n\n  const documentInfo = citationDocuments[citation.document_index];\n\n  if (!documentInfo) {\n    return;\n  }\n\n  return {\n    type: 'source' as const,\n    sourceType: 'document' as const,\n    id: generateId(),\n    mediaType: documentInfo.mediaType,\n    title: citation.document_title ?? documentInfo.title,\n    filename: documentInfo.filename,\n    providerMetadata: {\n      anthropic:\n        citation.type === 'page_location'\n          ? {\n              citedText: citation.cited_text,\n              startPageNumber: citation.start_page_number,\n              endPageNumber: citation.end_page_number,\n            }\n          : {\n              citedText: citation.cited_text,\n              startCharIndex: citation.start_char_index,\n              endCharIndex: citation.end_char_index,\n            },\n    } satisfies SharedV2ProviderMetadata,\n  };\n}\n\ntype AnthropicMessagesConfig = {\n  provider: string;\n  baseURL: string;\n  headers: Resolvable<Record<string, string | undefined>>;\n  fetch?: FetchFunction;\n  buildRequestUrl?: (baseURL: string, isStreaming: boolean) => string;\n  transformRequestBody?: (args: Record<string, any>) => Record<string, any>;\n  supportedUrls?: () => LanguageModelV2['supportedUrls'];\n  generateId?: () => string;\n};\n\nexport class AnthropicMessagesLanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  readonly modelId: AnthropicMessagesModelId;\n\n  private readonly config: AnthropicMessagesConfig;\n  private readonly generateId: () => string;\n\n  constructor(\n    modelId: AnthropicMessagesModelId,\n    config: AnthropicMessagesConfig,\n  ) {\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = config.generateId ?? generateId;\n  }\n\n  supportsUrl(url: URL): boolean {\n    return url.protocol === 'https:';\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  get supportedUrls() {\n    return this.config.supportedUrls?.() ?? {};\n  }\n\n  private async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions,\n  }: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const warnings: LanguageModelV2CallWarning[] = [];\n\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'frequencyPenalty',\n      });\n    }\n\n    if (presencePenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'presencePenalty',\n      });\n    }\n\n    if (seed != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'seed',\n      });\n    }\n\n    if (responseFormat?.type === 'json') {\n      if (responseFormat.schema == null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'responseFormat',\n          details:\n            'JSON response format requires a schema. ' +\n            'The response format is ignored.',\n        });\n      } else if (tools != null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'tools',\n          details:\n            'JSON response format does not support tools. ' +\n            'The provided tools are ignored.',\n        });\n      }\n    }\n\n    const jsonResponseTool: LanguageModelV2FunctionTool | undefined =\n      responseFormat?.type === 'json' && responseFormat.schema != null\n        ? {\n            type: 'function',\n            name: 'json',\n            description: 'Respond with a JSON object.',\n            inputSchema: responseFormat.schema,\n          }\n        : undefined;\n\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions,\n      schema: anthropicProviderOptions,\n    });\n\n    const { prompt: messagesPrompt, betas: messagesBetas } =\n      await convertToAnthropicMessagesPrompt({\n        prompt,\n        sendReasoning: anthropicOptions?.sendReasoning ?? true,\n        warnings,\n      });\n\n    const isThinking = anthropicOptions?.thinking?.type === 'enabled';\n    const thinkingBudget = anthropicOptions?.thinking?.budgetTokens;\n\n    const maxOutputTokensForModel = getMaxOutputTokensForModel(this.modelId);\n    const maxTokens = maxOutputTokens ?? maxOutputTokensForModel;\n\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n\n      // standardized settings:\n      max_tokens: maxTokens,\n      temperature,\n      top_k: topK,\n      top_p: topP,\n      stop_sequences: stopSequences,\n\n      // provider specific settings:\n      ...(isThinking && {\n        thinking: { type: 'enabled', budget_tokens: thinkingBudget },\n      }),\n\n      // prompt:\n      system: messagesPrompt.system,\n      messages: messagesPrompt.messages,\n    };\n\n    if (isThinking) {\n      if (thinkingBudget == null) {\n        throw new UnsupportedFunctionalityError({\n          functionality: 'thinking requires a budget',\n        });\n      }\n\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'temperature',\n          details: 'temperature is not supported when thinking is enabled',\n        });\n      }\n\n      if (topK != null) {\n        baseArgs.top_k = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topK',\n          details: 'topK is not supported when thinking is enabled',\n        });\n      }\n\n      if (topP != null) {\n        baseArgs.top_p = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topP',\n          details: 'topP is not supported when thinking is enabled',\n        });\n      }\n\n      // adjust max tokens to account for thinking:\n      baseArgs.max_tokens = maxTokens + thinkingBudget;\n    }\n\n    // limit to max output tokens for model to enable model switching without breakages:\n    if (baseArgs.max_tokens > maxOutputTokensForModel) {\n      // only warn if max output tokens is provided as input:\n      if (maxOutputTokens != null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'maxOutputTokens',\n          details:\n            `${maxTokens} (maxOutputTokens + thinkingBudget) is greater than ${this.modelId} ${maxOutputTokensForModel} max output tokens. ` +\n            `The max output tokens have been limited to ${maxOutputTokensForModel}.`,\n        });\n      }\n      baseArgs.max_tokens = maxOutputTokensForModel;\n    }\n\n    const {\n      tools: anthropicTools,\n      toolChoice: anthropicToolChoice,\n      toolWarnings,\n      betas: toolsBetas,\n    } = await prepareTools(\n      jsonResponseTool != null\n        ? {\n            tools: [jsonResponseTool],\n            toolChoice: { type: 'tool', toolName: jsonResponseTool.name },\n            disableParallelToolUse: true,\n          }\n        : {\n            tools: tools ?? [],\n            toolChoice,\n            disableParallelToolUse: anthropicOptions?.disableParallelToolUse,\n          },\n    );\n\n    return {\n      args: {\n        ...baseArgs,\n        tools: anthropicTools,\n        tool_choice: anthropicToolChoice,\n      },\n      warnings: [...warnings, ...toolWarnings],\n      betas: new Set([...messagesBetas, ...toolsBetas]),\n      usesJsonResponseTool: jsonResponseTool != null,\n    };\n  }\n\n  private async getHeaders({\n    betas,\n    headers,\n  }: {\n    betas: Set<string>;\n    headers: Record<string, string | undefined> | undefined;\n  }) {\n    return combineHeaders(\n      await resolve(this.config.headers),\n      betas.size > 0 ? { 'anthropic-beta': Array.from(betas).join(',') } : {},\n      headers,\n    );\n  }\n\n  private buildRequestUrl(isStreaming: boolean): string {\n    return (\n      this.config.buildRequestUrl?.(this.config.baseURL, isStreaming) ??\n      `${this.config.baseURL}/messages`\n    );\n  }\n\n  private transformRequestBody(args: Record<string, any>): Record<string, any> {\n    return this.config.transformRequestBody?.(args) ?? args;\n  }\n\n  private extractCitationDocuments(prompt: LanguageModelV2Prompt): Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }> {\n    const isCitationPart = (part: {\n      type: string;\n      mediaType?: string;\n      providerOptions?: { anthropic?: { citations?: { enabled?: boolean } } };\n    }) => {\n      if (part.type !== 'file') {\n        return false;\n      }\n\n      if (\n        part.mediaType !== 'application/pdf' &&\n        part.mediaType !== 'text/plain'\n      ) {\n        return false;\n      }\n\n      const anthropic = part.providerOptions?.anthropic;\n      const citationsConfig = anthropic?.citations as\n        | { enabled?: boolean }\n        | undefined;\n      return citationsConfig?.enabled ?? false;\n    };\n\n    return prompt\n      .filter(message => message.role === 'user')\n      .flatMap(message => message.content)\n      .filter(isCitationPart)\n      .map(part => {\n        // TypeScript knows this is a file part due to our filter\n        const filePart = part as Extract<typeof part, { type: 'file' }>;\n        return {\n          title: filePart.filename ?? 'Untitled Document',\n          filename: filePart.filename,\n          mediaType: filePart.mediaType,\n        };\n      });\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args, warnings, betas, usesJsonResponseTool } =\n      await this.getArgs(options);\n\n    // Extract citation documents for response processing\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url: this.buildRequestUrl(false),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(args),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        anthropicMessagesResponseSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const content: Array<LanguageModelV2Content> = [];\n\n    // map response content to content array\n    for (const part of response.content) {\n      switch (part.type) {\n        case 'text': {\n          // when a json response tool is used, the tool call is returned as text,\n          // so we ignore the text content:\n          if (!usesJsonResponseTool) {\n            content.push({ type: 'text', text: part.text });\n\n            // Process citations if present\n            if (part.citations) {\n              for (const citation of part.citations) {\n                const source = createCitationSource(\n                  citation,\n                  citationDocuments,\n                  this.generateId,\n                );\n\n                if (source) {\n                  content.push(source);\n                }\n              }\n            }\n          }\n          break;\n        }\n        case 'thinking': {\n          content.push({\n            type: 'reasoning',\n            text: part.thinking,\n            providerMetadata: {\n              anthropic: {\n                signature: part.signature,\n              } satisfies AnthropicReasoningMetadata,\n            },\n          });\n          break;\n        }\n        case 'redacted_thinking': {\n          content.push({\n            type: 'reasoning',\n            text: '',\n            providerMetadata: {\n              anthropic: {\n                redactedData: part.data,\n              } satisfies AnthropicReasoningMetadata,\n            },\n          });\n          break;\n        }\n        case 'tool_use': {\n          content.push(\n            // when a json response tool is used, the tool call becomes the text:\n            usesJsonResponseTool\n              ? {\n                  type: 'text',\n                  text: JSON.stringify(part.input),\n                }\n              : {\n                  type: 'tool-call',\n                  toolCallId: part.id,\n                  toolName: part.name,\n                  input: JSON.stringify(part.input),\n                },\n          );\n\n          break;\n        }\n        case 'server_tool_use': {\n          // code execution 20250825 needs mapping:\n          if (\n            part.name === 'text_editor_code_execution' ||\n            part.name === 'bash_code_execution'\n          ) {\n            content.push({\n              type: 'tool-call',\n              toolCallId: part.id,\n              toolName: 'code_execution',\n              input: JSON.stringify({ type: part.name, ...part.input }),\n              providerExecuted: true,\n            });\n          } else if (\n            part.name === 'web_search' ||\n            part.name === 'code_execution' ||\n            part.name === 'web_fetch'\n          ) {\n            content.push({\n              type: 'tool-call',\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input),\n              providerExecuted: true,\n            });\n          }\n\n          break;\n        }\n        case 'web_fetch_tool_result': {\n          if (part.content.type === 'web_fetch_result') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_fetch',\n              result: {\n                type: 'web_fetch_result',\n                url: part.content.url,\n                retrievedAt: part.content.retrieved_at,\n                content: {\n                  type: part.content.content.type,\n                  title: part.content.content.title,\n                  citations: part.content.content.citations,\n                  source: {\n                    type: part.content.content.source.type,\n                    mediaType: part.content.content.source.media_type,\n                    data: part.content.content.source.data,\n                  },\n                },\n              },\n              providerExecuted: true,\n            });\n          } else if (part.content.type === 'web_fetch_tool_result_error') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_fetch',\n              isError: true,\n              result: {\n                type: 'web_fetch_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n        case 'web_search_tool_result': {\n          if (Array.isArray(part.content)) {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_search',\n              result: part.content.map(result => ({\n                url: result.url,\n                title: result.title,\n                pageAge: result.page_age ?? null,\n                encryptedContent: result.encrypted_content,\n                type: result.type,\n              })),\n              providerExecuted: true,\n            });\n\n            for (const result of part.content) {\n              content.push({\n                type: 'source',\n                sourceType: 'url',\n                id: this.generateId(),\n                url: result.url,\n                title: result.title,\n                providerMetadata: {\n                  anthropic: {\n                    pageAge: result.page_age ?? null,\n                  },\n                },\n              });\n            }\n          } else {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_search',\n              isError: true,\n              result: {\n                type: 'web_search_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n\n        // code execution 20250522:\n        case 'code_execution_tool_result': {\n          if (part.content.type === 'code_execution_result') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'code_execution',\n              result: {\n                type: part.content.type,\n                stdout: part.content.stdout,\n                stderr: part.content.stderr,\n                return_code: part.content.return_code,\n              },\n              providerExecuted: true,\n            });\n          } else if (part.content.type === 'code_execution_tool_result_error') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'code_execution',\n              isError: true,\n              result: {\n                type: 'code_execution_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n\n        // code execution 20250825:\n        case 'bash_code_execution_tool_result':\n        case 'text_editor_code_execution_tool_result': {\n          content.push({\n            type: 'tool-result',\n            toolCallId: part.tool_use_id,\n            toolName: 'code_execution',\n            result: part.content,\n            providerExecuted: true,\n          });\n          break;\n        }\n      }\n    }\n\n    return {\n      content,\n      finishReason: mapAnthropicStopReason({\n        finishReason: response.stop_reason,\n        isJsonResponseFromTool: usesJsonResponseTool,\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        cachedInputTokens: response.usage.cache_read_input_tokens ?? undefined,\n      },\n      request: { body: args },\n      response: {\n        id: response.id ?? undefined,\n        modelId: response.model ?? undefined,\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n      warnings,\n      providerMetadata: {\n        anthropic: {\n          usage: response.usage as JSONObject,\n          cacheCreationInputTokens:\n            response.usage.cache_creation_input_tokens ?? null,\n          stopSequence: response.stop_sequence ?? null,\n        },\n      },\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings, betas, usesJsonResponseTool } =\n      await this.getArgs(options);\n\n    // Extract citation documents for response processing\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n\n    const body = { ...args, stream: true };\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url: this.buildRequestUrl(true),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(body),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(\n        anthropicMessagesChunkSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    let finishReason: LanguageModelV2FinishReason = 'unknown';\n    const usage: LanguageModelV2Usage = {\n      inputTokens: undefined,\n      outputTokens: undefined,\n      totalTokens: undefined,\n    };\n\n    const contentBlocks: Record<\n      number,\n      | {\n          type: 'tool-call';\n          toolCallId: string;\n          toolName: string;\n          input: string;\n          providerExecuted?: boolean;\n          firstDelta: boolean;\n        }\n      | { type: 'text' | 'reasoning' }\n    > = {};\n\n    let rawUsage: JSONObject | undefined = undefined;\n    let cacheCreationInputTokens: number | null = null;\n    let stopSequence: string | null = null;\n\n    let blockType:\n      | 'text'\n      | 'thinking'\n      | 'tool_use'\n      | 'redacted_thinking'\n      | 'server_tool_use'\n      | 'web_fetch_tool_result'\n      | 'web_search_tool_result'\n      | 'code_execution_tool_result'\n      | 'text_editor_code_execution_tool_result'\n      | 'bash_code_execution_tool_result'\n      | undefined = undefined;\n\n    const generateId = this.generateId;\n\n    return {\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<InferValidator<typeof anthropicMessagesChunkSchema>>,\n          LanguageModelV2StreamPart\n        >({\n          start(controller) {\n            controller.enqueue({ type: 'stream-start', warnings });\n          },\n\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: 'raw', rawValue: chunk.rawValue });\n            }\n\n            if (!chunk.success) {\n              controller.enqueue({ type: 'error', error: chunk.error });\n              return;\n            }\n\n            const value = chunk.value;\n\n            switch (value.type) {\n              case 'ping': {\n                return; // ignored\n              }\n\n              case 'content_block_start': {\n                const contentBlockType = value.content_block.type;\n\n                blockType = contentBlockType;\n\n                switch (contentBlockType) {\n                  case 'text': {\n                    contentBlocks[value.index] = { type: 'text' };\n                    controller.enqueue({\n                      type: 'text-start',\n                      id: String(value.index),\n                    });\n                    return;\n                  }\n\n                  case 'thinking': {\n                    contentBlocks[value.index] = { type: 'reasoning' };\n                    controller.enqueue({\n                      type: 'reasoning-start',\n                      id: String(value.index),\n                    });\n                    return;\n                  }\n\n                  case 'redacted_thinking': {\n                    contentBlocks[value.index] = { type: 'reasoning' };\n                    controller.enqueue({\n                      type: 'reasoning-start',\n                      id: String(value.index),\n                      providerMetadata: {\n                        anthropic: {\n                          redactedData: value.content_block.data,\n                        } satisfies AnthropicReasoningMetadata,\n                      },\n                    });\n                    return;\n                  }\n\n                  case 'tool_use': {\n                    contentBlocks[value.index] = usesJsonResponseTool\n                      ? { type: 'text' }\n                      : {\n                          type: 'tool-call',\n                          toolCallId: value.content_block.id,\n                          toolName: value.content_block.name,\n                          input: '',\n                          firstDelta: true,\n                        };\n\n                    controller.enqueue(\n                      usesJsonResponseTool\n                        ? { type: 'text-start', id: String(value.index) }\n                        : {\n                            type: 'tool-input-start',\n                            id: value.content_block.id,\n                            toolName: value.content_block.name,\n                          },\n                    );\n                    return;\n                  }\n\n                  case 'server_tool_use': {\n                    if (\n                      [\n                        'web_fetch',\n                        'web_search',\n                        // code execution 20250825:\n                        'code_execution',\n                        // code execution 20250825 text editor:\n                        'text_editor_code_execution',\n                        // code execution 20250825 bash:\n                        'bash_code_execution',\n                      ].includes(value.content_block.name)\n                    ) {\n                      contentBlocks[value.index] = {\n                        type: 'tool-call',\n                        toolCallId: value.content_block.id,\n                        toolName: value.content_block.name,\n                        input: '',\n                        providerExecuted: true,\n                        firstDelta: true,\n                      };\n\n                      // map tool names for the code execution 20250825 tool:\n                      const mappedToolName =\n                        value.content_block.name ===\n                          'text_editor_code_execution' ||\n                        value.content_block.name === 'bash_code_execution'\n                          ? 'code_execution'\n                          : value.content_block.name;\n\n                      controller.enqueue({\n                        type: 'tool-input-start',\n                        id: value.content_block.id,\n                        toolName: mappedToolName,\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'web_fetch_tool_result': {\n                    const part = value.content_block;\n\n                    if (part.content.type === 'web_fetch_result') {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_fetch',\n                        result: {\n                          type: 'web_fetch_result',\n                          url: part.content.url,\n                          retrievedAt: part.content.retrieved_at,\n                          content: {\n                            type: part.content.content.type,\n                            title: part.content.content.title,\n                            citations: part.content.content.citations,\n                            source: {\n                              type: part.content.content.source.type,\n                              mediaType: part.content.content.source.media_type,\n                              data: part.content.content.source.data,\n                            },\n                          },\n                        },\n                      });\n                    } else if (\n                      part.content.type === 'web_fetch_tool_result_error'\n                    ) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_fetch',\n                        isError: true,\n                        result: {\n                          type: 'web_fetch_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'web_search_tool_result': {\n                    const part = value.content_block;\n\n                    if (Array.isArray(part.content)) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_search',\n                        result: part.content.map(result => ({\n                          url: result.url,\n                          title: result.title,\n                          pageAge: result.page_age ?? null,\n                          encryptedContent: result.encrypted_content,\n                          type: result.type,\n                        })),\n                        providerExecuted: true,\n                      });\n\n                      for (const result of part.content) {\n                        controller.enqueue({\n                          type: 'source',\n                          sourceType: 'url',\n                          id: generateId(),\n                          url: result.url,\n                          title: result.title,\n                          providerMetadata: {\n                            anthropic: {\n                              pageAge: result.page_age ?? null,\n                            },\n                          },\n                        });\n                      }\n                    } else {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_search',\n                        isError: true,\n                        result: {\n                          type: 'web_search_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n                    return;\n                  }\n\n                  // code execution 20250522:\n                  case 'code_execution_tool_result': {\n                    const part = value.content_block;\n\n                    if (part.content.type === 'code_execution_result') {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'code_execution',\n                        result: {\n                          type: part.content.type,\n                          stdout: part.content.stdout,\n                          stderr: part.content.stderr,\n                          return_code: part.content.return_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    } else if (\n                      part.content.type === 'code_execution_tool_result_error'\n                    ) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'code_execution',\n                        isError: true,\n                        result: {\n                          type: 'code_execution_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  // code execution 20250825:\n                  case 'bash_code_execution_tool_result':\n                  case 'text_editor_code_execution_tool_result': {\n                    const part = value.content_block;\n                    controller.enqueue({\n                      type: 'tool-result',\n                      toolCallId: part.tool_use_id,\n                      toolName: 'code_execution',\n                      result: part.content,\n                      providerExecuted: true,\n                    });\n                    return;\n                  }\n\n                  default: {\n                    const _exhaustiveCheck: never = contentBlockType;\n                    throw new Error(\n                      `Unsupported content block type: ${_exhaustiveCheck}`,\n                    );\n                  }\n                }\n              }\n\n              case 'content_block_stop': {\n                // when finishing a tool call block, send the full tool call:\n                if (contentBlocks[value.index] != null) {\n                  const contentBlock = contentBlocks[value.index];\n\n                  switch (contentBlock.type) {\n                    case 'text': {\n                      controller.enqueue({\n                        type: 'text-end',\n                        id: String(value.index),\n                      });\n                      break;\n                    }\n\n                    case 'reasoning': {\n                      controller.enqueue({\n                        type: 'reasoning-end',\n                        id: String(value.index),\n                      });\n                      break;\n                    }\n\n                    case 'tool-call':\n                      // when a json response tool is used, the tool call is returned as text,\n                      // so we ignore the tool call content:\n                      if (!usesJsonResponseTool) {\n                        controller.enqueue({\n                          type: 'tool-input-end',\n                          id: contentBlock.toolCallId,\n                        });\n\n                        // map tool names for the code execution 20250825 tool:\n                        const toolName =\n                          contentBlock.toolName ===\n                            'text_editor_code_execution' ||\n                          contentBlock.toolName === 'bash_code_execution'\n                            ? 'code_execution'\n                            : contentBlock.toolName;\n\n                        controller.enqueue({\n                          type: 'tool-call',\n                          toolCallId: contentBlock.toolCallId,\n                          toolName,\n                          input: contentBlock.input,\n                          providerExecuted: contentBlock.providerExecuted,\n                        });\n                      }\n                      break;\n                  }\n\n                  delete contentBlocks[value.index];\n                }\n\n                blockType = undefined; // reset block type\n\n                return;\n              }\n\n              case 'content_block_delta': {\n                const deltaType = value.delta.type;\n                switch (deltaType) {\n                  case 'text_delta': {\n                    // when a json response tool is used, the tool call is returned as text,\n                    // so we ignore the text content:\n                    if (usesJsonResponseTool) {\n                      return;\n                    }\n\n                    controller.enqueue({\n                      type: 'text-delta',\n                      id: String(value.index),\n                      delta: value.delta.text,\n                    });\n\n                    return;\n                  }\n\n                  case 'thinking_delta': {\n                    controller.enqueue({\n                      type: 'reasoning-delta',\n                      id: String(value.index),\n                      delta: value.delta.thinking,\n                    });\n\n                    return;\n                  }\n\n                  case 'signature_delta': {\n                    // signature are only supported on thinking blocks:\n                    if (blockType === 'thinking') {\n                      controller.enqueue({\n                        type: 'reasoning-delta',\n                        id: String(value.index),\n                        delta: '',\n                        providerMetadata: {\n                          anthropic: {\n                            signature: value.delta.signature,\n                          } satisfies AnthropicReasoningMetadata,\n                        },\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'input_json_delta': {\n                    const contentBlock = contentBlocks[value.index];\n                    let delta = value.delta.partial_json;\n\n                    // skip empty deltas to enable replacing the first character\n                    // in the code execution 20250825 tool.\n                    if (delta.length === 0) {\n                      return;\n                    }\n\n                    if (usesJsonResponseTool) {\n                      if (contentBlock?.type !== 'text') {\n                        return;\n                      }\n\n                      controller.enqueue({\n                        type: 'text-delta',\n                        id: String(value.index),\n                        delta,\n                      });\n                    } else {\n                      if (contentBlock?.type !== 'tool-call') {\n                        return;\n                      }\n\n                      // for the code execution 20250825, we need to add\n                      // the type to the delta and change the tool name.\n                      if (\n                        contentBlock.firstDelta &&\n                        (contentBlock.toolName === 'bash_code_execution' ||\n                          contentBlock.toolName ===\n                            'text_editor_code_execution')\n                      ) {\n                        delta = `{\"type\": \"${contentBlock.toolName}\",${delta.substring(1)}`;\n                      }\n\n                      controller.enqueue({\n                        type: 'tool-input-delta',\n                        id: contentBlock.toolCallId,\n                        delta,\n                      });\n\n                      contentBlock.input += delta;\n                      contentBlock.firstDelta = false;\n                    }\n\n                    return;\n                  }\n\n                  case 'citations_delta': {\n                    const citation = value.delta.citation;\n                    const source = createCitationSource(\n                      citation,\n                      citationDocuments,\n                      generateId,\n                    );\n\n                    if (source) {\n                      controller.enqueue(source);\n                    }\n\n                    return;\n                  }\n\n                  default: {\n                    const _exhaustiveCheck: never = deltaType;\n                    throw new Error(\n                      `Unsupported delta type: ${_exhaustiveCheck}`,\n                    );\n                  }\n                }\n              }\n\n              case 'message_start': {\n                usage.inputTokens = value.message.usage.input_tokens;\n                usage.cachedInputTokens =\n                  value.message.usage.cache_read_input_tokens ?? undefined;\n\n                rawUsage = {\n                  ...(value.message.usage as JSONObject),\n                };\n\n                cacheCreationInputTokens =\n                  value.message.usage.cache_creation_input_tokens ?? null;\n\n                controller.enqueue({\n                  type: 'response-metadata',\n                  id: value.message.id ?? undefined,\n                  modelId: value.message.model ?? undefined,\n                });\n\n                return;\n              }\n\n              case 'message_delta': {\n                usage.outputTokens = value.usage.output_tokens;\n                usage.totalTokens =\n                  (usage.inputTokens ?? 0) + (value.usage.output_tokens ?? 0);\n\n                finishReason = mapAnthropicStopReason({\n                  finishReason: value.delta.stop_reason,\n                  isJsonResponseFromTool: usesJsonResponseTool,\n                });\n\n                stopSequence = value.delta.stop_sequence ?? null;\n\n                rawUsage = {\n                  ...rawUsage,\n                  ...(value.usage as JSONObject),\n                };\n\n                return;\n              }\n\n              case 'message_stop': {\n                controller.enqueue({\n                  type: 'finish',\n                  finishReason,\n                  usage,\n                  providerMetadata: {\n                    anthropic: {\n                      usage: rawUsage ?? null,\n                      cacheCreationInputTokens,\n                      stopSequence,\n                    },\n                  },\n                });\n                return;\n              }\n\n              case 'error': {\n                controller.enqueue({ type: 'error', error: value.error });\n                return;\n              }\n\n              default: {\n                const _exhaustiveCheck: never = value;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          },\n        }),\n      ),\n      request: { body },\n      response: { headers: responseHeaders },\n    };\n  }\n}\n\n// see https://docs.claude.com/en/docs/about-claude/models/overview#model-comparison-table\nfunction getMaxOutputTokensForModel(modelId: string) {\n  if (\n    modelId.includes('claude-sonnet-4-') ||\n    modelId.includes('claude-3-7-sonnet') ||\n    modelId.includes('claude-haiku-4-5')\n  ) {\n    return 64000;\n  } else if (modelId.includes('claude-opus-4-')) {\n    return 32000;\n  } else if (modelId.includes('claude-3-5-haiku')) {\n    return 8192;\n  } else {\n    return 4096; // old models, e.g. Claude Haiku 3\n  }\n}\n","import {\n  createJsonErrorResponseHandler,\n  InferValidator,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const anthropicErrorDataSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      type: z.literal('error'),\n      error: z.object({\n        type: z.string(),\n        message: z.string(),\n      }),\n    }),\n  ),\n);\n\nexport type AnthropicErrorData = InferValidator<\n  typeof anthropicErrorDataSchema\n>;\n\nexport const anthropicFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: anthropicErrorDataSchema,\n  errorToMessage: data => data.error.message,\n});\n","import { JSONSchema7 } from '@ai-sdk/provider';\nimport { InferValidator, lazySchema, zodSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport type AnthropicMessagesPrompt = {\n  system: Array<AnthropicTextContent> | undefined;\n  messages: AnthropicMessage[];\n};\n\nexport type AnthropicMessage = AnthropicUserMessage | AnthropicAssistantMessage;\n\nexport type AnthropicCacheControl = {\n  type: 'ephemeral';\n};\n\nexport interface AnthropicUserMessage {\n  role: 'user';\n  content: Array<\n    | AnthropicTextContent\n    | AnthropicImageContent\n    | AnthropicDocumentContent\n    | AnthropicToolResultContent\n  >;\n}\n\nexport interface AnthropicAssistantMessage {\n  role: 'assistant';\n  content: Array<\n    | AnthropicTextContent\n    | AnthropicThinkingContent\n    | AnthropicRedactedThinkingContent\n    | AnthropicToolCallContent\n    | AnthropicServerToolUseContent\n    | AnthropicCodeExecutionToolResultContent\n    | AnthropicWebFetchToolResultContent\n    | AnthropicWebSearchToolResultContent\n    | AnthropicBashCodeExecutionToolResultContent\n    | AnthropicTextEditorCodeExecutionToolResultContent\n  >;\n}\n\nexport interface AnthropicTextContent {\n  type: 'text';\n  text: string;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicThinkingContent {\n  type: 'thinking';\n  thinking: string;\n  signature: string;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicRedactedThinkingContent {\n  type: 'redacted_thinking';\n  data: string;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\ntype AnthropicContentSource =\n  | {\n      type: 'base64';\n      media_type: string;\n      data: string;\n    }\n  | {\n      type: 'url';\n      url: string;\n    }\n  | {\n      type: 'text';\n      media_type: 'text/plain';\n      data: string;\n    };\n\nexport interface AnthropicImageContent {\n  type: 'image';\n  source: AnthropicContentSource;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicDocumentContent {\n  type: 'document';\n  source: AnthropicContentSource;\n  title?: string;\n  context?: string;\n  citations?: { enabled: boolean };\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicToolCallContent {\n  type: 'tool_use';\n  id: string;\n  name: string;\n  input: unknown;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicServerToolUseContent {\n  type: 'server_tool_use';\n  id: string;\n  name:\n    | 'web_fetch'\n    | 'web_search'\n    // code execution 20250522:\n    | 'code_execution'\n    // code execution 20250825:\n    | 'bash_code_execution'\n    | 'text_editor_code_execution';\n  input: unknown;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicToolResultContent {\n  type: 'tool_result';\n  tool_use_id: string;\n  content:\n    | string\n    | Array<\n        AnthropicTextContent | AnthropicImageContent | AnthropicDocumentContent\n      >;\n  is_error: boolean | undefined;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicWebSearchToolResultContent {\n  type: 'web_search_tool_result';\n  tool_use_id: string;\n  content: Array<{\n    url: string;\n    title: string;\n    page_age: string | null;\n    encrypted_content: string;\n    type: string;\n  }>;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\n// code execution results for code_execution_20250522 tool:\nexport interface AnthropicCodeExecutionToolResultContent {\n  type: 'code_execution_tool_result';\n  tool_use_id: string;\n  content: {\n    type: 'code_execution_result';\n    stdout: string;\n    stderr: string;\n    return_code: number;\n  };\n  cache_control: AnthropicCacheControl | undefined;\n}\n\n// text editor code execution results for code_execution_20250825 tool:\nexport interface AnthropicTextEditorCodeExecutionToolResultContent {\n  type: 'text_editor_code_execution_tool_result';\n  tool_use_id: string;\n  content:\n    | {\n        type: 'text_editor_code_execution_tool_result_error';\n        error_code: string;\n      }\n    | {\n        type: 'text_editor_code_execution_create_result';\n        is_file_update: boolean;\n      }\n    | {\n        type: 'text_editor_code_execution_view_result';\n        content: string;\n        file_type: string;\n        num_lines: number | null;\n        start_line: number | null;\n        total_lines: number | null;\n      }\n    | {\n        type: 'text_editor_code_execution_str_replace_result';\n        lines: string[] | null;\n        new_lines: number | null;\n        new_start: number | null;\n        old_lines: number | null;\n        old_start: number | null;\n      };\n  cache_control: AnthropicCacheControl | undefined;\n}\n\n// bash code execution results for code_execution_20250825 tool:\nexport interface AnthropicBashCodeExecutionToolResultContent {\n  type: 'bash_code_execution_tool_result';\n  tool_use_id: string;\n  content:\n    | {\n        type: 'bash_code_execution_result';\n        stdout: string;\n        stderr: string;\n        return_code: number;\n        content: {\n          type: 'bash_code_execution_output';\n          file_id: string;\n        }[];\n      }\n    | {\n        type: 'bash_code_execution_tool_result_error';\n        error_code: string;\n      };\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicWebFetchToolResultContent {\n  type: 'web_fetch_tool_result';\n  tool_use_id: string;\n  content: {\n    type: 'web_fetch_result';\n    url: string;\n    retrieved_at: string | null;\n    content: {\n      type: 'document';\n      title: string | null;\n      citations?: { enabled: boolean };\n      source:\n        | { type: 'base64'; media_type: 'application/pdf'; data: string }\n        | { type: 'text'; media_type: 'text/plain'; data: string };\n    };\n  };\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport type AnthropicTool =\n  | {\n      name: string;\n      description: string | undefined;\n      input_schema: JSONSchema7;\n      cache_control: AnthropicCacheControl | undefined;\n    }\n  | {\n      type: 'code_execution_20250522';\n      name: string;\n    }\n  | {\n      type: 'code_execution_20250825';\n      name: string;\n    }\n  | {\n      name: string;\n      type: 'computer_20250124' | 'computer_20241022';\n      display_width_px: number;\n      display_height_px: number;\n      display_number: number;\n    }\n  | {\n      name: string;\n      type:\n        | 'text_editor_20250124'\n        | 'text_editor_20241022'\n        | 'text_editor_20250429';\n    }\n  | {\n      name: string;\n      type: 'text_editor_20250728';\n      max_characters?: number;\n    }\n  | {\n      name: string;\n      type: 'bash_20250124' | 'bash_20241022';\n    }\n  | {\n      name: string;\n      type: 'memory_20250818';\n    }\n  | {\n      type: 'web_fetch_20250910';\n      name: string;\n      max_uses?: number;\n      allowed_domains?: string[];\n      blocked_domains?: string[];\n      citations?: { enabled: boolean };\n      max_content_tokens?: number;\n    }\n  | {\n      type: 'web_search_20250305';\n      name: string;\n      max_uses?: number;\n      allowed_domains?: string[];\n      blocked_domains?: string[];\n      user_location?: {\n        type: 'approximate';\n        city?: string;\n        region?: string;\n        country?: string;\n        timezone?: string;\n      };\n    };\n\nexport type AnthropicToolChoice =\n  | { type: 'auto' | 'any'; disable_parallel_tool_use?: boolean }\n  | { type: 'tool'; name: string; disable_parallel_tool_use?: boolean };\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nexport const anthropicMessagesResponseSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      type: z.literal('message'),\n      id: z.string().nullish(),\n      model: z.string().nullish(),\n      content: z.array(\n        z.discriminatedUnion('type', [\n          z.object({\n            type: z.literal('text'),\n            text: z.string(),\n            citations: z\n              .array(\n                z.discriminatedUnion('type', [\n                  z.object({\n                    type: z.literal('web_search_result_location'),\n                    cited_text: z.string(),\n                    url: z.string(),\n                    title: z.string(),\n                    encrypted_index: z.string(),\n                  }),\n                  z.object({\n                    type: z.literal('page_location'),\n                    cited_text: z.string(),\n                    document_index: z.number(),\n                    document_title: z.string().nullable(),\n                    start_page_number: z.number(),\n                    end_page_number: z.number(),\n                  }),\n                  z.object({\n                    type: z.literal('char_location'),\n                    cited_text: z.string(),\n                    document_index: z.number(),\n                    document_title: z.string().nullable(),\n                    start_char_index: z.number(),\n                    end_char_index: z.number(),\n                  }),\n                ]),\n              )\n              .optional(),\n          }),\n          z.object({\n            type: z.literal('thinking'),\n            thinking: z.string(),\n            signature: z.string(),\n          }),\n          z.object({\n            type: z.literal('redacted_thinking'),\n            data: z.string(),\n          }),\n          z.object({\n            type: z.literal('tool_use'),\n            id: z.string(),\n            name: z.string(),\n            input: z.unknown(),\n          }),\n          z.object({\n            type: z.literal('server_tool_use'),\n            id: z.string(),\n            name: z.string(),\n            input: z.record(z.string(), z.unknown()).nullish(),\n          }),\n          z.object({\n            type: z.literal('web_fetch_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.object({\n                type: z.literal('web_fetch_result'),\n                url: z.string(),\n                retrieved_at: z.string(),\n                content: z.object({\n                  type: z.literal('document'),\n                  title: z.string().nullable(),\n                  citations: z.object({ enabled: z.boolean() }).optional(),\n                  source: z.object({\n                    type: z.literal('text'),\n                    media_type: z.string(),\n                    data: z.string(),\n                  }),\n                }),\n              }),\n              z.object({\n                type: z.literal('web_fetch_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          z.object({\n            type: z.literal('web_search_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.array(\n                z.object({\n                  type: z.literal('web_search_result'),\n                  url: z.string(),\n                  title: z.string(),\n                  encrypted_content: z.string(),\n                  page_age: z.string().nullish(),\n                }),\n              ),\n              z.object({\n                type: z.literal('web_search_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // code execution results for code_execution_20250522 tool:\n          z.object({\n            type: z.literal('code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.object({\n                type: z.literal('code_execution_result'),\n                stdout: z.string(),\n                stderr: z.string(),\n                return_code: z.number(),\n              }),\n              z.object({\n                type: z.literal('code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // bash code execution results for code_execution_20250825 tool:\n          z.object({\n            type: z.literal('bash_code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('bash_code_execution_result'),\n                content: z.array(\n                  z.object({\n                    type: z.literal('bash_code_execution_output'),\n                    file_id: z.string(),\n                  }),\n                ),\n                stdout: z.string(),\n                stderr: z.string(),\n                return_code: z.number(),\n              }),\n              z.object({\n                type: z.literal('bash_code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // text editor code execution results for code_execution_20250825 tool:\n          z.object({\n            type: z.literal('text_editor_code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('text_editor_code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n              z.object({\n                type: z.literal('text_editor_code_execution_view_result'),\n                content: z.string(),\n                file_type: z.string(),\n                num_lines: z.number().nullable(),\n                start_line: z.number().nullable(),\n                total_lines: z.number().nullable(),\n              }),\n              z.object({\n                type: z.literal('text_editor_code_execution_create_result'),\n                is_file_update: z.boolean(),\n              }),\n              z.object({\n                type: z.literal(\n                  'text_editor_code_execution_str_replace_result',\n                ),\n                lines: z.array(z.string()).nullable(),\n                new_lines: z.number().nullable(),\n                new_start: z.number().nullable(),\n                old_lines: z.number().nullable(),\n                old_start: z.number().nullable(),\n              }),\n            ]),\n          }),\n        ]),\n      ),\n      stop_reason: z.string().nullish(),\n      stop_sequence: z.string().nullish(),\n      usage: z.looseObject({\n        input_tokens: z.number(),\n        output_tokens: z.number(),\n        cache_creation_input_tokens: z.number().nullish(),\n        cache_read_input_tokens: z.number().nullish(),\n      }),\n    }),\n  ),\n);\n\n// limited version of the schema, focused on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nexport const anthropicMessagesChunkSchema = lazySchema(() =>\n  zodSchema(\n    z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('message_start'),\n        message: z.object({\n          id: z.string().nullish(),\n          model: z.string().nullish(),\n          usage: z.looseObject({\n            input_tokens: z.number(),\n            cache_creation_input_tokens: z.number().nullish(),\n            cache_read_input_tokens: z.number().nullish(),\n          }),\n        }),\n      }),\n      z.object({\n        type: z.literal('content_block_start'),\n        index: z.number(),\n        content_block: z.discriminatedUnion('type', [\n          z.object({\n            type: z.literal('text'),\n            text: z.string(),\n          }),\n          z.object({\n            type: z.literal('thinking'),\n            thinking: z.string(),\n          }),\n          z.object({\n            type: z.literal('tool_use'),\n            id: z.string(),\n            name: z.string(),\n          }),\n          z.object({\n            type: z.literal('redacted_thinking'),\n            data: z.string(),\n          }),\n          z.object({\n            type: z.literal('server_tool_use'),\n            id: z.string(),\n            name: z.string(),\n            input: z.record(z.string(), z.unknown()).nullish(),\n          }),\n          z.object({\n            type: z.literal('web_fetch_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.object({\n                type: z.literal('web_fetch_result'),\n                url: z.string(),\n                retrieved_at: z.string(),\n                content: z.object({\n                  type: z.literal('document'),\n                  title: z.string().nullable(),\n                  citations: z.object({ enabled: z.boolean() }).optional(),\n                  source: z.object({\n                    type: z.literal('text'),\n                    media_type: z.string(),\n                    data: z.string(),\n                  }),\n                }),\n              }),\n              z.object({\n                type: z.literal('web_fetch_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          z.object({\n            type: z.literal('web_search_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.array(\n                z.object({\n                  type: z.literal('web_search_result'),\n                  url: z.string(),\n                  title: z.string(),\n                  encrypted_content: z.string(),\n                  page_age: z.string().nullish(),\n                }),\n              ),\n              z.object({\n                type: z.literal('web_search_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // code execution results for code_execution_20250522 tool:\n          z.object({\n            type: z.literal('code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.object({\n                type: z.literal('code_execution_result'),\n                stdout: z.string(),\n                stderr: z.string(),\n                return_code: z.number(),\n              }),\n              z.object({\n                type: z.literal('code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // bash code execution results for code_execution_20250825 tool:\n          z.object({\n            type: z.literal('bash_code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('bash_code_execution_result'),\n                content: z.array(\n                  z.object({\n                    type: z.literal('bash_code_execution_output'),\n                    file_id: z.string(),\n                  }),\n                ),\n                stdout: z.string(),\n                stderr: z.string(),\n                return_code: z.number(),\n              }),\n              z.object({\n                type: z.literal('bash_code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // text editor code execution results for code_execution_20250825 tool:\n          z.object({\n            type: z.literal('text_editor_code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('text_editor_code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n              z.object({\n                type: z.literal('text_editor_code_execution_view_result'),\n                content: z.string(),\n                file_type: z.string(),\n                num_lines: z.number().nullable(),\n                start_line: z.number().nullable(),\n                total_lines: z.number().nullable(),\n              }),\n              z.object({\n                type: z.literal('text_editor_code_execution_create_result'),\n                is_file_update: z.boolean(),\n              }),\n              z.object({\n                type: z.literal(\n                  'text_editor_code_execution_str_replace_result',\n                ),\n                lines: z.array(z.string()).nullable(),\n                new_lines: z.number().nullable(),\n                new_start: z.number().nullable(),\n                old_lines: z.number().nullable(),\n                old_start: z.number().nullable(),\n              }),\n            ]),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('content_block_delta'),\n        index: z.number(),\n        delta: z.discriminatedUnion('type', [\n          z.object({\n            type: z.literal('input_json_delta'),\n            partial_json: z.string(),\n          }),\n          z.object({\n            type: z.literal('text_delta'),\n            text: z.string(),\n          }),\n          z.object({\n            type: z.literal('thinking_delta'),\n            thinking: z.string(),\n          }),\n          z.object({\n            type: z.literal('signature_delta'),\n            signature: z.string(),\n          }),\n          z.object({\n            type: z.literal('citations_delta'),\n            citation: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('web_search_result_location'),\n                cited_text: z.string(),\n                url: z.string(),\n                title: z.string(),\n                encrypted_index: z.string(),\n              }),\n              z.object({\n                type: z.literal('page_location'),\n                cited_text: z.string(),\n                document_index: z.number(),\n                document_title: z.string().nullable(),\n                start_page_number: z.number(),\n                end_page_number: z.number(),\n              }),\n              z.object({\n                type: z.literal('char_location'),\n                cited_text: z.string(),\n                document_index: z.number(),\n                document_title: z.string().nullable(),\n                start_char_index: z.number(),\n                end_char_index: z.number(),\n              }),\n            ]),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('content_block_stop'),\n        index: z.number(),\n      }),\n      z.object({\n        type: z.literal('error'),\n        error: z.object({\n          type: z.string(),\n          message: z.string(),\n        }),\n      }),\n      z.object({\n        type: z.literal('message_delta'),\n        delta: z.object({\n          stop_reason: z.string().nullish(),\n          stop_sequence: z.string().nullish(),\n        }),\n        usage: z.looseObject({\n          output_tokens: z.number(),\n          cache_creation_input_tokens: z.number().nullish(),\n        }),\n      }),\n      z.object({\n        type: z.literal('message_stop'),\n      }),\n      z.object({\n        type: z.literal('ping'),\n      }),\n    ]),\n  ),\n);\n\nexport const anthropicReasoningMetadataSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      signature: z.string().optional(),\n      redactedData: z.string().optional(),\n    }),\n  ),\n);\n\nexport type AnthropicReasoningMetadata = InferValidator<\n  typeof anthropicReasoningMetadataSchema\n>;\n\nexport type Citation = NonNullable<\n  (InferValidator<typeof anthropicMessagesResponseSchema>['content'][number] & {\n    type: 'text';\n  })['citations']\n>[number];\n","import { z } from 'zod/v4';\n\n// https://docs.claude.com/en/docs/about-claude/models/overview\nexport type AnthropicMessagesModelId =\n  | 'claude-haiku-4-5'\n  | 'claude-haiku-4-5-20251001'\n  | 'claude-sonnet-4-5'\n  | 'claude-sonnet-4-5-20250929'\n  | 'claude-opus-4-1'\n  | 'claude-opus-4-0'\n  | 'claude-sonnet-4-0'\n  | 'claude-opus-4-1-20250805'\n  | 'claude-opus-4-20250514'\n  | 'claude-sonnet-4-20250514'\n  | 'claude-3-7-sonnet-latest'\n  | 'claude-3-7-sonnet-20250219'\n  | 'claude-3-5-haiku-latest'\n  | 'claude-3-5-haiku-20241022'\n  | 'claude-3-haiku-20240307'\n  | (string & {});\n\n/**\n * Anthropic file part provider options for document-specific features.\n * These options apply to individual file parts (documents).\n */\nexport const anthropicFilePartProviderOptions = z.object({\n  /**\n   * Citation configuration for this document.\n   * When enabled, this document will generate citations in the response.\n   */\n  citations: z\n    .object({\n      /**\n       * Enable citations for this document\n       */\n      enabled: z.boolean(),\n    })\n    .optional(),\n\n  /**\n   * Custom title for the document.\n   * If not provided, the filename will be used.\n   */\n  title: z.string().optional(),\n\n  /**\n   * Context about the document that will be passed to the model\n   * but not used towards cited content.\n   * Useful for storing document metadata as text or stringified JSON.\n   */\n  context: z.string().optional(),\n});\n\nexport type AnthropicFilePartProviderOptions = z.infer<\n  typeof anthropicFilePartProviderOptions\n>;\n\nexport const anthropicProviderOptions = z.object({\n  sendReasoning: z.boolean().optional(),\n\n  thinking: z\n    .object({\n      type: z.union([z.literal('enabled'), z.literal('disabled')]),\n      budgetTokens: z.number().optional(),\n    })\n    .optional(),\n\n  /**\n   * Whether to disable parallel function calling during tool use. Default is false.\n   * When set to true, Claude will use at most one tool per response.\n   */\n  disableParallelToolUse: z.boolean().optional(),\n\n  /**\n   * Cache control settings for this message.\n   * See https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching\n   */\n  cacheControl: z\n    .object({\n      type: z.literal('ephemeral'),\n      ttl: z.union([z.literal('5m'), z.literal('1h')]).optional(),\n    })\n    .optional(),\n});\n\nexport type AnthropicProviderOptions = z.infer<typeof anthropicProviderOptions>;\n","import {\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { AnthropicTool, AnthropicToolChoice } from './anthropic-messages-api';\nimport { getCacheControl } from './get-cache-control';\nimport { textEditor_20250728ArgsSchema } from './tool/text-editor_20250728';\nimport { webSearch_20250305ArgsSchema } from './tool/web-search_20250305';\nimport { webFetch_20250910ArgsSchema } from './tool/web-fetch-20250910';\nimport { validateTypes } from '@ai-sdk/provider-utils';\n\nexport async function prepareTools({\n  tools,\n  toolChoice,\n  disableParallelToolUse,\n}: {\n  tools: LanguageModelV2CallOptions['tools'];\n  toolChoice?: LanguageModelV2CallOptions['toolChoice'];\n  disableParallelToolUse?: boolean;\n}): Promise<{\n  tools: Array<AnthropicTool> | undefined;\n  toolChoice: AnthropicToolChoice | undefined;\n  toolWarnings: LanguageModelV2CallWarning[];\n  betas: Set<string>;\n}> {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  tools = tools?.length ? tools : undefined;\n\n  const toolWarnings: LanguageModelV2CallWarning[] = [];\n  const betas = new Set<string>();\n\n  if (tools == null) {\n    return { tools: undefined, toolChoice: undefined, toolWarnings, betas };\n  }\n\n  const anthropicTools: AnthropicTool[] = [];\n\n  for (const tool of tools) {\n    switch (tool.type) {\n      case 'function': {\n        const cacheControl = getCacheControl(tool.providerOptions);\n\n        anthropicTools.push({\n          name: tool.name,\n          description: tool.description,\n          input_schema: tool.inputSchema,\n          cache_control: cacheControl,\n        });\n        break;\n      }\n\n      case 'provider-defined': {\n        switch (tool.id) {\n          case 'anthropic.code_execution_20250522': {\n            betas.add('code-execution-2025-05-22');\n            anthropicTools.push({\n              type: 'code_execution_20250522',\n              name: 'code_execution',\n            });\n            break;\n          }\n          case 'anthropic.code_execution_20250825': {\n            betas.add('code-execution-2025-08-25');\n            anthropicTools.push({\n              type: 'code_execution_20250825',\n              name: 'code_execution',\n            });\n            break;\n          }\n          case 'anthropic.computer_20250124': {\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'computer',\n              type: 'computer_20250124',\n              display_width_px: tool.args.displayWidthPx as number,\n              display_height_px: tool.args.displayHeightPx as number,\n              display_number: tool.args.displayNumber as number,\n            });\n            break;\n          }\n          case 'anthropic.computer_20241022': {\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'computer',\n              type: 'computer_20241022',\n              display_width_px: tool.args.displayWidthPx as number,\n              display_height_px: tool.args.displayHeightPx as number,\n              display_number: tool.args.displayNumber as number,\n            });\n            break;\n          }\n          case 'anthropic.text_editor_20250124': {\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'str_replace_editor',\n              type: 'text_editor_20250124',\n            });\n            break;\n          }\n          case 'anthropic.text_editor_20241022': {\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'str_replace_editor',\n              type: 'text_editor_20241022',\n            });\n            break;\n          }\n          case 'anthropic.text_editor_20250429': {\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'str_replace_based_edit_tool',\n              type: 'text_editor_20250429',\n            });\n            break;\n          }\n          case 'anthropic.text_editor_20250728': {\n            const args = await validateTypes({\n              value: tool.args,\n              schema: textEditor_20250728ArgsSchema,\n            });\n            anthropicTools.push({\n              name: 'str_replace_based_edit_tool',\n              type: 'text_editor_20250728',\n              max_characters: args.maxCharacters,\n            });\n            break;\n          }\n          case 'anthropic.bash_20250124': {\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'bash',\n              type: 'bash_20250124',\n            });\n            break;\n          }\n          case 'anthropic.bash_20241022': {\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'bash',\n              type: 'bash_20241022',\n            });\n            break;\n          }\n          case 'anthropic.memory_20250818': {\n            betas.add('context-management-2025-06-27');\n            anthropicTools.push({\n              name: 'memory',\n              type: 'memory_20250818',\n            });\n            break;\n          }\n          case 'anthropic.web_fetch_20250910': {\n            betas.add('web-fetch-2025-09-10');\n            const args = await validateTypes({\n              value: tool.args,\n              schema: webFetch_20250910ArgsSchema,\n            });\n            anthropicTools.push({\n              type: 'web_fetch_20250910',\n              name: 'web_fetch',\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              citations: args.citations,\n              max_content_tokens: args.maxContentTokens,\n            });\n            break;\n          }\n          case 'anthropic.web_search_20250305': {\n            const args = await validateTypes({\n              value: tool.args,\n              schema: webSearch_20250305ArgsSchema,\n            });\n            anthropicTools.push({\n              type: 'web_search_20250305',\n              name: 'web_search',\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              user_location: args.userLocation,\n            });\n            break;\n          }\n\n          default: {\n            toolWarnings.push({ type: 'unsupported-tool', tool });\n            break;\n          }\n        }\n        break;\n      }\n\n      default: {\n        toolWarnings.push({ type: 'unsupported-tool', tool });\n        break;\n      }\n    }\n  }\n\n  if (toolChoice == null) {\n    return {\n      tools: anthropicTools,\n      toolChoice: disableParallelToolUse\n        ? { type: 'auto', disable_parallel_tool_use: disableParallelToolUse }\n        : undefined,\n      toolWarnings,\n      betas,\n    };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'auto',\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    case 'required':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'any',\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    case 'none':\n      // Anthropic does not support 'none' tool choice, so we remove the tools:\n      return { tools: undefined, toolChoice: undefined, toolWarnings, betas };\n    case 'tool':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'tool',\n          name: toolChoice.toolName,\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`,\n      });\n    }\n  }\n}\n","import { SharedV2ProviderMetadata } from '@ai-sdk/provider';\nimport { AnthropicCacheControl } from './anthropic-messages-api';\n\nexport function getCacheControl(\n  providerMetadata: SharedV2ProviderMetadata | undefined,\n): AnthropicCacheControl | undefined {\n  const anthropic = providerMetadata?.anthropic;\n\n  // allow both cacheControl and cache_control:\n  const cacheControlValue = anthropic?.cacheControl ?? anthropic?.cache_control;\n\n  // Pass through value assuming it is of the correct type.\n  // The Anthropic API will validate the value.\n  return cacheControlValue as AnthropicCacheControl | undefined;\n}\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { lazySchema, zodSchema } from '@ai-sdk/provider-utils';\n\nexport const textEditor_20250728ArgsSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      maxCharacters: z.number().optional(),\n    }),\n  ),\n);\n\nconst textEditor_20250728InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.enum(['view', 'create', 'str_replace', 'insert']),\n      path: z.string(),\n      file_text: z.string().optional(),\n      insert_line: z.number().int().optional(),\n      new_str: z.string().optional(),\n      old_str: z.string().optional(),\n      view_range: z.array(z.number().int()).optional(),\n    }),\n  ),\n);\n\nconst factory = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`.\n     * Note: `undo_edit` is not supported in Claude 4 models.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {\n    /**\n     * Optional parameter to control truncation when viewing large files. Only compatible with text_editor_20250728 and later versions.\n     */\n    maxCharacters?: number;\n  }\n>({\n  id: 'anthropic.text_editor_20250728',\n  name: 'str_replace_based_edit_tool',\n  inputSchema: textEditor_20250728InputSchema,\n});\n\nexport const textEditor_20250728 = (\n  args: Parameters<typeof factory>[0] = {}, // default\n) => {\n  return factory(args);\n};\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const webSearch_20250305ArgsSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      maxUses: z.number().optional(),\n      allowedDomains: z.array(z.string()).optional(),\n      blockedDomains: z.array(z.string()).optional(),\n      userLocation: z\n        .object({\n          type: z.literal('approximate'),\n          city: z.string().optional(),\n          region: z.string().optional(),\n          country: z.string().optional(),\n          timezone: z.string().optional(),\n        })\n        .optional(),\n    }),\n  ),\n);\n\nexport const webSearch_20250305OutputSchema = lazySchema(() =>\n  zodSchema(\n    z.array(\n      z.object({\n        url: z.string(),\n        title: z.string(),\n        pageAge: z.string().nullable(),\n        encryptedContent: z.string(),\n        type: z.literal('web_search_result'),\n      }),\n    ),\n  ),\n);\n\nconst webSearch_20250305InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      query: z.string(),\n    }),\n  ),\n);\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The search query to execute.\n     */\n    query: string;\n  },\n  Array<{\n    type: 'web_search_result';\n\n    /**\n     * The URL of the source page.\n     */\n    url: string;\n\n    /**\n     * The title of the source page.\n     */\n    title: string;\n\n    /**\n     * When the site was last updated\n     */\n    pageAge: string | null;\n\n    /**\n     * Encrypted content that must be passed back in multi-turn conversations for citations\n     */\n    encryptedContent: string;\n  }>,\n  {\n    /**\n     * Maximum number of web searches Claude can perform during the conversation.\n     */\n    maxUses?: number;\n\n    /**\n     * Optional list of domains that Claude is allowed to search.\n     */\n    allowedDomains?: string[];\n\n    /**\n     * Optional list of domains that Claude should avoid when searching.\n     */\n    blockedDomains?: string[];\n\n    /**\n     * Optional user location information to provide geographically relevant search results.\n     */\n    userLocation?: {\n      /**\n       * The type of location (must be approximate)\n       */\n      type: 'approximate';\n\n      /**\n       * The city name\n       */\n      city?: string;\n\n      /**\n       * The region or state\n       */\n      region?: string;\n\n      /**\n       * The country\n       */\n      country?: string;\n\n      /**\n       * The IANA timezone ID.\n       */\n      timezone?: string;\n    };\n  }\n>({\n  id: 'anthropic.web_search_20250305',\n  name: 'web_search',\n  inputSchema: webSearch_20250305InputSchema,\n  outputSchema: webSearch_20250305OutputSchema,\n});\n\nexport const webSearch_20250305 = (\n  args: Parameters<typeof factory>[0] = {}, // default\n) => {\n  return factory(args);\n};\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const webFetch_20250910ArgsSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      maxUses: z.number().optional(),\n      allowedDomains: z.array(z.string()).optional(),\n      blockedDomains: z.array(z.string()).optional(),\n      citations: z.object({ enabled: z.boolean() }).optional(),\n      maxContentTokens: z.number().optional(),\n    }),\n  ),\n);\n\nexport const webFetch_20250910OutputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      type: z.literal('web_fetch_result'),\n      url: z.string(),\n      content: z.object({\n        type: z.literal('document'),\n        title: z.string(),\n        citations: z.object({ enabled: z.boolean() }).optional(),\n        source: z.union([\n          z.object({\n            type: z.literal('base64'),\n            mediaType: z.literal('application/pdf'),\n            data: z.string(),\n          }),\n          z.object({\n            type: z.literal('text'),\n            mediaType: z.literal('text/plain'),\n            data: z.string(),\n          }),\n        ]),\n      }),\n      retrievedAt: z.string().nullable(),\n    }),\n  ),\n);\n\nconst webFetch_20250910InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      url: z.string(),\n    }),\n  ),\n);\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The URL to fetch.\n     */\n    url: string;\n  },\n  {\n    type: 'web_fetch_result';\n\n    /**\n     * Fetched content URL\n     */\n    url: string;\n\n    /**\n     * Fetched content.\n     */\n    content: {\n      type: 'document';\n\n      /**\n       * Title of the document\n       */\n      title: string;\n\n      /**\n       * Citation configuration for the document\n       */\n      citations?: { enabled: boolean };\n\n      source:\n        | {\n            type: 'base64';\n            mediaType: 'application/pdf';\n            data: string;\n          }\n        | {\n            type: 'text';\n            mediaType: 'text/plain';\n            data: string;\n          };\n    };\n\n    /**\n     * ISO 8601 timestamp when the content was retrieved\n     */\n    retrievedAt: string | null;\n  },\n  {\n    /**\n     * The maxUses parameter limits the number of web fetches performed\n     */\n    maxUses?: number;\n\n    /**\n     * Only fetch from these domains\n     */\n    allowedDomains?: string[];\n\n    /**\n     * Never fetch from these domains\n     */\n    blockedDomains?: string[];\n\n    /**\n     * Unlike web search where citations are always enabled, citations are optional for\n     * web fetch. Set \"citations\": {\"enabled\": true} to enable Claude to cite specific passages\n     * from fetched documents.\n     */\n    citations?: {\n      enabled: boolean;\n    };\n\n    /**\n     * The maxContentTokens parameter limits the amount of content that will be included in the context.\n     */\n    maxContentTokens?: number;\n  }\n>({\n  id: 'anthropic.web_fetch_20250910',\n  name: 'web_fetch',\n  inputSchema: webFetch_20250910InputSchema,\n  outputSchema: webFetch_20250910OutputSchema,\n});\n\nexport const webFetch_20250910 = (\n  args: Parameters<typeof factory>[0] = {}, // default\n) => {\n  return factory(args);\n};\n","import {\n  LanguageModelV2CallWarning,\n  LanguageModelV2DataContent,\n  LanguageModelV2Message,\n  LanguageModelV2Prompt,\n  SharedV2ProviderMetadata,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  convertToBase64,\n  parseProviderOptions,\n  validateTypes,\n} from '@ai-sdk/provider-utils';\nimport {\n  AnthropicAssistantMessage,\n  AnthropicMessagesPrompt,\n  anthropicReasoningMetadataSchema,\n  AnthropicToolResultContent,\n  AnthropicUserMessage,\n  AnthropicWebFetchToolResultContent,\n} from './anthropic-messages-api';\nimport { anthropicFilePartProviderOptions } from './anthropic-messages-options';\nimport { getCacheControl } from './get-cache-control';\nimport { codeExecution_20250522OutputSchema } from './tool/code-execution_20250522';\nimport { codeExecution_20250825OutputSchema } from './tool/code-execution_20250825';\nimport { webFetch_20250910OutputSchema } from './tool/web-fetch-20250910';\nimport { webSearch_20250305OutputSchema } from './tool/web-search_20250305';\n\nfunction convertToString(data: LanguageModelV2DataContent): string {\n  if (typeof data === 'string') {\n    return Buffer.from(data, 'base64').toString('utf-8');\n  }\n\n  if (data instanceof Uint8Array) {\n    return new TextDecoder().decode(data);\n  }\n\n  if (data instanceof URL) {\n    throw new UnsupportedFunctionalityError({\n      functionality: 'URL-based text documents are not supported for citations',\n    });\n  }\n\n  throw new UnsupportedFunctionalityError({\n    functionality: `unsupported data type for text documents: ${typeof data}`,\n  });\n}\n\nexport async function convertToAnthropicMessagesPrompt({\n  prompt,\n  sendReasoning,\n  warnings,\n}: {\n  prompt: LanguageModelV2Prompt;\n  sendReasoning: boolean;\n  warnings: LanguageModelV2CallWarning[];\n}): Promise<{\n  prompt: AnthropicMessagesPrompt;\n  betas: Set<string>;\n}> {\n  const betas = new Set<string>();\n  const blocks = groupIntoBlocks(prompt);\n\n  let system: AnthropicMessagesPrompt['system'] = undefined;\n  const messages: AnthropicMessagesPrompt['messages'] = [];\n\n  async function shouldEnableCitations(\n    providerMetadata: SharedV2ProviderMetadata | undefined,\n  ): Promise<boolean> {\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions,\n    });\n\n    return anthropicOptions?.citations?.enabled ?? false;\n  }\n\n  async function getDocumentMetadata(\n    providerMetadata: SharedV2ProviderMetadata | undefined,\n  ): Promise<{ title?: string; context?: string }> {\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions,\n    });\n\n    return {\n      title: anthropicOptions?.title,\n      context: anthropicOptions?.context,\n    };\n  }\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    const isLastBlock = i === blocks.length - 1;\n    const type = block.type;\n\n    switch (type) {\n      case 'system': {\n        if (system != null) {\n          throw new UnsupportedFunctionalityError({\n            functionality:\n              'Multiple system messages that are separated by user/assistant messages',\n          });\n        }\n\n        system = block.messages.map(({ content, providerOptions }) => ({\n          type: 'text',\n          text: content,\n          cache_control: getCacheControl(providerOptions),\n        }));\n\n        break;\n      }\n\n      case 'user': {\n        // combines all user and tool messages in this block into a single message:\n        const anthropicContent: AnthropicUserMessage['content'] = [];\n\n        for (const message of block.messages) {\n          const { role, content } = message;\n          switch (role) {\n            case 'user': {\n              for (let j = 0; j < content.length; j++) {\n                const part = content[j];\n\n                // cache control: first add cache control from part.\n                // for the last part of a message,\n                // check also if the message has cache control.\n                const isLastPart = j === content.length - 1;\n\n                const cacheControl =\n                  getCacheControl(part.providerOptions) ??\n                  (isLastPart\n                    ? getCacheControl(message.providerOptions)\n                    : undefined);\n\n                switch (part.type) {\n                  case 'text': {\n                    anthropicContent.push({\n                      type: 'text',\n                      text: part.text,\n                      cache_control: cacheControl,\n                    });\n                    break;\n                  }\n\n                  case 'file': {\n                    if (part.mediaType.startsWith('image/')) {\n                      anthropicContent.push({\n                        type: 'image',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'base64',\n                                media_type:\n                                  part.mediaType === 'image/*'\n                                    ? 'image/jpeg'\n                                    : part.mediaType,\n                                data: convertToBase64(part.data),\n                              },\n                        cache_control: cacheControl,\n                      });\n                    } else if (part.mediaType === 'application/pdf') {\n                      betas.add('pdfs-2024-09-25');\n\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions,\n                      );\n\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions,\n                      );\n\n                      anthropicContent.push({\n                        type: 'document',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'base64',\n                                media_type: 'application/pdf',\n                                data: convertToBase64(part.data),\n                              },\n                        title: metadata.title ?? part.filename,\n                        ...(metadata.context && { context: metadata.context }),\n                        ...(enableCitations && {\n                          citations: { enabled: true },\n                        }),\n                        cache_control: cacheControl,\n                      });\n                    } else if (part.mediaType === 'text/plain') {\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions,\n                      );\n\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions,\n                      );\n\n                      anthropicContent.push({\n                        type: 'document',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'text',\n                                media_type: 'text/plain',\n                                data: convertToString(part.data),\n                              },\n                        title: metadata.title ?? part.filename,\n                        ...(metadata.context && { context: metadata.context }),\n                        ...(enableCitations && {\n                          citations: { enabled: true },\n                        }),\n                        cache_control: cacheControl,\n                      });\n                    } else {\n                      throw new UnsupportedFunctionalityError({\n                        functionality: `media type: ${part.mediaType}`,\n                      });\n                    }\n\n                    break;\n                  }\n                }\n              }\n\n              break;\n            }\n            case 'tool': {\n              for (let i = 0; i < content.length; i++) {\n                const part = content[i];\n\n                // cache control: first add cache control from part.\n                // for the last part of a message,\n                // check also if the message has cache control.\n                const isLastPart = i === content.length - 1;\n\n                const cacheControl =\n                  getCacheControl(part.providerOptions) ??\n                  (isLastPart\n                    ? getCacheControl(message.providerOptions)\n                    : undefined);\n\n                const output = part.output;\n                let contentValue: AnthropicToolResultContent['content'];\n                switch (output.type) {\n                  case 'content':\n                    contentValue = output.value.map(contentPart => {\n                      switch (contentPart.type) {\n                        case 'text':\n                          return {\n                            type: 'text',\n                            text: contentPart.text,\n                            cache_control: undefined,\n                          };\n                        case 'media': {\n                          if (contentPart.mediaType.startsWith('image/')) {\n                            return {\n                              type: 'image',\n                              source: {\n                                type: 'base64',\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data,\n                              },\n                              cache_control: undefined,\n                            };\n                          }\n\n                          if (contentPart.mediaType === 'application/pdf') {\n                            betas.add('pdfs-2024-09-25');\n\n                            return {\n                              type: 'document',\n                              source: {\n                                type: 'base64',\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data,\n                              },\n                              cache_control: undefined,\n                            };\n                          }\n\n                          throw new UnsupportedFunctionalityError({\n                            functionality: `media type: ${contentPart.mediaType}`,\n                          });\n                        }\n                      }\n                    });\n                    break;\n                  case 'text':\n                  case 'error-text':\n                    contentValue = output.value;\n                    break;\n                  case 'json':\n                  case 'error-json':\n                  default:\n                    contentValue = JSON.stringify(output.value);\n                    break;\n                }\n\n                anthropicContent.push({\n                  type: 'tool_result',\n                  tool_use_id: part.toolCallId,\n                  content: contentValue,\n                  is_error:\n                    output.type === 'error-text' || output.type === 'error-json'\n                      ? true\n                      : undefined,\n                  cache_control: cacheControl,\n                });\n              }\n\n              break;\n            }\n            default: {\n              const _exhaustiveCheck: never = role;\n              throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n            }\n          }\n        }\n\n        messages.push({ role: 'user', content: anthropicContent });\n\n        break;\n      }\n\n      case 'assistant': {\n        // combines multiple assistant messages in this block into a single message:\n        const anthropicContent: AnthropicAssistantMessage['content'] = [];\n\n        for (let j = 0; j < block.messages.length; j++) {\n          const message = block.messages[j];\n          const isLastMessage = j === block.messages.length - 1;\n          const { content } = message;\n\n          for (let k = 0; k < content.length; k++) {\n            const part = content[k];\n            const isLastContentPart = k === content.length - 1;\n\n            // cache control: first add cache control from part.\n            // for the last part of a message,\n            // check also if the message has cache control.\n            const cacheControl =\n              getCacheControl(part.providerOptions) ??\n              (isLastContentPart\n                ? getCacheControl(message.providerOptions)\n                : undefined);\n\n            switch (part.type) {\n              case 'text': {\n                anthropicContent.push({\n                  type: 'text',\n                  text:\n                    // trim the last text part if it's the last message in the block\n                    // because Anthropic does not allow trailing whitespace\n                    // in pre-filled assistant responses\n                    isLastBlock && isLastMessage && isLastContentPart\n                      ? part.text.trim()\n                      : part.text,\n\n                  cache_control: cacheControl,\n                });\n                break;\n              }\n\n              case 'reasoning': {\n                if (sendReasoning) {\n                  const reasoningMetadata = await parseProviderOptions({\n                    provider: 'anthropic',\n                    providerOptions: part.providerOptions,\n                    schema: anthropicReasoningMetadataSchema,\n                  });\n\n                  if (reasoningMetadata != null) {\n                    if (reasoningMetadata.signature != null) {\n                      anthropicContent.push({\n                        type: 'thinking',\n                        thinking: part.text,\n                        signature: reasoningMetadata.signature,\n                        cache_control: cacheControl,\n                      });\n                    } else if (reasoningMetadata.redactedData != null) {\n                      anthropicContent.push({\n                        type: 'redacted_thinking',\n                        data: reasoningMetadata.redactedData,\n                        cache_control: cacheControl,\n                      });\n                    } else {\n                      warnings.push({\n                        type: 'other',\n                        message: 'unsupported reasoning metadata',\n                      });\n                    }\n                  } else {\n                    warnings.push({\n                      type: 'other',\n                      message: 'unsupported reasoning metadata',\n                    });\n                  }\n                } else {\n                  warnings.push({\n                    type: 'other',\n                    message:\n                      'sending reasoning content is disabled for this model',\n                  });\n                }\n                break;\n              }\n\n              case 'tool-call': {\n                if (part.providerExecuted) {\n                  // code execution 20250825:\n                  if (\n                    part.toolName === 'code_execution' &&\n                    part.input != null &&\n                    typeof part.input === 'object' &&\n                    'type' in part.input &&\n                    typeof part.input.type === 'string' &&\n                    (part.input.type === 'bash_code_execution' ||\n                      part.input.type === 'text_editor_code_execution')\n                  ) {\n                    anthropicContent.push({\n                      type: 'server_tool_use',\n                      id: part.toolCallId,\n                      name: part.input.type, // map back to subtool name\n                      input: part.input,\n                      cache_control: cacheControl,\n                    });\n                  } else if (\n                    part.toolName === 'code_execution' || // code execution 20250522\n                    part.toolName === 'web_fetch' ||\n                    part.toolName === 'web_search'\n                  ) {\n                    anthropicContent.push({\n                      type: 'server_tool_use',\n                      id: part.toolCallId,\n                      name: part.toolName,\n                      input: part.input,\n                      cache_control: cacheControl,\n                    });\n                  } else {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool call for tool ${part.toolName} is not supported`,\n                    });\n                  }\n\n                  break;\n                }\n\n                anthropicContent.push({\n                  type: 'tool_use',\n                  id: part.toolCallId,\n                  name: part.toolName,\n                  input: part.input,\n                  cache_control: cacheControl,\n                });\n                break;\n              }\n\n              case 'tool-result': {\n                if (part.toolName === 'code_execution') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  if (\n                    output.value == null ||\n                    typeof output.value !== 'object' ||\n                    !('type' in output.value) ||\n                    typeof output.value.type !== 'string'\n                  ) {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output value is not a valid code execution result for tool ${part.toolName}`,\n                    });\n                    break;\n                  }\n\n                  // to distinguish between code execution 20250522 and 20250825,\n                  // we check if a type property is present in the output.value\n                  if (output.value.type === 'code_execution_result') {\n                    // code execution 20250522\n                    const codeExecutionOutput = await validateTypes({\n                      value: output.value,\n                      schema: codeExecution_20250522OutputSchema,\n                    });\n\n                    anthropicContent.push({\n                      type: 'code_execution_tool_result',\n                      tool_use_id: part.toolCallId,\n                      content: {\n                        type: codeExecutionOutput.type,\n                        stdout: codeExecutionOutput.stdout,\n                        stderr: codeExecutionOutput.stderr,\n                        return_code: codeExecutionOutput.return_code,\n                      },\n                      cache_control: cacheControl,\n                    });\n                  } else {\n                    // code execution 20250825\n                    const codeExecutionOutput = await validateTypes({\n                      value: output.value,\n                      schema: codeExecution_20250825OutputSchema,\n                    });\n\n                    anthropicContent.push(\n                      codeExecutionOutput.type ===\n                        'bash_code_execution_result' ||\n                        codeExecutionOutput.type ===\n                          'bash_code_execution_tool_result_error'\n                        ? {\n                            type: 'bash_code_execution_tool_result',\n                            tool_use_id: part.toolCallId,\n                            cache_control: cacheControl,\n                            content: codeExecutionOutput,\n                          }\n                        : {\n                            type: 'text_editor_code_execution_tool_result',\n                            tool_use_id: part.toolCallId,\n                            cache_control: cacheControl,\n                            content: codeExecutionOutput,\n                          },\n                    );\n                  }\n                  break;\n                }\n\n                if (part.toolName === 'web_fetch') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  const webFetchOutput = await validateTypes({\n                    value: output.value,\n                    schema: webFetch_20250910OutputSchema,\n                  });\n\n                  anthropicContent.push({\n                    type: 'web_fetch_tool_result',\n                    tool_use_id: part.toolCallId,\n                    content: {\n                      type: 'web_fetch_result',\n                      url: webFetchOutput.url,\n                      retrieved_at: webFetchOutput.retrievedAt,\n                      content: {\n                        type: 'document',\n                        title: webFetchOutput.content.title,\n                        citations: webFetchOutput.content.citations,\n                        source: {\n                          type: webFetchOutput.content.source.type,\n                          media_type: webFetchOutput.content.source.mediaType,\n                          data: webFetchOutput.content.source.data,\n                        } as AnthropicWebFetchToolResultContent['content']['content']['source'],\n                      },\n                    },\n                    cache_control: cacheControl,\n                  });\n\n                  break;\n                }\n\n                if (part.toolName === 'web_search') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  const webSearchOutput = await validateTypes({\n                    value: output.value,\n                    schema: webSearch_20250305OutputSchema,\n                  });\n\n                  anthropicContent.push({\n                    type: 'web_search_tool_result',\n                    tool_use_id: part.toolCallId,\n                    content: webSearchOutput.map(result => ({\n                      url: result.url,\n                      title: result.title,\n                      page_age: result.pageAge,\n                      encrypted_content: result.encryptedContent,\n                      type: result.type,\n                    })),\n                    cache_control: cacheControl,\n                  });\n\n                  break;\n                }\n\n                warnings.push({\n                  type: 'other',\n                  message: `provider executed tool result for tool ${part.toolName} is not supported`,\n                });\n\n                break;\n              }\n            }\n          }\n        }\n\n        messages.push({ role: 'assistant', content: anthropicContent });\n\n        break;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = type;\n        throw new Error(`content type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return {\n    prompt: { system, messages },\n    betas,\n  };\n}\n\ntype SystemBlock = {\n  type: 'system';\n  messages: Array<LanguageModelV2Message & { role: 'system' }>;\n};\ntype AssistantBlock = {\n  type: 'assistant';\n  messages: Array<LanguageModelV2Message & { role: 'assistant' }>;\n};\ntype UserBlock = {\n  type: 'user';\n  messages: Array<LanguageModelV2Message & { role: 'user' | 'tool' }>;\n};\n\nfunction groupIntoBlocks(\n  prompt: LanguageModelV2Prompt,\n): Array<SystemBlock | AssistantBlock | UserBlock> {\n  const blocks: Array<SystemBlock | AssistantBlock | UserBlock> = [];\n  let currentBlock: SystemBlock | AssistantBlock | UserBlock | undefined =\n    undefined;\n\n  for (const message of prompt) {\n    const { role } = message;\n    switch (role) {\n      case 'system': {\n        if (currentBlock?.type !== 'system') {\n          currentBlock = { type: 'system', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'assistant': {\n        if (currentBlock?.type !== 'assistant') {\n          currentBlock = { type: 'assistant', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'user': {\n        if (currentBlock?.type !== 'user') {\n          currentBlock = { type: 'user', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'tool': {\n        if (currentBlock?.type !== 'user') {\n          currentBlock = { type: 'user', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      default: {\n        const _exhaustiveCheck: never = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return blocks;\n}\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const codeExecution_20250522OutputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      type: z.literal('code_execution_result'),\n      stdout: z.string(),\n      stderr: z.string(),\n      return_code: z.number(),\n    }),\n  ),\n);\n\nconst codeExecution_20250522InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      code: z.string(),\n    }),\n  ),\n);\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The Python code to execute.\n     */\n    code: string;\n  },\n  {\n    type: 'code_execution_result';\n    stdout: string;\n    stderr: string;\n    return_code: number;\n  },\n  {}\n>({\n  id: 'anthropic.code_execution_20250522',\n  name: 'code_execution',\n  inputSchema: codeExecution_20250522InputSchema,\n  outputSchema: codeExecution_20250522OutputSchema,\n});\n\nexport const codeExecution_20250522 = (\n  args: Parameters<typeof factory>[0] = {},\n) => {\n  return factory(args);\n};\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const codeExecution_20250825OutputSchema = lazySchema(() =>\n  zodSchema(\n    z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('bash_code_execution_result'),\n        content: z.array(\n          z.object({\n            type: z.literal('bash_code_execution_output'),\n            file_id: z.string(),\n          }),\n        ),\n        stdout: z.string(),\n        stderr: z.string(),\n        return_code: z.number(),\n      }),\n      z.object({\n        type: z.literal('bash_code_execution_tool_result_error'),\n        error_code: z.string(),\n      }),\n      z.object({\n        type: z.literal('text_editor_code_execution_tool_result_error'),\n        error_code: z.string(),\n      }),\n      z.object({\n        type: z.literal('text_editor_code_execution_view_result'),\n        content: z.string(),\n        file_type: z.string(),\n        num_lines: z.number().nullable(),\n        start_line: z.number().nullable(),\n        total_lines: z.number().nullable(),\n      }),\n      z.object({\n        type: z.literal('text_editor_code_execution_create_result'),\n        is_file_update: z.boolean(),\n      }),\n      z.object({\n        type: z.literal('text_editor_code_execution_str_replace_result'),\n        lines: z.array(z.string()).nullable(),\n        new_lines: z.number().nullable(),\n        new_start: z.number().nullable(),\n        old_lines: z.number().nullable(),\n        old_start: z.number().nullable(),\n      }),\n    ]),\n  ),\n);\n\nexport const codeExecution_20250825InputSchema = lazySchema(() =>\n  zodSchema(\n    z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('bash_code_execution'),\n        command: z.string(),\n      }),\n      z.discriminatedUnion('command', [\n        z.object({\n          type: z.literal('text_editor_code_execution'),\n          command: z.literal('view'),\n          path: z.string(),\n        }),\n        z.object({\n          type: z.literal('text_editor_code_execution'),\n          command: z.literal('create'),\n          path: z.string(),\n          file_text: z.string().nullish(),\n        }),\n        z.object({\n          type: z.literal('text_editor_code_execution'),\n          command: z.literal('str_replace'),\n          path: z.string(),\n          old_str: z.string(),\n          new_str: z.string(),\n        }),\n      ]),\n    ]),\n  ),\n);\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  | {\n      type: 'bash_code_execution';\n\n      /**\n       * Shell command to execute.\n       */\n      command: string;\n    }\n  | {\n      type: 'text_editor_code_execution';\n      command: 'view';\n\n      /**\n       * The path to the file to view.\n       */\n      path: string;\n    }\n  | {\n      type: 'text_editor_code_execution';\n      command: 'create';\n\n      /**\n       * The path to the file to edit.\n       */\n      path: string;\n\n      /**\n       * The text of the file to edit.\n       */\n      file_text?: string | null;\n    }\n  | {\n      type: 'text_editor_code_execution';\n      command: 'str_replace';\n\n      /**\n       * The path to the file to edit.\n       */\n      path: string;\n\n      /**\n       * The string to replace.\n       */\n      old_str: string;\n\n      /**\n       * The new string to replace the old string with.\n       */\n      new_str: string;\n    },\n  | {\n      type: 'bash_code_execution_result';\n\n      /**\n       * Output from successful execution\n       */\n      stdout: string;\n\n      /**\n       * Error messages if execution fails\n       */\n      stderr: string;\n\n      /**\n       * 0 for success, non-zero for failure\n       */\n      return_code: number;\n    }\n  | {\n      type: 'bash_code_execution_tool_result_error';\n\n      /**\n       * Available options: invalid_tool_input, unavailable, too_many_requests,\n       * execution_time_exceeded, output_file_too_large.\n       */\n      error_code: string;\n    }\n  | {\n      type: 'text_editor_code_execution_tool_result_error';\n\n      /**\n       * Available options: invalid_tool_input, unavailable, too_many_requests,\n       * execution_time_exceeded, file_not_found.\n       */\n      error_code: string;\n    }\n  | {\n      type: 'text_editor_code_execution_view_result';\n\n      content: string;\n\n      /**\n       * The type of the file. Available options: text, image, pdf.\n       */\n      file_type: string;\n\n      num_lines: number | null;\n      start_line: number | null;\n      total_lines: number | null;\n    }\n  | {\n      type: 'text_editor_code_execution_create_result';\n\n      is_file_update: boolean;\n    }\n  | {\n      type: 'text_editor_code_execution_str_replace_result';\n\n      lines: string[] | null;\n      new_lines: number | null;\n      new_start: number | null;\n      old_lines: number | null;\n      old_start: number | null;\n    },\n  {\n    // no arguments\n  }\n>({\n  id: 'anthropic.code_execution_20250825',\n  name: 'code_execution',\n  inputSchema: codeExecution_20250825InputSchema,\n  outputSchema: codeExecution_20250825OutputSchema,\n});\n\nexport const codeExecution_20250825 = (\n  args: Parameters<typeof factory>[0] = {},\n) => {\n  return factory(args);\n};\n","import { LanguageModelV2FinishReason } from '@ai-sdk/provider';\n\n/**\n * @see https://docs.anthropic.com/en/api/messages#response-stop-reason\n */\nexport function mapAnthropicStopReason({\n  finishReason,\n  isJsonResponseFromTool,\n}: {\n  finishReason: string | null | undefined;\n  isJsonResponseFromTool?: boolean;\n}): LanguageModelV2FinishReason {\n  switch (finishReason) {\n    case 'pause_turn':\n    case 'end_turn':\n    case 'stop_sequence':\n      return 'stop';\n    case 'refusal':\n      return 'content-filter';\n    case 'tool_use':\n      return isJsonResponseFromTool ? 'stop' : 'tool-calls';\n    case 'max_tokens':\n      return 'length';\n    default:\n      return 'unknown';\n  }\n}\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst bash_20241022InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.string(),\n      restart: z.boolean().optional(),\n    }),\n  ),\n);\n\nexport const bash_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The bash command to run. Required unless the tool is being restarted.\n     */\n    command: string;\n\n    /**\n     * Specifying true will restart this tool. Otherwise, leave this unspecified.\n     */\n    restart?: boolean;\n  },\n  {}\n>({\n  id: 'anthropic.bash_20241022',\n  name: 'bash',\n  inputSchema: bash_20241022InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst bash_20250124InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.string(),\n      restart: z.boolean().optional(),\n    }),\n  ),\n);\n\nexport const bash_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The bash command to run. Required unless the tool is being restarted.\n     */\n    command: string;\n\n    /**\n     * Specifying true will restart this tool. Otherwise, leave this unspecified.\n     */\n    restart?: boolean;\n  },\n  {}\n>({\n  id: 'anthropic.bash_20250124',\n  name: 'bash',\n  inputSchema: bash_20250124InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst computer_20241022InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      action: z.enum([\n        'key',\n        'type',\n        'mouse_move',\n        'left_click',\n        'left_click_drag',\n        'right_click',\n        'middle_click',\n        'double_click',\n        'screenshot',\n        'cursor_position',\n      ]),\n      coordinate: z.array(z.number().int()).optional(),\n      text: z.string().optional(),\n    }),\n  ),\n);\n\nexport const computer_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The action to perform. The available actions are:\n     * - `key`: Press a key or key-combination on the keyboard.\n     *   - This supports xdotool's `key` syntax.\n     *   - Examples: \"a\", \"Return\", \"alt+Tab\", \"ctrl+s\", \"Up\", \"KP_0\" (for the numpad 0 key).\n     * - `type`: Type a string of text on the keyboard.\n     * - `cursor_position`: Get the current (x, y) pixel coordinate of the cursor on the screen.\n     * - `mouse_move`: Move the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `left_click`: Click the left mouse button.\n     * - `left_click_drag`: Click and drag the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `right_click`: Click the right mouse button.\n     * - `middle_click`: Click the middle mouse button.\n     * - `double_click`: Double-click the left mouse button.\n     * - `screenshot`: Take a screenshot of the screen.\n     */\n    action:\n      | 'key'\n      | 'type'\n      | 'mouse_move'\n      | 'left_click'\n      | 'left_click_drag'\n      | 'right_click'\n      | 'middle_click'\n      | 'double_click'\n      | 'screenshot'\n      | 'cursor_position';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to move the mouse to. Required only by `action=mouse_move` and `action=left_click_drag`.\n     */\n    coordinate?: number[];\n\n    /**\n     * Required only by `action=type` and `action=key`.\n     */\n    text?: string;\n  },\n  {\n    /**\n     * The width of the display being controlled by the model in pixels.\n     */\n    displayWidthPx: number;\n\n    /**\n     * The height of the display being controlled by the model in pixels.\n     */\n    displayHeightPx: number;\n\n    /**\n     * The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n     */\n    displayNumber?: number;\n  }\n>({\n  id: 'anthropic.computer_20241022',\n  name: 'computer',\n  inputSchema: computer_20241022InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst computer_20250124InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      action: z.enum([\n        'key',\n        'hold_key',\n        'type',\n        'cursor_position',\n        'mouse_move',\n        'left_mouse_down',\n        'left_mouse_up',\n        'left_click',\n        'left_click_drag',\n        'right_click',\n        'middle_click',\n        'double_click',\n        'triple_click',\n        'scroll',\n        'wait',\n        'screenshot',\n      ]),\n      coordinate: z.tuple([z.number().int(), z.number().int()]).optional(),\n      duration: z.number().optional(),\n      scroll_amount: z.number().optional(),\n      scroll_direction: z.enum(['up', 'down', 'left', 'right']).optional(),\n      start_coordinate: z\n        .tuple([z.number().int(), z.number().int()])\n        .optional(),\n      text: z.string().optional(),\n    }),\n  ),\n);\n\nexport const computer_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * - `key`: Press a key or key-combination on the keyboard.\n     *   - This supports xdotool's `key` syntax.\n     *   - Examples: \"a\", \"Return\", \"alt+Tab\", \"ctrl+s\", \"Up\", \"KP_0\" (for the numpad 0 key).\n     * - `hold_key`: Hold down a key or multiple keys for a specified duration (in seconds). Supports the same syntax as `key`.\n     * - `type`: Type a string of text on the keyboard.\n     * - `cursor_position`: Get the current (x, y) pixel coordinate of the cursor on the screen.\n     * - `mouse_move`: Move the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `left_mouse_down`: Press the left mouse button.\n     * - `left_mouse_up`: Release the left mouse button.\n     * - `left_click`: Click the left mouse button at the specified (x, y) pixel coordinate on the screen. You can also include a key combination to hold down while clicking using the `text` parameter.\n     * - `left_click_drag`: Click and drag the cursor from `start_coordinate` to a specified (x, y) pixel coordinate on the screen.\n     * - `right_click`: Click the right mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `middle_click`: Click the middle mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `double_click`: Double-click the left mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `triple_click`: Triple-click the left mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `scroll`: Scroll the screen in a specified direction by a specified amount of clicks of the scroll wheel, at the specified (x, y) pixel coordinate. DO NOT use PageUp/PageDown to scroll.\n     * - `wait`: Wait for a specified duration (in seconds).\n     * - `screenshot`: Take a screenshot of the screen.\n     */\n    action:\n      | 'key'\n      | 'hold_key'\n      | 'type'\n      | 'cursor_position'\n      | 'mouse_move'\n      | 'left_mouse_down'\n      | 'left_mouse_up'\n      | 'left_click'\n      | 'left_click_drag'\n      | 'right_click'\n      | 'middle_click'\n      | 'double_click'\n      | 'triple_click'\n      | 'scroll'\n      | 'wait'\n      | 'screenshot';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to move the mouse to. Required only by `action=mouse_move` and `action=left_click_drag`.\n     */\n    coordinate?: [number, number];\n\n    /**\n     * The duration to hold the key down for. Required only by `action=hold_key` and `action=wait`.\n     */\n    duration?: number;\n\n    /**\n     * The number of 'clicks' to scroll. Required only by `action=scroll`.\n     */\n    scroll_amount?: number;\n\n    /**\n     * The direction to scroll the screen. Required only by `action=scroll`.\n     */\n    scroll_direction?: 'up' | 'down' | 'left' | 'right';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to start the drag from. Required only by `action=left_click_drag`.\n     */\n    start_coordinate?: [number, number];\n\n    /**\n     * Required only by `action=type`, `action=key`, and `action=hold_key`. Can also be used by click or scroll actions to hold down keys while clicking or scrolling.\n     */\n    text?: string;\n  },\n  {\n    /**\n     * The width of the display being controlled by the model in pixels.\n     */\n    displayWidthPx: number;\n\n    /**\n     * The height of the display being controlled by the model in pixels.\n     */\n    displayHeightPx: number;\n\n    /**\n     * The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n     */\n    displayNumber?: number;\n  }\n>({\n  id: 'anthropic.computer_20250124',\n  name: 'computer',\n  inputSchema: computer_20250124InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst memory_20250818InputSchema = lazySchema(() =>\n  zodSchema(\n    z.discriminatedUnion('command', [\n      z.object({\n        command: z.literal('view'),\n        path: z.string(),\n        view_range: z.tuple([z.number(), z.number()]).optional(),\n      }),\n      z.object({\n        command: z.literal('create'),\n        path: z.string(),\n        file_text: z.string(),\n      }),\n      z.object({\n        command: z.literal('str_replace'),\n        path: z.string(),\n        old_str: z.string(),\n        new_str: z.string(),\n      }),\n      z.object({\n        command: z.literal('insert'),\n        path: z.string(),\n        insert_line: z.number(),\n        insert_text: z.string(),\n      }),\n      z.object({\n        command: z.literal('delete'),\n        path: z.string(),\n      }),\n      z.object({\n        command: z.literal('rename'),\n        old_path: z.string(),\n        new_path: z.string(),\n      }),\n    ]),\n  ),\n);\n\nexport const memory_20250818 = createProviderDefinedToolFactory<\n  | { command: 'view'; path: string; view_range?: [number, number] }\n  | { command: 'create'; path: string; file_text: string }\n  | { command: 'str_replace'; path: string; old_str: string; new_str: string }\n  | {\n      command: 'insert';\n      path: string;\n      insert_line: number;\n      insert_text: string;\n    }\n  | { command: 'delete'; path: string }\n  | { command: 'rename'; old_path: string; new_path: string },\n  {}\n>({\n  id: 'anthropic.memory_20250818',\n  name: 'memory',\n  inputSchema: memory_20250818InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst textEditor_20241022InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.enum(['view', 'create', 'str_replace', 'insert', 'undo_edit']),\n      path: z.string(),\n      file_text: z.string().optional(),\n      insert_line: z.number().int().optional(),\n      new_str: z.string().optional(),\n      old_str: z.string().optional(),\n      view_range: z.array(z.number().int()).optional(),\n    }),\n  ),\n);\n\nexport const textEditor_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert' | 'undo_edit';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20241022',\n  name: 'str_replace_editor',\n  inputSchema: textEditor_20241022InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst textEditor_20250124InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.enum(['view', 'create', 'str_replace', 'insert', 'undo_edit']),\n      path: z.string(),\n      file_text: z.string().optional(),\n      insert_line: z.number().int().optional(),\n      new_str: z.string().optional(),\n      old_str: z.string().optional(),\n      view_range: z.array(z.number().int()).optional(),\n    }),\n  ),\n);\n\nexport const textEditor_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert' | 'undo_edit';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20250124',\n  name: 'str_replace_editor',\n  inputSchema: textEditor_20250124InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst textEditor_20250429InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.enum(['view', 'create', 'str_replace', 'insert']),\n      path: z.string(),\n      file_text: z.string().optional(),\n      insert_line: z.number().int().optional(),\n      new_str: z.string().optional(),\n      old_str: z.string().optional(),\n      view_range: z.array(z.number().int()).optional(),\n    }),\n  ),\n);\n\nexport const textEditor_20250429 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`.\n     * Note: `undo_edit` is not supported in Claude 4 models.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20250429',\n  name: 'str_replace_based_edit_tool',\n  inputSchema: textEditor_20250429InputSchema,\n});\n","import { bash_20241022 } from './tool/bash_20241022';\nimport { bash_20250124 } from './tool/bash_20250124';\nimport { codeExecution_20250522 } from './tool/code-execution_20250522';\nimport { codeExecution_20250825 } from './tool/code-execution_20250825';\nimport { computer_20241022 } from './tool/computer_20241022';\nimport { computer_20250124 } from './tool/computer_20250124';\nimport { memory_20250818 } from './tool/memory_20250818';\nimport { textEditor_20241022 } from './tool/text-editor_20241022';\nimport { textEditor_20250124 } from './tool/text-editor_20250124';\nimport { textEditor_20250429 } from './tool/text-editor_20250429';\nimport { textEditor_20250728 } from './tool/text-editor_20250728';\nimport { webFetch_20250910 } from './tool/web-fetch-20250910';\nimport { webSearch_20250305 } from './tool/web-search_20250305';\n\nexport const anthropicTools = {\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20241022,\n\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20250124,\n\n  /**\n   * Claude can analyze data, create visualizations, perform complex calculations,\n   * run system commands, create and edit files, and process uploaded files directly within\n   * the API conversation.\n   *\n   * The code execution tool allows Claude to run Bash commands and manipulate files,\n   * including writing code, in a secure, sandboxed environment.\n   *\n   * Tool name must be `code_execution`.\n   */\n  codeExecution_20250522,\n\n  /**\n   * Claude can analyze data, create visualizations, perform complex calculations,\n   * run system commands, create and edit files, and process uploaded files directly within\n   * the API conversation.\n   *\n   * The code execution tool allows Claude to run both Python and Bash commands and manipulate files,\n   * including writing code, in a secure, sandboxed environment.\n   *\n   * This is the latest version with enhanced Bash support and file operations.\n   *\n   * Tool name must be `code_execution`.\n   */\n  codeExecution_20250825,\n\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20241022,\n\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20250124,\n\n  /**\n   * The memory tool enables Claude to store and retrieve information across conversations through a memory file directory.\n   * Claude can create, read, update, and delete files that persist between sessions,\n   * allowing it to build knowledge over time without keeping everything in the context window.\n   * The memory tool operates client-side—you control where and how the data is stored through your own infrastructure.\n   *\n   * Supported models: Claude Sonnet 4.5, Claude Sonnet 4, Claude Opus 4.1, Claude Opus 4.\n   *\n   * Tool name must be `memory`.\n   */\n  memory_20250818,\n\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Supported models: Claude Sonnet 3.5\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20241022,\n\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Supported models: Claude Sonnet 3.7\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20250124,\n\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Note: This version does not support the \"undo_edit\" command.\n   *\n   * Tool name must be `str_replace_based_edit_tool`.\n   *\n   * @deprecated Use textEditor_20250728 instead\n   */\n  textEditor_20250429,\n\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Note: This version does not support the \"undo_edit\" command and adds optional max_characters parameter.\n   *\n   * Supported models: Claude Sonnet 4, Opus 4, and Opus 4.1\n   *\n   * Tool name must be `str_replace_based_edit_tool`.\n   *\n   * @param maxCharacters - Optional maximum number of characters to view in the file\n   */\n  textEditor_20250728,\n\n  /**\n   * Creates a web fetch tool that gives Claude direct access to real-time web content.\n   *\n   * Tool name must be `web_fetch`.\n   *\n   * @param maxUses - The max_uses parameter limits the number of web fetches performed\n   * @param allowedDomains - Only fetch from these domains\n   * @param blockedDomains - Never fetch from these domains\n   * @param citations - Unlike web search where citations are always enabled, citations are optional for web fetch. Set \"citations\": {\"enabled\": true} to enable Claude to cite specific passages from fetched documents.\n   * @param maxContentTokens - The max_content_tokens parameter limits the amount of content that will be included in the context.\n   */\n  webFetch_20250910,\n\n  /**\n   * Creates a web search tool that gives Claude direct access to real-time web content.\n   *\n   * Tool name must be `web_search`.\n   *\n   * @param maxUses - Maximum number of web searches Claude can perform during the conversation.\n   * @param allowedDomains - Optional list of domains that Claude is allowed to search.\n   * @param blockedDomains - Optional list of domains that Claude should avoid when searching.\n   * @param userLocation - Optional user location information to provide geographically relevant search results.\n   */\n  webSearch_20250305,\n};\n"],"names":["lazySchema","zodSchema","z","anthropic","factory","createProviderDefinedToolFactoryWithOutputSchema","anthropicTools","UnsupportedFunctionalityError","_a","_b","i","validateTypes","generateId","parseProviderOptions","createProviderDefinedToolFactory"],"mappings":"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"}},
    {"offset": {"line": 2934, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}