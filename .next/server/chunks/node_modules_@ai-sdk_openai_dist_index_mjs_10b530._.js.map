{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@ai-sdk/openai/src/openai-provider.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/chat/openai-chat-language-model.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/openai-error.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/chat/convert-to-openai-chat-messages.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/chat/get-response-metadata.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/chat/map-openai-finish-reason.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/chat/openai-chat-api.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/chat/openai-chat-options.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/chat/openai-chat-prepare-tools.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/completion/openai-completion-language-model.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/completion/convert-to-openai-completion-prompt.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/completion/get-response-metadata.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/completion/map-openai-finish-reason.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/completion/openai-completion-api.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/completion/openai-completion-options.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/embedding/openai-embedding-model.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/embedding/openai-embedding-options.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/embedding/openai-embedding-api.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/image/openai-image-model.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/image/openai-image-api.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/image/openai-image-options.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/tool/code-interpreter.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/tool/file-search.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/tool/image-generation.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/tool/local-shell.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/tool/web-search.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/tool/web-search-preview.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/openai-tools.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/responses/openai-responses-language-model.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/responses/convert-to-openai-responses-input.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/responses/map-openai-responses-finish-reason.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/responses/openai-responses-api.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/responses/openai-responses-options.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/responses/openai-responses-prepare-tools.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/speech/openai-speech-model.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/speech/openai-speech-options.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/transcription/openai-transcription-model.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/transcription/openai-transcription-api.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/transcription/openai-transcription-options.ts","/turbopack/[project]/node_modules/@ai-sdk/openai/src/version.ts"],"sourcesContent":["import {\n  EmbeddingModelV2,\n  ImageModelV2,\n  LanguageModelV2,\n  ProviderV2,\n  SpeechModelV2,\n  TranscriptionModelV2,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  loadApiKey,\n  loadOptionalSetting,\n  withoutTrailingSlash,\n  withUserAgentSuffix,\n} from '@ai-sdk/provider-utils';\nimport { OpenAIChatLanguageModel } from './chat/openai-chat-language-model';\nimport { OpenAIChatModelId } from './chat/openai-chat-options';\nimport { OpenAICompletionLanguageModel } from './completion/openai-completion-language-model';\nimport { OpenAICompletionModelId } from './completion/openai-completion-options';\nimport { OpenAIEmbeddingModel } from './embedding/openai-embedding-model';\nimport { OpenAIEmbeddingModelId } from './embedding/openai-embedding-options';\nimport { OpenAIImageModel } from './image/openai-image-model';\nimport { OpenAIImageModelId } from './image/openai-image-options';\nimport { openaiTools } from './openai-tools';\nimport { OpenAIResponsesLanguageModel } from './responses/openai-responses-language-model';\nimport { OpenAIResponsesModelId } from './responses/openai-responses-options';\nimport { OpenAISpeechModel } from './speech/openai-speech-model';\nimport { OpenAISpeechModelId } from './speech/openai-speech-options';\nimport { OpenAITranscriptionModel } from './transcription/openai-transcription-model';\nimport { OpenAITranscriptionModelId } from './transcription/openai-transcription-options';\nimport { VERSION } from './version';\n\nexport interface OpenAIProvider extends ProviderV2 {\n  (modelId: OpenAIResponsesModelId): LanguageModelV2;\n\n  /**\nCreates an OpenAI model for text generation.\n   */\n  languageModel(modelId: OpenAIResponsesModelId): LanguageModelV2;\n\n  /**\nCreates an OpenAI chat model for text generation.\n   */\n  chat(modelId: OpenAIChatModelId): LanguageModelV2;\n\n  /**\nCreates an OpenAI responses API model for text generation.\n   */\n  responses(modelId: OpenAIResponsesModelId): LanguageModelV2;\n\n  /**\nCreates an OpenAI completion model for text generation.\n   */\n  completion(modelId: OpenAICompletionModelId): LanguageModelV2;\n\n  /**\nCreates a model for text embeddings.\n   */\n  embedding(modelId: OpenAIEmbeddingModelId): EmbeddingModelV2<string>;\n\n  /**\nCreates a model for text embeddings.\n   */\n  textEmbedding(modelId: OpenAIEmbeddingModelId): EmbeddingModelV2<string>;\n\n  /**\nCreates a model for text embeddings.\n   */\n  textEmbeddingModel(modelId: OpenAIEmbeddingModelId): EmbeddingModelV2<string>;\n\n  /**\nCreates a model for image generation.\n   */\n  image(modelId: OpenAIImageModelId): ImageModelV2;\n\n  /**\nCreates a model for image generation.\n   */\n  imageModel(modelId: OpenAIImageModelId): ImageModelV2;\n\n  /**\nCreates a model for transcription.\n   */\n  transcription(modelId: OpenAITranscriptionModelId): TranscriptionModelV2;\n\n  /**\nCreates a model for speech generation.\n   */\n  speech(modelId: OpenAISpeechModelId): SpeechModelV2;\n\n  /**\nOpenAI-specific tools.\n   */\n  tools: typeof openaiTools;\n}\n\nexport interface OpenAIProviderSettings {\n  /**\nBase URL for the OpenAI API calls.\n     */\n  baseURL?: string;\n\n  /**\nAPI key for authenticating requests.\n     */\n  apiKey?: string;\n\n  /**\nOpenAI Organization.\n     */\n  organization?: string;\n\n  /**\nOpenAI project.\n     */\n  project?: string;\n\n  /**\nCustom headers to include in the requests.\n     */\n  headers?: Record<string, string>;\n\n  /**\nProvider name. Overrides the `openai` default name for 3rd party providers.\n   */\n  name?: string;\n\n  /**\nCustom fetch implementation. You can use it as a middleware to intercept requests,\nor to provide a custom fetch implementation for e.g. testing.\n    */\n  fetch?: FetchFunction;\n}\n\n/**\nCreate an OpenAI provider instance.\n */\nexport function createOpenAI(\n  options: OpenAIProviderSettings = {},\n): OpenAIProvider {\n  const baseURL =\n    withoutTrailingSlash(\n      loadOptionalSetting({\n        settingValue: options.baseURL,\n        environmentVariableName: 'OPENAI_BASE_URL',\n      }),\n    ) ?? 'https://api.openai.com/v1';\n\n  const providerName = options.name ?? 'openai';\n\n  const getHeaders = () =>\n    withUserAgentSuffix(\n      {\n        Authorization: `Bearer ${loadApiKey({\n          apiKey: options.apiKey,\n          environmentVariableName: 'OPENAI_API_KEY',\n          description: 'OpenAI',\n        })}`,\n        'OpenAI-Organization': options.organization,\n        'OpenAI-Project': options.project,\n        ...options.headers,\n      },\n      `ai-sdk/openai/${VERSION}`,\n    );\n\n  const createChatModel = (modelId: OpenAIChatModelId) =>\n    new OpenAIChatLanguageModel(modelId, {\n      provider: `${providerName}.chat`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n    });\n\n  const createCompletionModel = (modelId: OpenAICompletionModelId) =>\n    new OpenAICompletionLanguageModel(modelId, {\n      provider: `${providerName}.completion`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n    });\n\n  const createEmbeddingModel = (modelId: OpenAIEmbeddingModelId) =>\n    new OpenAIEmbeddingModel(modelId, {\n      provider: `${providerName}.embedding`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n    });\n\n  const createImageModel = (modelId: OpenAIImageModelId) =>\n    new OpenAIImageModel(modelId, {\n      provider: `${providerName}.image`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n    });\n\n  const createTranscriptionModel = (modelId: OpenAITranscriptionModelId) =>\n    new OpenAITranscriptionModel(modelId, {\n      provider: `${providerName}.transcription`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n    });\n\n  const createSpeechModel = (modelId: OpenAISpeechModelId) =>\n    new OpenAISpeechModel(modelId, {\n      provider: `${providerName}.speech`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n    });\n\n  const createLanguageModel = (modelId: OpenAIResponsesModelId) => {\n    if (new.target) {\n      throw new Error(\n        'The OpenAI model function cannot be called with the new keyword.',\n      );\n    }\n\n    return createResponsesModel(modelId);\n  };\n\n  const createResponsesModel = (modelId: OpenAIResponsesModelId) => {\n    return new OpenAIResponsesLanguageModel(modelId, {\n      provider: `${providerName}.responses`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      fileIdPrefixes: ['file-'],\n    });\n  };\n\n  const provider = function (modelId: OpenAIResponsesModelId) {\n    return createLanguageModel(modelId);\n  };\n\n  provider.languageModel = createLanguageModel;\n  provider.chat = createChatModel;\n  provider.completion = createCompletionModel;\n  provider.responses = createResponsesModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n\n  provider.transcription = createTranscriptionModel;\n  provider.transcriptionModel = createTranscriptionModel;\n\n  provider.speech = createSpeechModel;\n  provider.speechModel = createSpeechModel;\n\n  provider.tools = openaiTools;\n\n  return provider as OpenAIProvider;\n}\n\n/**\nDefault OpenAI provider instance.\n */\nexport const openai = createOpenAI();\n","import {\n  InvalidResponseDataError,\n  LanguageModelV2,\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  LanguageModelV2Content,\n  LanguageModelV2FinishReason,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  ParseResult,\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonResponseHandler,\n  generateId,\n  isParsableJson,\n  parseProviderOptions,\n  postJsonToApi,\n} from '@ai-sdk/provider-utils';\nimport { openaiFailedResponseHandler } from '../openai-error';\nimport { convertToOpenAIChatMessages } from './convert-to-openai-chat-messages';\nimport { getResponseMetadata } from './get-response-metadata';\nimport { mapOpenAIFinishReason } from './map-openai-finish-reason';\nimport {\n  OpenAIChatChunk,\n  openaiChatChunkSchema,\n  openaiChatResponseSchema,\n} from './openai-chat-api';\nimport {\n  OpenAIChatModelId,\n  openaiChatLanguageModelOptions,\n} from './openai-chat-options';\nimport { prepareChatTools } from './openai-chat-prepare-tools';\n\ntype OpenAIChatConfig = {\n  provider: string;\n  headers: () => Record<string, string | undefined>;\n  url: (options: { modelId: string; path: string }) => string;\n  fetch?: FetchFunction;\n};\n\nexport class OpenAIChatLanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  readonly modelId: OpenAIChatModelId;\n\n  readonly supportedUrls = {\n    'image/*': [/^https?:\\/\\/.*$/],\n  };\n\n  private readonly config: OpenAIChatConfig;\n\n  constructor(modelId: OpenAIChatModelId, config: OpenAIChatConfig) {\n    this.modelId = modelId;\n    this.config = config;\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  private async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions,\n  }: LanguageModelV2CallOptions) {\n    const warnings: LanguageModelV2CallWarning[] = [];\n\n    // Parse provider options\n    const openaiOptions =\n      (await parseProviderOptions({\n        provider: 'openai',\n        providerOptions,\n        schema: openaiChatLanguageModelOptions,\n      })) ?? {};\n\n    const structuredOutputs = openaiOptions.structuredOutputs ?? true;\n\n    if (topK != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'topK',\n      });\n    }\n\n    if (\n      responseFormat?.type === 'json' &&\n      responseFormat.schema != null &&\n      !structuredOutputs\n    ) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'responseFormat',\n        details:\n          'JSON response format schema is only supported with structuredOutputs',\n      });\n    }\n\n    const { messages, warnings: messageWarnings } = convertToOpenAIChatMessages(\n      {\n        prompt,\n        systemMessageMode: getSystemMessageMode(this.modelId),\n      },\n    );\n\n    warnings.push(...messageWarnings);\n\n    const strictJsonSchema = openaiOptions.strictJsonSchema ?? false;\n\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n\n      // model specific settings:\n      logit_bias: openaiOptions.logitBias,\n      logprobs:\n        openaiOptions.logprobs === true ||\n        typeof openaiOptions.logprobs === 'number'\n          ? true\n          : undefined,\n      top_logprobs:\n        typeof openaiOptions.logprobs === 'number'\n          ? openaiOptions.logprobs\n          : typeof openaiOptions.logprobs === 'boolean'\n            ? openaiOptions.logprobs\n              ? 0\n              : undefined\n            : undefined,\n      user: openaiOptions.user,\n      parallel_tool_calls: openaiOptions.parallelToolCalls,\n\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_p: topP,\n      frequency_penalty: frequencyPenalty,\n      presence_penalty: presencePenalty,\n      response_format:\n        responseFormat?.type === 'json'\n          ? structuredOutputs && responseFormat.schema != null\n            ? {\n                type: 'json_schema',\n                json_schema: {\n                  schema: responseFormat.schema,\n                  strict: strictJsonSchema,\n                  name: responseFormat.name ?? 'response',\n                  description: responseFormat.description,\n                },\n              }\n            : { type: 'json_object' }\n          : undefined,\n      stop: stopSequences,\n      seed,\n      verbosity: openaiOptions.textVerbosity,\n\n      // openai specific settings:\n      // TODO AI SDK 6: remove, we auto-map maxOutputTokens now\n      max_completion_tokens: openaiOptions.maxCompletionTokens,\n      store: openaiOptions.store,\n      metadata: openaiOptions.metadata,\n      prediction: openaiOptions.prediction,\n      reasoning_effort: openaiOptions.reasoningEffort,\n      service_tier: openaiOptions.serviceTier,\n      prompt_cache_key: openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions.safetyIdentifier,\n\n      // messages:\n      messages,\n    };\n\n    if (isReasoningModel(this.modelId)) {\n      // remove unsupported settings for reasoning models\n      // see https://platform.openai.com/docs/guides/reasoning#limitations\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'temperature',\n          details: 'temperature is not supported for reasoning models',\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topP',\n          details: 'topP is not supported for reasoning models',\n        });\n      }\n      if (baseArgs.frequency_penalty != null) {\n        baseArgs.frequency_penalty = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'frequencyPenalty',\n          details: 'frequencyPenalty is not supported for reasoning models',\n        });\n      }\n      if (baseArgs.presence_penalty != null) {\n        baseArgs.presence_penalty = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'presencePenalty',\n          details: 'presencePenalty is not supported for reasoning models',\n        });\n      }\n      if (baseArgs.logit_bias != null) {\n        baseArgs.logit_bias = undefined;\n        warnings.push({\n          type: 'other',\n          message: 'logitBias is not supported for reasoning models',\n        });\n      }\n      if (baseArgs.logprobs != null) {\n        baseArgs.logprobs = undefined;\n        warnings.push({\n          type: 'other',\n          message: 'logprobs is not supported for reasoning models',\n        });\n      }\n      if (baseArgs.top_logprobs != null) {\n        baseArgs.top_logprobs = undefined;\n        warnings.push({\n          type: 'other',\n          message: 'topLogprobs is not supported for reasoning models',\n        });\n      }\n\n      // reasoning models use max_completion_tokens instead of max_tokens:\n      if (baseArgs.max_tokens != null) {\n        if (baseArgs.max_completion_tokens == null) {\n          baseArgs.max_completion_tokens = baseArgs.max_tokens;\n        }\n        baseArgs.max_tokens = undefined;\n      }\n    } else if (\n      this.modelId.startsWith('gpt-4o-search-preview') ||\n      this.modelId.startsWith('gpt-4o-mini-search-preview')\n    ) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'temperature',\n          details:\n            'temperature is not supported for the search preview models and has been removed.',\n        });\n      }\n    }\n\n    // Validate flex processing support\n    if (\n      openaiOptions.serviceTier === 'flex' &&\n      !supportsFlexProcessing(this.modelId)\n    ) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'serviceTier',\n        details:\n          'flex processing is only available for o3, o4-mini, and gpt-5 models',\n      });\n      baseArgs.service_tier = undefined;\n    }\n\n    // Validate priority processing support\n    if (\n      openaiOptions.serviceTier === 'priority' &&\n      !supportsPriorityProcessing(this.modelId)\n    ) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'serviceTier',\n        details:\n          'priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported',\n      });\n      baseArgs.service_tier = undefined;\n    }\n\n    const {\n      tools: openaiTools,\n      toolChoice: openaiToolChoice,\n      toolWarnings,\n    } = prepareChatTools({\n      tools,\n      toolChoice,\n      structuredOutputs,\n      strictJsonSchema,\n    });\n\n    return {\n      args: {\n        ...baseArgs,\n        tools: openaiTools,\n        tool_choice: openaiToolChoice,\n      },\n      warnings: [...warnings, ...toolWarnings],\n    };\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args: body, warnings } = await this.getArgs(options);\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url: this.config.url({\n        path: '/chat/completions',\n        modelId: this.modelId,\n      }),\n      headers: combineHeaders(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        openaiChatResponseSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const choice = response.choices[0];\n    const content: Array<LanguageModelV2Content> = [];\n\n    // text content:\n    const text = choice.message.content;\n    if (text != null && text.length > 0) {\n      content.push({ type: 'text', text });\n    }\n\n    // tool calls:\n    for (const toolCall of choice.message.tool_calls ?? []) {\n      content.push({\n        type: 'tool-call' as const,\n        toolCallId: toolCall.id ?? generateId(),\n        toolName: toolCall.function.name,\n        input: toolCall.function.arguments!,\n      });\n    }\n\n    // annotations/citations:\n    for (const annotation of choice.message.annotations ?? []) {\n      content.push({\n        type: 'source',\n        sourceType: 'url',\n        id: generateId(),\n        url: annotation.url,\n        title: annotation.title,\n      });\n    }\n\n    // provider metadata:\n    const completionTokenDetails = response.usage?.completion_tokens_details;\n    const promptTokenDetails = response.usage?.prompt_tokens_details;\n    const providerMetadata: SharedV2ProviderMetadata = { openai: {} };\n    if (completionTokenDetails?.accepted_prediction_tokens != null) {\n      providerMetadata.openai.acceptedPredictionTokens =\n        completionTokenDetails?.accepted_prediction_tokens;\n    }\n    if (completionTokenDetails?.rejected_prediction_tokens != null) {\n      providerMetadata.openai.rejectedPredictionTokens =\n        completionTokenDetails?.rejected_prediction_tokens;\n    }\n    if (choice.logprobs?.content != null) {\n      providerMetadata.openai.logprobs = choice.logprobs.content;\n    }\n\n    return {\n      content,\n      finishReason: mapOpenAIFinishReason(choice.finish_reason),\n      usage: {\n        inputTokens: response.usage?.prompt_tokens ?? undefined,\n        outputTokens: response.usage?.completion_tokens ?? undefined,\n        totalTokens: response.usage?.total_tokens ?? undefined,\n        reasoningTokens: completionTokenDetails?.reasoning_tokens ?? undefined,\n        cachedInputTokens: promptTokenDetails?.cached_tokens ?? undefined,\n      },\n      request: { body },\n      response: {\n        ...getResponseMetadata(response),\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n      warnings,\n      providerMetadata,\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings } = await this.getArgs(options);\n\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true,\n      },\n    };\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url: this.config.url({\n        path: '/chat/completions',\n        modelId: this.modelId,\n      }),\n      headers: combineHeaders(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(\n        openaiChatChunkSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const toolCalls: Array<{\n      id: string;\n      type: 'function';\n      function: {\n        name: string;\n        arguments: string;\n      };\n      hasFinished: boolean;\n    }> = [];\n\n    let finishReason: LanguageModelV2FinishReason = 'unknown';\n    const usage: LanguageModelV2Usage = {\n      inputTokens: undefined,\n      outputTokens: undefined,\n      totalTokens: undefined,\n    };\n    let isFirstChunk = true;\n    let isActiveText = false;\n\n    const providerMetadata: SharedV2ProviderMetadata = { openai: {} };\n\n    return {\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<OpenAIChatChunk>,\n          LanguageModelV2StreamPart\n        >({\n          start(controller) {\n            controller.enqueue({ type: 'stream-start', warnings });\n          },\n\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: 'raw', rawValue: chunk.rawValue });\n            }\n\n            // handle failed chunk parsing / validation:\n            if (!chunk.success) {\n              finishReason = 'error';\n              controller.enqueue({ type: 'error', error: chunk.error });\n              return;\n            }\n\n            const value = chunk.value;\n\n            // handle error chunks:\n            if ('error' in value) {\n              finishReason = 'error';\n              controller.enqueue({ type: 'error', error: value.error });\n              return;\n            }\n\n            if (isFirstChunk) {\n              isFirstChunk = false;\n\n              controller.enqueue({\n                type: 'response-metadata',\n                ...getResponseMetadata(value),\n              });\n            }\n\n            if (value.usage != null) {\n              usage.inputTokens = value.usage.prompt_tokens ?? undefined;\n              usage.outputTokens = value.usage.completion_tokens ?? undefined;\n              usage.totalTokens = value.usage.total_tokens ?? undefined;\n              usage.reasoningTokens =\n                value.usage.completion_tokens_details?.reasoning_tokens ??\n                undefined;\n              usage.cachedInputTokens =\n                value.usage.prompt_tokens_details?.cached_tokens ?? undefined;\n\n              if (\n                value.usage.completion_tokens_details\n                  ?.accepted_prediction_tokens != null\n              ) {\n                providerMetadata.openai.acceptedPredictionTokens =\n                  value.usage.completion_tokens_details?.accepted_prediction_tokens;\n              }\n              if (\n                value.usage.completion_tokens_details\n                  ?.rejected_prediction_tokens != null\n              ) {\n                providerMetadata.openai.rejectedPredictionTokens =\n                  value.usage.completion_tokens_details?.rejected_prediction_tokens;\n              }\n            }\n\n            const choice = value.choices[0];\n\n            if (choice?.finish_reason != null) {\n              finishReason = mapOpenAIFinishReason(choice.finish_reason);\n            }\n\n            if (choice?.logprobs?.content != null) {\n              providerMetadata.openai.logprobs = choice.logprobs.content;\n            }\n\n            if (choice?.delta == null) {\n              return;\n            }\n\n            const delta = choice.delta;\n\n            if (delta.content != null) {\n              if (!isActiveText) {\n                controller.enqueue({ type: 'text-start', id: '0' });\n                isActiveText = true;\n              }\n\n              controller.enqueue({\n                type: 'text-delta',\n                id: '0',\n                delta: delta.content,\n              });\n            }\n\n            if (delta.tool_calls != null) {\n              for (const toolCallDelta of delta.tool_calls) {\n                const index = toolCallDelta.index;\n\n                // Tool call start. OpenAI returns all information except the arguments in the first chunk.\n                if (toolCalls[index] == null) {\n                  if (toolCallDelta.type !== 'function') {\n                    throw new InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function' type.`,\n                    });\n                  }\n\n                  if (toolCallDelta.id == null) {\n                    throw new InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'id' to be a string.`,\n                    });\n                  }\n\n                  if (toolCallDelta.function?.name == null) {\n                    throw new InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function.name' to be a string.`,\n                    });\n                  }\n\n                  controller.enqueue({\n                    type: 'tool-input-start',\n                    id: toolCallDelta.id,\n                    toolName: toolCallDelta.function.name,\n                  });\n\n                  toolCalls[index] = {\n                    id: toolCallDelta.id,\n                    type: 'function',\n                    function: {\n                      name: toolCallDelta.function.name,\n                      arguments: toolCallDelta.function.arguments ?? '',\n                    },\n                    hasFinished: false,\n                  };\n\n                  const toolCall = toolCalls[index];\n\n                  if (\n                    toolCall.function?.name != null &&\n                    toolCall.function?.arguments != null\n                  ) {\n                    // send delta if the argument text has already started:\n                    if (toolCall.function.arguments.length > 0) {\n                      controller.enqueue({\n                        type: 'tool-input-delta',\n                        id: toolCall.id,\n                        delta: toolCall.function.arguments,\n                      });\n                    }\n\n                    // check if tool call is complete\n                    // (some providers send the full tool call in one chunk):\n                    if (isParsableJson(toolCall.function.arguments)) {\n                      controller.enqueue({\n                        type: 'tool-input-end',\n                        id: toolCall.id,\n                      });\n\n                      controller.enqueue({\n                        type: 'tool-call',\n                        toolCallId: toolCall.id ?? generateId(),\n                        toolName: toolCall.function.name,\n                        input: toolCall.function.arguments,\n                      });\n                      toolCall.hasFinished = true;\n                    }\n                  }\n\n                  continue;\n                }\n\n                // existing tool call, merge if not finished\n                const toolCall = toolCalls[index];\n\n                if (toolCall.hasFinished) {\n                  continue;\n                }\n\n                if (toolCallDelta.function?.arguments != null) {\n                  toolCall.function!.arguments +=\n                    toolCallDelta.function?.arguments ?? '';\n                }\n\n                // send delta\n                controller.enqueue({\n                  type: 'tool-input-delta',\n                  id: toolCall.id,\n                  delta: toolCallDelta.function.arguments ?? '',\n                });\n\n                // check if tool call is complete\n                if (\n                  toolCall.function?.name != null &&\n                  toolCall.function?.arguments != null &&\n                  isParsableJson(toolCall.function.arguments)\n                ) {\n                  controller.enqueue({\n                    type: 'tool-input-end',\n                    id: toolCall.id,\n                  });\n\n                  controller.enqueue({\n                    type: 'tool-call',\n                    toolCallId: toolCall.id ?? generateId(),\n                    toolName: toolCall.function.name,\n                    input: toolCall.function.arguments,\n                  });\n                  toolCall.hasFinished = true;\n                }\n              }\n            }\n\n            // annotations/citations:\n            if (delta.annotations != null) {\n              for (const annotation of delta.annotations) {\n                controller.enqueue({\n                  type: 'source',\n                  sourceType: 'url',\n                  id: generateId(),\n                  url: annotation.url,\n                  title: annotation.title,\n                });\n              }\n            }\n          },\n\n          flush(controller) {\n            if (isActiveText) {\n              controller.enqueue({ type: 'text-end', id: '0' });\n            }\n\n            controller.enqueue({\n              type: 'finish',\n              finishReason,\n              usage,\n              ...(providerMetadata != null ? { providerMetadata } : {}),\n            });\n          },\n        }),\n      ),\n      request: { body },\n      response: { headers: responseHeaders },\n    };\n  }\n}\n\nfunction isReasoningModel(modelId: string) {\n  return (\n    (modelId.startsWith('o') || modelId.startsWith('gpt-5')) &&\n    !modelId.startsWith('gpt-5-chat')\n  );\n}\n\nfunction supportsFlexProcessing(modelId: string) {\n  return (\n    modelId.startsWith('o3') ||\n    modelId.startsWith('o4-mini') ||\n    (modelId.startsWith('gpt-5') && !modelId.startsWith('gpt-5-chat'))\n  );\n}\n\nfunction supportsPriorityProcessing(modelId: string) {\n  return (\n    modelId.startsWith('gpt-4') ||\n    modelId.startsWith('gpt-5-mini') ||\n    (modelId.startsWith('gpt-5') &&\n      !modelId.startsWith('gpt-5-nano') &&\n      !modelId.startsWith('gpt-5-chat')) ||\n    modelId.startsWith('o3') ||\n    modelId.startsWith('o4-mini')\n  );\n}\n\nfunction getSystemMessageMode(modelId: string) {\n  if (!isReasoningModel(modelId)) {\n    return 'system';\n  }\n\n  return (\n    reasoningModels[modelId as keyof typeof reasoningModels]\n      ?.systemMessageMode ?? 'developer'\n  );\n}\n\nconst reasoningModels = {\n  'o1-mini': {\n    systemMessageMode: 'remove',\n  },\n  'o1-mini-2024-09-12': {\n    systemMessageMode: 'remove',\n  },\n  'o1-preview': {\n    systemMessageMode: 'remove',\n  },\n  'o1-preview-2024-09-12': {\n    systemMessageMode: 'remove',\n  },\n  o3: {\n    systemMessageMode: 'developer',\n  },\n  'o3-2025-04-16': {\n    systemMessageMode: 'developer',\n  },\n  'o3-mini': {\n    systemMessageMode: 'developer',\n  },\n  'o3-mini-2025-01-31': {\n    systemMessageMode: 'developer',\n  },\n  'o4-mini': {\n    systemMessageMode: 'developer',\n  },\n  'o4-mini-2025-04-16': {\n    systemMessageMode: 'developer',\n  },\n} as const;\n","import { z } from 'zod/v4';\nimport { createJsonErrorResponseHandler } from '@ai-sdk/provider-utils';\n\nexport const openaiErrorDataSchema = z.object({\n  error: z.object({\n    message: z.string(),\n\n    // The additional information below is handled loosely to support\n    // OpenAI-compatible providers that have slightly different error\n    // responses:\n    type: z.string().nullish(),\n    param: z.any().nullish(),\n    code: z.union([z.string(), z.number()]).nullish(),\n  }),\n});\n\nexport type OpenAIErrorData = z.infer<typeof openaiErrorDataSchema>;\n\nexport const openaiFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: openaiErrorDataSchema,\n  errorToMessage: data => data.error.message,\n});\n","import {\n  LanguageModelV2CallWarning,\n  LanguageModelV2Prompt,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { OpenAIChatPrompt } from './openai-chat-prompt';\nimport { convertToBase64 } from '@ai-sdk/provider-utils';\n\nexport function convertToOpenAIChatMessages({\n  prompt,\n  systemMessageMode = 'system',\n}: {\n  prompt: LanguageModelV2Prompt;\n  systemMessageMode?: 'system' | 'developer' | 'remove';\n}): {\n  messages: OpenAIChatPrompt;\n  warnings: Array<LanguageModelV2CallWarning>;\n} {\n  const messages: OpenAIChatPrompt = [];\n  const warnings: Array<LanguageModelV2CallWarning> = [];\n\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case 'system': {\n        switch (systemMessageMode) {\n          case 'system': {\n            messages.push({ role: 'system', content });\n            break;\n          }\n          case 'developer': {\n            messages.push({ role: 'developer', content });\n            break;\n          }\n          case 'remove': {\n            warnings.push({\n              type: 'other',\n              message: 'system messages are removed for this model',\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck: never = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`,\n            );\n          }\n        }\n        break;\n      }\n\n      case 'user': {\n        if (content.length === 1 && content[0].type === 'text') {\n          messages.push({ role: 'user', content: content[0].text });\n          break;\n        }\n\n        messages.push({\n          role: 'user',\n          content: content.map((part, index) => {\n            switch (part.type) {\n              case 'text': {\n                return { type: 'text', text: part.text };\n              }\n              case 'file': {\n                if (part.mediaType.startsWith('image/')) {\n                  const mediaType =\n                    part.mediaType === 'image/*'\n                      ? 'image/jpeg'\n                      : part.mediaType;\n\n                  return {\n                    type: 'image_url',\n                    image_url: {\n                      url:\n                        part.data instanceof URL\n                          ? part.data.toString()\n                          : `data:${mediaType};base64,${convertToBase64(part.data)}`,\n\n                      // OpenAI specific extension: image detail\n                      detail: part.providerOptions?.openai?.imageDetail,\n                    },\n                  };\n                } else if (part.mediaType.startsWith('audio/')) {\n                  if (part.data instanceof URL) {\n                    throw new UnsupportedFunctionalityError({\n                      functionality: 'audio file parts with URLs',\n                    });\n                  }\n\n                  switch (part.mediaType) {\n                    case 'audio/wav': {\n                      return {\n                        type: 'input_audio',\n                        input_audio: {\n                          data: convertToBase64(part.data),\n                          format: 'wav',\n                        },\n                      };\n                    }\n                    case 'audio/mp3':\n                    case 'audio/mpeg': {\n                      return {\n                        type: 'input_audio',\n                        input_audio: {\n                          data: convertToBase64(part.data),\n                          format: 'mp3',\n                        },\n                      };\n                    }\n\n                    default: {\n                      throw new UnsupportedFunctionalityError({\n                        functionality: `audio content parts with media type ${part.mediaType}`,\n                      });\n                    }\n                  }\n                } else if (part.mediaType === 'application/pdf') {\n                  if (part.data instanceof URL) {\n                    throw new UnsupportedFunctionalityError({\n                      functionality: 'PDF file parts with URLs',\n                    });\n                  }\n\n                  return {\n                    type: 'file',\n                    file:\n                      typeof part.data === 'string' &&\n                      part.data.startsWith('file-')\n                        ? { file_id: part.data }\n                        : {\n                            filename: part.filename ?? `part-${index}.pdf`,\n                            file_data: `data:application/pdf;base64,${convertToBase64(part.data)}`,\n                          },\n                  };\n                } else {\n                  throw new UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`,\n                  });\n                }\n              }\n            }\n          }),\n        });\n\n        break;\n      }\n\n      case 'assistant': {\n        let text = '';\n        const toolCalls: Array<{\n          id: string;\n          type: 'function';\n          function: { name: string; arguments: string };\n        }> = [];\n\n        for (const part of content) {\n          switch (part.type) {\n            case 'text': {\n              text += part.text;\n              break;\n            }\n            case 'tool-call': {\n              toolCalls.push({\n                id: part.toolCallId,\n                type: 'function',\n                function: {\n                  name: part.toolName,\n                  arguments: JSON.stringify(part.input),\n                },\n              });\n              break;\n            }\n          }\n        }\n\n        messages.push({\n          role: 'assistant',\n          content: text,\n          tool_calls: toolCalls.length > 0 ? toolCalls : undefined,\n        });\n\n        break;\n      }\n\n      case 'tool': {\n        for (const toolResponse of content) {\n          const output = toolResponse.output;\n\n          let contentValue: string;\n          switch (output.type) {\n            case 'text':\n            case 'error-text':\n              contentValue = output.value;\n              break;\n            case 'content':\n            case 'json':\n            case 'error-json':\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n\n          messages.push({\n            role: 'tool',\n            tool_call_id: toolResponse.toolCallId,\n            content: contentValue,\n          });\n        }\n        break;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return { messages, warnings };\n}\n","export function getResponseMetadata({\n  id,\n  model,\n  created,\n}: {\n  id?: string | undefined | null;\n  created?: number | undefined | null;\n  model?: string | undefined | null;\n}) {\n  return {\n    id: id ?? undefined,\n    modelId: model ?? undefined,\n    timestamp: created != null ? new Date(created * 1000) : undefined,\n  };\n}\n","import { LanguageModelV2FinishReason } from '@ai-sdk/provider';\n\nexport function mapOpenAIFinishReason(\n  finishReason: string | null | undefined,\n): LanguageModelV2FinishReason {\n  switch (finishReason) {\n    case 'stop':\n      return 'stop';\n    case 'length':\n      return 'length';\n    case 'content_filter':\n      return 'content-filter';\n    case 'function_call':\n    case 'tool_calls':\n      return 'tool-calls';\n    default:\n      return 'unknown';\n  }\n}\n","import { JSONSchema7 } from '@ai-sdk/provider';\nimport {\n  InferValidator,\n  lazyValidator,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { openaiErrorDataSchema } from '../openai-error';\n\nexport interface OpenAIChatFunctionTool {\n  type: 'function';\n  function: {\n    name: string;\n    description: string | undefined;\n    parameters: JSONSchema7;\n    strict?: boolean;\n  };\n}\n\nexport type OpenAIChatToolChoice =\n  | 'auto'\n  | 'none'\n  | 'required'\n  | { type: 'function'; function: { name: string } };\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nexport const openaiChatResponseSchema = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      id: z.string().nullish(),\n      created: z.number().nullish(),\n      model: z.string().nullish(),\n      choices: z.array(\n        z.object({\n          message: z.object({\n            role: z.literal('assistant').nullish(),\n            content: z.string().nullish(),\n            tool_calls: z\n              .array(\n                z.object({\n                  id: z.string().nullish(),\n                  type: z.literal('function'),\n                  function: z.object({\n                    name: z.string(),\n                    arguments: z.string(),\n                  }),\n                }),\n              )\n              .nullish(),\n            annotations: z\n              .array(\n                z.object({\n                  type: z.literal('url_citation'),\n                  start_index: z.number(),\n                  end_index: z.number(),\n                  url: z.string(),\n                  title: z.string(),\n                }),\n              )\n              .nullish(),\n          }),\n          index: z.number(),\n          logprobs: z\n            .object({\n              content: z\n                .array(\n                  z.object({\n                    token: z.string(),\n                    logprob: z.number(),\n                    top_logprobs: z.array(\n                      z.object({\n                        token: z.string(),\n                        logprob: z.number(),\n                      }),\n                    ),\n                  }),\n                )\n                .nullish(),\n            })\n            .nullish(),\n          finish_reason: z.string().nullish(),\n        }),\n      ),\n      usage: z\n        .object({\n          prompt_tokens: z.number().nullish(),\n          completion_tokens: z.number().nullish(),\n          total_tokens: z.number().nullish(),\n          prompt_tokens_details: z\n            .object({\n              cached_tokens: z.number().nullish(),\n            })\n            .nullish(),\n          completion_tokens_details: z\n            .object({\n              reasoning_tokens: z.number().nullish(),\n              accepted_prediction_tokens: z.number().nullish(),\n              rejected_prediction_tokens: z.number().nullish(),\n            })\n            .nullish(),\n        })\n        .nullish(),\n    }),\n  ),\n);\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nexport const openaiChatChunkSchema = lazyValidator(() =>\n  zodSchema(\n    z.union([\n      z.object({\n        id: z.string().nullish(),\n        created: z.number().nullish(),\n        model: z.string().nullish(),\n        choices: z.array(\n          z.object({\n            delta: z\n              .object({\n                role: z.enum(['assistant']).nullish(),\n                content: z.string().nullish(),\n                tool_calls: z\n                  .array(\n                    z.object({\n                      index: z.number(),\n                      id: z.string().nullish(),\n                      type: z.literal('function').nullish(),\n                      function: z.object({\n                        name: z.string().nullish(),\n                        arguments: z.string().nullish(),\n                      }),\n                    }),\n                  )\n                  .nullish(),\n                annotations: z\n                  .array(\n                    z.object({\n                      type: z.literal('url_citation'),\n                      start_index: z.number(),\n                      end_index: z.number(),\n                      url: z.string(),\n                      title: z.string(),\n                    }),\n                  )\n                  .nullish(),\n              })\n              .nullish(),\n            logprobs: z\n              .object({\n                content: z\n                  .array(\n                    z.object({\n                      token: z.string(),\n                      logprob: z.number(),\n                      top_logprobs: z.array(\n                        z.object({\n                          token: z.string(),\n                          logprob: z.number(),\n                        }),\n                      ),\n                    }),\n                  )\n                  .nullish(),\n              })\n              .nullish(),\n            finish_reason: z.string().nullish(),\n            index: z.number(),\n          }),\n        ),\n        usage: z\n          .object({\n            prompt_tokens: z.number().nullish(),\n            completion_tokens: z.number().nullish(),\n            total_tokens: z.number().nullish(),\n            prompt_tokens_details: z\n              .object({\n                cached_tokens: z.number().nullish(),\n              })\n              .nullish(),\n            completion_tokens_details: z\n              .object({\n                reasoning_tokens: z.number().nullish(),\n                accepted_prediction_tokens: z.number().nullish(),\n                rejected_prediction_tokens: z.number().nullish(),\n              })\n              .nullish(),\n          })\n          .nullish(),\n      }),\n      openaiErrorDataSchema,\n    ]),\n  ),\n);\n\nexport type OpenAIChatResponse = InferValidator<\n  typeof openaiChatResponseSchema\n>;\n\nexport type OpenAIChatChunk = InferValidator<typeof openaiChatChunkSchema>;\n","import {\n  InferValidator,\n  lazyValidator,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// https://platform.openai.com/docs/models\nexport type OpenAIChatModelId =\n  | 'o1'\n  | 'o1-2024-12-17'\n  | 'o3-mini'\n  | 'o3-mini-2025-01-31'\n  | 'o3'\n  | 'o3-2025-04-16'\n  | 'gpt-4.1'\n  | 'gpt-4.1-2025-04-14'\n  | 'gpt-4.1-mini'\n  | 'gpt-4.1-mini-2025-04-14'\n  | 'gpt-4.1-nano'\n  | 'gpt-4.1-nano-2025-04-14'\n  | 'gpt-4o'\n  | 'gpt-4o-2024-05-13'\n  | 'gpt-4o-2024-08-06'\n  | 'gpt-4o-2024-11-20'\n  | 'gpt-4o-mini'\n  | 'gpt-4o-mini-2024-07-18'\n  | 'gpt-4-turbo'\n  | 'gpt-4-turbo-2024-04-09'\n  | 'gpt-4'\n  | 'gpt-4-0613'\n  | 'gpt-4.5-preview'\n  | 'gpt-4.5-preview-2025-02-27'\n  | 'gpt-3.5-turbo-0125'\n  | 'gpt-3.5-turbo'\n  | 'gpt-3.5-turbo-1106'\n  | 'chatgpt-4o-latest'\n  | 'gpt-5'\n  | 'gpt-5-2025-08-07'\n  | 'gpt-5-mini'\n  | 'gpt-5-mini-2025-08-07'\n  | 'gpt-5-nano'\n  | 'gpt-5-nano-2025-08-07'\n  | 'gpt-5-chat-latest'\n  | (string & {});\n\nexport const openaiChatLanguageModelOptions = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      /**\n       * Modify the likelihood of specified tokens appearing in the completion.\n       *\n       * Accepts a JSON object that maps tokens (specified by their token ID in\n       * the GPT tokenizer) to an associated bias value from -100 to 100.\n       */\n      logitBias: z.record(z.coerce.number<string>(), z.number()).optional(),\n\n      /**\n       * Return the log probabilities of the tokens.\n       *\n       * Setting to true will return the log probabilities of the tokens that\n       * were generated.\n       *\n       * Setting to a number will return the log probabilities of the top n\n       * tokens that were generated.\n       */\n      logprobs: z.union([z.boolean(), z.number()]).optional(),\n\n      /**\n       * Whether to enable parallel function calling during tool use. Default to true.\n       */\n      parallelToolCalls: z.boolean().optional(),\n\n      /**\n       * A unique identifier representing your end-user, which can help OpenAI to\n       * monitor and detect abuse.\n       */\n      user: z.string().optional(),\n\n      /**\n       * Reasoning effort for reasoning models. Defaults to `medium`.\n       */\n      reasoningEffort: z.enum(['minimal', 'low', 'medium', 'high']).optional(),\n\n      /**\n       * Maximum number of completion tokens to generate. Useful for reasoning models.\n       */\n      maxCompletionTokens: z.number().optional(),\n\n      /**\n       * Whether to enable persistence in responses API.\n       */\n      store: z.boolean().optional(),\n\n      /**\n       * Metadata to associate with the request.\n       */\n      metadata: z.record(z.string().max(64), z.string().max(512)).optional(),\n\n      /**\n       * Parameters for prediction mode.\n       */\n      prediction: z.record(z.string(), z.any()).optional(),\n\n      /**\n       * Whether to use structured outputs.\n       *\n       * @default true\n       */\n      structuredOutputs: z.boolean().optional(),\n\n      /**\n       * Service tier for the request.\n       * - 'auto': Default service tier. The request will be processed with the service tier configured in the\n       *           Project settings. Unless otherwise configured, the Project will use 'default'.\n       * - 'flex': 50% cheaper processing at the cost of increased latency. Only available for o3 and o4-mini models.\n       * - 'priority': Higher-speed processing with predictably low latency at premium cost. Available for Enterprise customers.\n       * - 'default': The request will be processed with the standard pricing and performance for the selected model.\n       *\n       * @default 'auto'\n       */\n      serviceTier: z.enum(['auto', 'flex', 'priority', 'default']).optional(),\n\n      /**\n       * Whether to use strict JSON schema validation.\n       *\n       * @default false\n       */\n      strictJsonSchema: z.boolean().optional(),\n\n      /**\n       * Controls the verbosity of the model's responses.\n       * Lower values will result in more concise responses, while higher values will result in more verbose responses.\n       */\n      textVerbosity: z.enum(['low', 'medium', 'high']).optional(),\n\n      /**\n       * A cache key for prompt caching. Allows manual control over prompt caching behavior.\n       * Useful for improving cache hit rates and working around automatic caching issues.\n       */\n      promptCacheKey: z.string().optional(),\n\n      /**\n       * A stable identifier used to help detect users of your application\n       * that may be violating OpenAI's usage policies. The IDs should be a\n       * string that uniquely identifies each user. We recommend hashing their\n       * username or email address, in order to avoid sending us any identifying\n       * information.\n       */\n      safetyIdentifier: z.string().optional(),\n    }),\n  ),\n);\n\nexport type OpenAIChatLanguageModelOptions = InferValidator<\n  typeof openaiChatLanguageModelOptions\n>;\n","import {\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  OpenAIChatToolChoice,\n  OpenAIChatFunctionTool,\n} from './openai-chat-api';\n\nexport function prepareChatTools({\n  tools,\n  toolChoice,\n  structuredOutputs,\n  strictJsonSchema,\n}: {\n  tools: LanguageModelV2CallOptions['tools'];\n  toolChoice?: LanguageModelV2CallOptions['toolChoice'];\n  structuredOutputs: boolean;\n  strictJsonSchema: boolean;\n}): {\n  tools?: OpenAIChatFunctionTool[];\n  toolChoice?: OpenAIChatToolChoice;\n  toolWarnings: Array<LanguageModelV2CallWarning>;\n} {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  tools = tools?.length ? tools : undefined;\n\n  const toolWarnings: LanguageModelV2CallWarning[] = [];\n\n  if (tools == null) {\n    return { tools: undefined, toolChoice: undefined, toolWarnings };\n  }\n\n  const openaiTools: OpenAIChatFunctionTool[] = [];\n\n  for (const tool of tools) {\n    switch (tool.type) {\n      case 'function':\n        openaiTools.push({\n          type: 'function',\n          function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: tool.inputSchema,\n            strict: structuredOutputs ? strictJsonSchema : undefined,\n          },\n        });\n        break;\n      default:\n        toolWarnings.push({ type: 'unsupported-tool', tool });\n        break;\n    }\n  }\n\n  if (toolChoice == null) {\n    return { tools: openaiTools, toolChoice: undefined, toolWarnings };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n    case 'none':\n    case 'required':\n      return { tools: openaiTools, toolChoice: type, toolWarnings };\n    case 'tool':\n      return {\n        tools: openaiTools,\n        toolChoice: {\n          type: 'function',\n          function: {\n            name: toolChoice.toolName,\n          },\n        },\n        toolWarnings,\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`,\n      });\n    }\n  }\n}\n","import {\n  LanguageModelV2,\n  LanguageModelV2CallWarning,\n  LanguageModelV2FinishReason,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  ParseResult,\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonResponseHandler,\n  parseProviderOptions,\n  postJsonToApi,\n} from '@ai-sdk/provider-utils';\nimport { openaiFailedResponseHandler } from '../openai-error';\nimport { convertToOpenAICompletionPrompt } from './convert-to-openai-completion-prompt';\nimport { getResponseMetadata } from './get-response-metadata';\nimport { mapOpenAIFinishReason } from './map-openai-finish-reason';\nimport {\n  OpenAICompletionChunk,\n  openaiCompletionChunkSchema,\n  openaiCompletionResponseSchema,\n} from './openai-completion-api';\nimport {\n  OpenAICompletionModelId,\n  openaiCompletionProviderOptions,\n} from './openai-completion-options';\n\ntype OpenAICompletionConfig = {\n  provider: string;\n  headers: () => Record<string, string | undefined>;\n  url: (options: { modelId: string; path: string }) => string;\n  fetch?: FetchFunction;\n};\n\nexport class OpenAICompletionLanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  readonly modelId: OpenAICompletionModelId;\n\n  private readonly config: OpenAICompletionConfig;\n\n  private get providerOptionsName(): string {\n    return this.config.provider.split('.')[0].trim();\n  }\n\n  constructor(\n    modelId: OpenAICompletionModelId,\n    config: OpenAICompletionConfig,\n  ) {\n    this.modelId = modelId;\n    this.config = config;\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  readonly supportedUrls: Record<string, RegExp[]> = {\n    // No URLs are supported for completion models.\n  };\n\n  private async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences: userStopSequences,\n    responseFormat,\n    tools,\n    toolChoice,\n    seed,\n    providerOptions,\n  }: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const warnings: LanguageModelV2CallWarning[] = [];\n\n    // Parse provider options\n    const openaiOptions = {\n      ...(await parseProviderOptions({\n        provider: 'openai',\n        providerOptions,\n        schema: openaiCompletionProviderOptions,\n      })),\n      ...(await parseProviderOptions({\n        provider: this.providerOptionsName,\n        providerOptions,\n        schema: openaiCompletionProviderOptions,\n      })),\n    };\n\n    if (topK != null) {\n      warnings.push({ type: 'unsupported-setting', setting: 'topK' });\n    }\n\n    if (tools?.length) {\n      warnings.push({ type: 'unsupported-setting', setting: 'tools' });\n    }\n\n    if (toolChoice != null) {\n      warnings.push({ type: 'unsupported-setting', setting: 'toolChoice' });\n    }\n\n    if (responseFormat != null && responseFormat.type !== 'text') {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'responseFormat',\n        details: 'JSON response format is not supported.',\n      });\n    }\n\n    const { prompt: completionPrompt, stopSequences } =\n      convertToOpenAICompletionPrompt({ prompt });\n\n    const stop = [...(stopSequences ?? []), ...(userStopSequences ?? [])];\n\n    return {\n      args: {\n        // model id:\n        model: this.modelId,\n\n        // model specific settings:\n        echo: openaiOptions.echo,\n        logit_bias: openaiOptions.logitBias,\n        logprobs:\n          openaiOptions?.logprobs === true\n            ? 0\n            : openaiOptions?.logprobs === false\n              ? undefined\n              : openaiOptions?.logprobs,\n        suffix: openaiOptions.suffix,\n        user: openaiOptions.user,\n\n        // standardized settings:\n        max_tokens: maxOutputTokens,\n        temperature,\n        top_p: topP,\n        frequency_penalty: frequencyPenalty,\n        presence_penalty: presencePenalty,\n        seed,\n\n        // prompt:\n        prompt: completionPrompt,\n\n        // stop sequences:\n        stop: stop.length > 0 ? stop : undefined,\n      },\n      warnings,\n    };\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args, warnings } = await this.getArgs(options);\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url: this.config.url({\n        path: '/completions',\n        modelId: this.modelId,\n      }),\n      headers: combineHeaders(this.config.headers(), options.headers),\n      body: args,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        openaiCompletionResponseSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const choice = response.choices[0];\n\n    const providerMetadata: SharedV2ProviderMetadata = { openai: {} };\n\n    if (choice.logprobs != null) {\n      providerMetadata.openai.logprobs = choice.logprobs;\n    }\n\n    return {\n      content: [{ type: 'text', text: choice.text }],\n      usage: {\n        inputTokens: response.usage?.prompt_tokens,\n        outputTokens: response.usage?.completion_tokens,\n        totalTokens: response.usage?.total_tokens,\n      },\n      finishReason: mapOpenAIFinishReason(choice.finish_reason),\n      request: { body: args },\n      response: {\n        ...getResponseMetadata(response),\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n      providerMetadata,\n      warnings,\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings } = await this.getArgs(options);\n\n    const body = {\n      ...args,\n      stream: true,\n\n      stream_options: {\n        include_usage: true,\n      },\n    };\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url: this.config.url({\n        path: '/completions',\n        modelId: this.modelId,\n      }),\n      headers: combineHeaders(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(\n        openaiCompletionChunkSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    let finishReason: LanguageModelV2FinishReason = 'unknown';\n    const providerMetadata: SharedV2ProviderMetadata = { openai: {} };\n    const usage: LanguageModelV2Usage = {\n      inputTokens: undefined,\n      outputTokens: undefined,\n      totalTokens: undefined,\n    };\n    let isFirstChunk = true;\n\n    return {\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<OpenAICompletionChunk>,\n          LanguageModelV2StreamPart\n        >({\n          start(controller) {\n            controller.enqueue({ type: 'stream-start', warnings });\n          },\n\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: 'raw', rawValue: chunk.rawValue });\n            }\n\n            // handle failed chunk parsing / validation:\n            if (!chunk.success) {\n              finishReason = 'error';\n              controller.enqueue({ type: 'error', error: chunk.error });\n              return;\n            }\n\n            const value = chunk.value;\n\n            // handle error chunks:\n            if ('error' in value) {\n              finishReason = 'error';\n              controller.enqueue({ type: 'error', error: value.error });\n              return;\n            }\n\n            if (isFirstChunk) {\n              isFirstChunk = false;\n\n              controller.enqueue({\n                type: 'response-metadata',\n                ...getResponseMetadata(value),\n              });\n\n              controller.enqueue({ type: 'text-start', id: '0' });\n            }\n\n            if (value.usage != null) {\n              usage.inputTokens = value.usage.prompt_tokens;\n              usage.outputTokens = value.usage.completion_tokens;\n              usage.totalTokens = value.usage.total_tokens;\n            }\n\n            const choice = value.choices[0];\n\n            if (choice?.finish_reason != null) {\n              finishReason = mapOpenAIFinishReason(choice.finish_reason);\n            }\n\n            if (choice?.logprobs != null) {\n              providerMetadata.openai.logprobs = choice.logprobs;\n            }\n\n            if (choice?.text != null && choice.text.length > 0) {\n              controller.enqueue({\n                type: 'text-delta',\n                id: '0',\n                delta: choice.text,\n              });\n            }\n          },\n\n          flush(controller) {\n            if (!isFirstChunk) {\n              controller.enqueue({ type: 'text-end', id: '0' });\n            }\n\n            controller.enqueue({\n              type: 'finish',\n              finishReason,\n              providerMetadata,\n              usage,\n            });\n          },\n        }),\n      ),\n      request: { body },\n      response: { headers: responseHeaders },\n    };\n  }\n}\n","import {\n  InvalidPromptError,\n  LanguageModelV2Prompt,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\n\nexport function convertToOpenAICompletionPrompt({\n  prompt,\n  user = 'user',\n  assistant = 'assistant',\n}: {\n  prompt: LanguageModelV2Prompt;\n  user?: string;\n  assistant?: string;\n}): {\n  prompt: string;\n  stopSequences?: string[];\n} {\n  // transform to a chat message format:\n  let text = '';\n\n  // if first message is a system message, add it to the text:\n  if (prompt[0].role === 'system') {\n    text += `${prompt[0].content}\\n\\n`;\n    prompt = prompt.slice(1);\n  }\n\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case 'system': {\n        throw new InvalidPromptError({\n          message: 'Unexpected system message in prompt: ${content}',\n          prompt,\n        });\n      }\n\n      case 'user': {\n        const userMessage = content\n          .map(part => {\n            switch (part.type) {\n              case 'text': {\n                return part.text;\n              }\n            }\n          })\n          .filter(Boolean)\n          .join('');\n\n        text += `${user}:\\n${userMessage}\\n\\n`;\n        break;\n      }\n\n      case 'assistant': {\n        const assistantMessage = content\n          .map(part => {\n            switch (part.type) {\n              case 'text': {\n                return part.text;\n              }\n              case 'tool-call': {\n                throw new UnsupportedFunctionalityError({\n                  functionality: 'tool-call messages',\n                });\n              }\n            }\n          })\n          .join('');\n\n        text += `${assistant}:\\n${assistantMessage}\\n\\n`;\n        break;\n      }\n\n      case 'tool': {\n        throw new UnsupportedFunctionalityError({\n          functionality: 'tool messages',\n        });\n      }\n\n      default: {\n        const _exhaustiveCheck: never = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  // Assistant message prefix:\n  text += `${assistant}:\\n`;\n\n  return {\n    prompt: text,\n    stopSequences: [`\\n${user}:`],\n  };\n}\n","export function getResponseMetadata({\n  id,\n  model,\n  created,\n}: {\n  id?: string | undefined | null;\n  created?: number | undefined | null;\n  model?: string | undefined | null;\n}) {\n  return {\n    id: id ?? undefined,\n    modelId: model ?? undefined,\n    timestamp: created != null ? new Date(created * 1000) : undefined,\n  };\n}\n","import { LanguageModelV2FinishReason } from '@ai-sdk/provider';\n\nexport function mapOpenAIFinishReason(\n  finishReason: string | null | undefined,\n): LanguageModelV2FinishReason {\n  switch (finishReason) {\n    case 'stop':\n      return 'stop';\n    case 'length':\n      return 'length';\n    case 'content_filter':\n      return 'content-filter';\n    case 'function_call':\n    case 'tool_calls':\n      return 'tool-calls';\n    default:\n      return 'unknown';\n  }\n}\n","import { z } from 'zod/v4';\nimport { openaiErrorDataSchema } from '../openai-error';\nimport {\n  InferValidator,\n  lazyValidator,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nexport const openaiCompletionResponseSchema = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      id: z.string().nullish(),\n      created: z.number().nullish(),\n      model: z.string().nullish(),\n      choices: z.array(\n        z.object({\n          text: z.string(),\n          finish_reason: z.string(),\n          logprobs: z\n            .object({\n              tokens: z.array(z.string()),\n              token_logprobs: z.array(z.number()),\n              top_logprobs: z.array(z.record(z.string(), z.number())).nullish(),\n            })\n            .nullish(),\n        }),\n      ),\n      usage: z\n        .object({\n          prompt_tokens: z.number(),\n          completion_tokens: z.number(),\n          total_tokens: z.number(),\n        })\n        .nullish(),\n    }),\n  ),\n);\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nexport const openaiCompletionChunkSchema = lazyValidator(() =>\n  zodSchema(\n    z.union([\n      z.object({\n        id: z.string().nullish(),\n        created: z.number().nullish(),\n        model: z.string().nullish(),\n        choices: z.array(\n          z.object({\n            text: z.string(),\n            finish_reason: z.string().nullish(),\n            index: z.number(),\n            logprobs: z\n              .object({\n                tokens: z.array(z.string()),\n                token_logprobs: z.array(z.number()),\n                top_logprobs: z\n                  .array(z.record(z.string(), z.number()))\n                  .nullish(),\n              })\n              .nullish(),\n          }),\n        ),\n        usage: z\n          .object({\n            prompt_tokens: z.number(),\n            completion_tokens: z.number(),\n            total_tokens: z.number(),\n          })\n          .nullish(),\n      }),\n      openaiErrorDataSchema,\n    ]),\n  ),\n);\n\nexport type OpenAICompletionChunk = InferValidator<\n  typeof openaiCompletionChunkSchema\n>;\n\nexport type OpenAICompletionResponse = InferValidator<\n  typeof openaiCompletionResponseSchema\n>;\n","import {\n  InferValidator,\n  lazyValidator,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// https://platform.openai.com/docs/models\nexport type OpenAICompletionModelId = 'gpt-3.5-turbo-instruct' | (string & {});\n\nexport const openaiCompletionProviderOptions = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      /**\nEcho back the prompt in addition to the completion.\n   */\n      echo: z.boolean().optional(),\n\n      /**\nModify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in\nthe GPT tokenizer) to an associated bias value from -100 to 100. You\ncan use this tokenizer tool to convert text to token IDs. Mathematically,\nthe bias is added to the logits generated by the model prior to sampling.\nThe exact effect will vary per model, but values between -1 and 1 should\ndecrease or increase likelihood of selection; values like -100 or 100\nshould result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass {\"50256\": -100} to prevent the <|endoftext|>\ntoken from being generated.\n */\n      logitBias: z.record(z.string(), z.number()).optional(),\n\n      /**\nThe suffix that comes after a completion of inserted text.\n */\n      suffix: z.string().optional(),\n\n      /**\nA unique identifier representing your end-user, which can help OpenAI to\nmonitor and detect abuse. Learn more.\n */\n      user: z.string().optional(),\n\n      /**\nReturn the log probabilities of the tokens. Including logprobs will increase\nthe response size and can slow down response times. However, it can\nbe useful to better understand how the model is behaving.\nSetting to true will return the log probabilities of the tokens that\nwere generated.\nSetting to a number will return the log probabilities of the top n\ntokens that were generated.\n   */\n      logprobs: z.union([z.boolean(), z.number()]).optional(),\n    }),\n  ),\n);\n\nexport type OpenAICompletionProviderOptions = InferValidator<\n  typeof openaiCompletionProviderOptions\n>;\n","import {\n  EmbeddingModelV2,\n  TooManyEmbeddingValuesForCallError,\n} from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createJsonResponseHandler,\n  parseProviderOptions,\n  postJsonToApi,\n} from '@ai-sdk/provider-utils';\nimport { OpenAIConfig } from '../openai-config';\nimport { openaiFailedResponseHandler } from '../openai-error';\nimport {\n  OpenAIEmbeddingModelId,\n  openaiEmbeddingProviderOptions,\n} from './openai-embedding-options';\nimport { openaiTextEmbeddingResponseSchema } from './openai-embedding-api';\n\nexport class OpenAIEmbeddingModel implements EmbeddingModelV2<string> {\n  readonly specificationVersion = 'v2';\n  readonly modelId: OpenAIEmbeddingModelId;\n  readonly maxEmbeddingsPerCall = 2048;\n  readonly supportsParallelCalls = true;\n\n  private readonly config: OpenAIConfig;\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  constructor(modelId: OpenAIEmbeddingModelId, config: OpenAIConfig) {\n    this.modelId = modelId;\n    this.config = config;\n  }\n\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions,\n  }: Parameters<EmbeddingModelV2<string>['doEmbed']>[0]): Promise<\n    Awaited<ReturnType<EmbeddingModelV2<string>['doEmbed']>>\n  > {\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values,\n      });\n    }\n\n    // Parse provider options\n    const openaiOptions =\n      (await parseProviderOptions({\n        provider: 'openai',\n        providerOptions,\n        schema: openaiEmbeddingProviderOptions,\n      })) ?? {};\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue,\n    } = await postJsonToApi({\n      url: this.config.url({\n        path: '/embeddings',\n        modelId: this.modelId,\n      }),\n      headers: combineHeaders(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        input: values,\n        encoding_format: 'float',\n        dimensions: openaiOptions.dimensions,\n        user: openaiOptions.user,\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        openaiTextEmbeddingResponseSchema,\n      ),\n      abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    return {\n      embeddings: response.data.map(item => item.embedding),\n      usage: response.usage\n        ? { tokens: response.usage.prompt_tokens }\n        : undefined,\n      response: { headers: responseHeaders, body: rawValue },\n    };\n  }\n}\n","import {\n  InferValidator,\n  lazyValidator,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport type OpenAIEmbeddingModelId =\n  | 'text-embedding-3-small'\n  | 'text-embedding-3-large'\n  | 'text-embedding-ada-002'\n  | (string & {});\n\nexport const openaiEmbeddingProviderOptions = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      /**\nThe number of dimensions the resulting output embeddings should have.\nOnly supported in text-embedding-3 and later models.\n   */\n      dimensions: z.number().optional(),\n\n      /**\nA unique identifier representing your end-user, which can help OpenAI to\nmonitor and detect abuse. Learn more.\n*/\n      user: z.string().optional(),\n    }),\n  ),\n);\n\nexport type OpenAIEmbeddingProviderOptions = InferValidator<\n  typeof openaiEmbeddingProviderOptions\n>;\n","import { lazyValidator, zodSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// minimal version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nexport const openaiTextEmbeddingResponseSchema = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      data: z.array(z.object({ embedding: z.array(z.number()) })),\n      usage: z.object({ prompt_tokens: z.number() }).nullish(),\n    }),\n  ),\n);\n","import { ImageModelV2, ImageModelV2CallWarning } from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createJsonResponseHandler,\n  postJsonToApi,\n} from '@ai-sdk/provider-utils';\nimport { OpenAIConfig } from '../openai-config';\nimport { openaiFailedResponseHandler } from '../openai-error';\nimport { openaiImageResponseSchema } from './openai-image-api';\nimport {\n  OpenAIImageModelId,\n  hasDefaultResponseFormat,\n  modelMaxImagesPerCall,\n} from './openai-image-options';\n\ninterface OpenAIImageModelConfig extends OpenAIConfig {\n  _internal?: {\n    currentDate?: () => Date;\n  };\n}\n\nexport class OpenAIImageModel implements ImageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  get maxImagesPerCall(): number {\n    return modelMaxImagesPerCall[this.modelId] ?? 1;\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  constructor(\n    readonly modelId: OpenAIImageModelId,\n    private readonly config: OpenAIImageModelConfig,\n  ) {}\n\n  async doGenerate({\n    prompt,\n    n,\n    size,\n    aspectRatio,\n    seed,\n    providerOptions,\n    headers,\n    abortSignal,\n  }: Parameters<ImageModelV2['doGenerate']>[0]): Promise<\n    Awaited<ReturnType<ImageModelV2['doGenerate']>>\n  > {\n    const warnings: Array<ImageModelV2CallWarning> = [];\n\n    if (aspectRatio != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'aspectRatio',\n        details:\n          'This model does not support aspect ratio. Use `size` instead.',\n      });\n    }\n\n    if (seed != null) {\n      warnings.push({ type: 'unsupported-setting', setting: 'seed' });\n    }\n\n    const currentDate = this.config._internal?.currentDate?.() ?? new Date();\n    const { value: response, responseHeaders } = await postJsonToApi({\n      url: this.config.url({\n        path: '/images/generations',\n        modelId: this.modelId,\n      }),\n      headers: combineHeaders(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        prompt,\n        n,\n        size,\n        ...(providerOptions.openai ?? {}),\n        ...(!hasDefaultResponseFormat.has(this.modelId)\n          ? { response_format: 'b64_json' }\n          : {}),\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        openaiImageResponseSchema,\n      ),\n      abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    return {\n      images: response.data.map(item => item.b64_json),\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n      },\n      providerMetadata: {\n        openai: {\n          images: response.data.map(item =>\n            item.revised_prompt\n              ? {\n                  revisedPrompt: item.revised_prompt,\n                }\n              : null,\n          ),\n        },\n      },\n    };\n  }\n}\n","import { lazyValidator, zodSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// minimal version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nexport const openaiImageResponseSchema = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      data: z.array(\n        z.object({\n          b64_json: z.string(),\n          revised_prompt: z.string().optional(),\n        }),\n      ),\n    }),\n  ),\n);\n","export type OpenAIImageModelId =\n  | 'dall-e-3'\n  | 'dall-e-2'\n  | 'gpt-image-1'\n  | 'gpt-image-1-mini'\n  | (string & {});\n\n// https://platform.openai.com/docs/guides/images\nexport const modelMaxImagesPerCall: Record<OpenAIImageModelId, number> = {\n  'dall-e-3': 1,\n  'dall-e-2': 10,\n  'gpt-image-1': 10,\n  'gpt-image-1-mini': 10,\n};\n\nexport const hasDefaultResponseFormat = new Set([\n  'gpt-image-1',\n  'gpt-image-1-mini',\n]);\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const codeInterpreterInputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      code: z.string().nullish(),\n      containerId: z.string(),\n    }),\n  ),\n);\n\nexport const codeInterpreterOutputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      outputs: z\n        .array(\n          z.discriminatedUnion('type', [\n            z.object({ type: z.literal('logs'), logs: z.string() }),\n            z.object({ type: z.literal('image'), url: z.string() }),\n          ]),\n        )\n        .nullish(),\n    }),\n  ),\n);\n\nexport const codeInterpreterArgsSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      container: z\n        .union([\n          z.string(),\n          z.object({\n            fileIds: z.array(z.string()).optional(),\n          }),\n        ])\n        .optional(),\n    }),\n  ),\n);\n\ntype CodeInterpreterArgs = {\n  /**\n   * The code interpreter container.\n   * Can be a container ID\n   * or an object that specifies uploaded file IDs to make available to your code.\n   */\n  container?: string | { fileIds?: string[] };\n};\n\nexport const codeInterpreterToolFactory =\n  createProviderDefinedToolFactoryWithOutputSchema<\n    {\n      /**\n       * The code to run, or null if not available.\n       */\n      code?: string | null;\n\n      /**\n       * The ID of the container used to run the code.\n       */\n      containerId: string;\n    },\n    {\n      /**\n       * The outputs generated by the code interpreter, such as logs or images.\n       * Can be null if no outputs are available.\n       */\n      outputs?: Array<\n        | {\n            type: 'logs';\n\n            /**\n             * The logs output from the code interpreter.\n             */\n            logs: string;\n          }\n        | {\n            type: 'image';\n\n            /**\n             * The URL of the image output from the code interpreter.\n             */\n            url: string;\n          }\n      > | null;\n    },\n    CodeInterpreterArgs\n  >({\n    id: 'openai.code_interpreter',\n    name: 'code_interpreter',\n    inputSchema: codeInterpreterInputSchema,\n    outputSchema: codeInterpreterOutputSchema,\n  });\n\nexport const codeInterpreter = (\n  args: CodeInterpreterArgs = {}, // default\n) => {\n  return codeInterpreterToolFactory(args);\n};\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport {\n  OpenAIResponsesFileSearchToolComparisonFilter,\n  OpenAIResponsesFileSearchToolCompoundFilter,\n} from '../responses/openai-responses-api';\n\nconst comparisonFilterSchema = z.object({\n  key: z.string(),\n  type: z.enum(['eq', 'ne', 'gt', 'gte', 'lt', 'lte']),\n  value: z.union([z.string(), z.number(), z.boolean()]),\n});\n\nconst compoundFilterSchema: z.ZodType<any> = z.object({\n  type: z.enum(['and', 'or']),\n  filters: z.array(\n    z.union([comparisonFilterSchema, z.lazy(() => compoundFilterSchema)]),\n  ),\n});\n\nexport const fileSearchArgsSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      vectorStoreIds: z.array(z.string()),\n      maxNumResults: z.number().optional(),\n      ranking: z\n        .object({\n          ranker: z.string().optional(),\n          scoreThreshold: z.number().optional(),\n        })\n        .optional(),\n      filters: z\n        .union([comparisonFilterSchema, compoundFilterSchema])\n        .optional(),\n    }),\n  ),\n);\n\nexport const fileSearchOutputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      queries: z.array(z.string()),\n      results: z\n        .array(\n          z.object({\n            attributes: z.record(z.string(), z.unknown()),\n            fileId: z.string(),\n            filename: z.string(),\n            score: z.number(),\n            text: z.string(),\n          }),\n        )\n        .nullable(),\n    }),\n  ),\n);\n\nexport const fileSearch = createProviderDefinedToolFactoryWithOutputSchema<\n  {},\n  {\n    /**\n     * The search query to execute.\n     */\n    queries: string[];\n\n    /**\n     * The results of the file search tool call.\n     */\n    results:\n      | null\n      | {\n          /**\n           * Set of 16 key-value pairs that can be attached to an object.\n           * This can be useful for storing additional information about the object\n           * in a structured format, and querying for objects via API or the dashboard.\n           * Keys are strings with a maximum length of 64 characters.\n           * Values are strings with a maximum length of 512 characters, booleans, or numbers.\n           */\n          attributes: Record<string, unknown>;\n\n          /**\n           * The unique ID of the file.\n           */\n          fileId: string;\n\n          /**\n           * The name of the file.\n           */\n          filename: string;\n\n          /**\n           * The relevance score of the file - a value between 0 and 1.\n           */\n          score: number;\n\n          /**\n           * The text that was retrieved from the file.\n           */\n          text: string;\n        }[];\n  },\n  {\n    /**\n     * List of vector store IDs to search through.\n     */\n    vectorStoreIds: string[];\n\n    /**\n     * Maximum number of search results to return. Defaults to 10.\n     */\n    maxNumResults?: number;\n\n    /**\n     * Ranking options for the search.\n     */\n    ranking?: {\n      /**\n       * The ranker to use for the file search.\n       */\n      ranker?: string;\n\n      /**\n       * The score threshold for the file search, a number between 0 and 1.\n       * Numbers closer to 1 will attempt to return only the most relevant results,\n       * but may return fewer results.\n       */\n      scoreThreshold?: number;\n    };\n\n    /**\n     * A filter to apply.\n     */\n    filters?:\n      | OpenAIResponsesFileSearchToolComparisonFilter\n      | OpenAIResponsesFileSearchToolCompoundFilter;\n  }\n>({\n  id: 'openai.file_search',\n  name: 'file_search',\n  inputSchema: z.object({}),\n  outputSchema: fileSearchOutputSchema,\n});\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const imageGenerationArgsSchema = lazySchema(() =>\n  zodSchema(\n    z\n      .object({\n        background: z.enum(['auto', 'opaque', 'transparent']).optional(),\n        inputFidelity: z.enum(['low', 'high']).optional(),\n        inputImageMask: z\n          .object({\n            fileId: z.string().optional(),\n            imageUrl: z.string().optional(),\n          })\n          .optional(),\n        model: z.string().optional(),\n        moderation: z.enum(['auto']).optional(),\n        outputCompression: z.number().int().min(0).max(100).optional(),\n        outputFormat: z.enum(['png', 'jpeg', 'webp']).optional(),\n        partialImages: z.number().int().min(0).max(3).optional(),\n        quality: z.enum(['auto', 'low', 'medium', 'high']).optional(),\n        size: z\n          .enum(['1024x1024', '1024x1536', '1536x1024', 'auto'])\n          .optional(),\n      })\n      .strict(),\n  ),\n);\n\nconst imageGenerationInputSchema = lazySchema(() => zodSchema(z.object({})));\n\nexport const imageGenerationOutputSchema = lazySchema(() =>\n  zodSchema(z.object({ result: z.string() })),\n);\n\ntype ImageGenerationArgs = {\n  /**\n   * Background type for the generated image. Default is 'auto'.\n   */\n  background?: 'auto' | 'opaque' | 'transparent';\n\n  /**\n   * Input fidelity for the generated image. Default is 'low'.\n   */\n  inputFidelity?: 'low' | 'high';\n\n  /**\n   * Optional mask for inpainting.\n   * Contains image_url (string, optional) and file_id (string, optional).\n   */\n  inputImageMask?: {\n    /**\n     * File ID for the mask image.\n     */\n    fileId?: string;\n\n    /**\n     * Base64-encoded mask image.\n     */\n    imageUrl?: string;\n  };\n\n  /**\n   * The image generation model to use. Default: gpt-image-1.\n   */\n  model?: string;\n\n  /**\n   * Moderation level for the generated image. Default: auto.\n   */\n  moderation?: 'auto';\n\n  /**\n   * Compression level for the output image. Default: 100.\n   */\n  outputCompression?: number;\n\n  /**\n   * The output format of the generated image. One of png, webp, or jpeg.\n   * Default: png\n   */\n  outputFormat?: 'png' | 'jpeg' | 'webp';\n\n  /**\n   * The quality of the generated image.\n   * One of low, medium, high, or auto. Default: auto.\n   */\n  quality?: 'auto' | 'low' | 'medium' | 'high';\n\n  /**\n   * The size of the generated image.\n   * One of 1024x1024, 1024x1536, 1536x1024, or auto.\n   * Default: auto.\n   */\n  size?: 'auto' | '1024x1024' | '1024x1536' | '1536x1024';\n};\n\nconst imageGenerationToolFactory =\n  createProviderDefinedToolFactoryWithOutputSchema<\n    {},\n    {\n      /**\n       * The generated image encoded in base64.\n       */\n      result: string;\n    },\n    ImageGenerationArgs\n  >({\n    id: 'openai.image_generation',\n    name: 'image_generation',\n    inputSchema: imageGenerationInputSchema,\n    outputSchema: imageGenerationOutputSchema,\n  });\n\nexport const imageGeneration = (\n  args: ImageGenerationArgs = {}, // default\n) => {\n  return imageGenerationToolFactory(args);\n};\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const localShellInputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      action: z.object({\n        type: z.literal('exec'),\n        command: z.array(z.string()),\n        timeoutMs: z.number().optional(),\n        user: z.string().optional(),\n        workingDirectory: z.string().optional(),\n        env: z.record(z.string(), z.string()).optional(),\n      }),\n    }),\n  ),\n);\n\nexport const localShellOutputSchema = lazySchema(() =>\n  zodSchema(z.object({ output: z.string() })),\n);\n\nexport const localShell = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * Execute a shell command on the server.\n     */\n    action: {\n      type: 'exec';\n\n      /**\n       * The command to run.\n       */\n      command: string[];\n\n      /**\n       * Optional timeout in milliseconds for the command.\n       */\n      timeoutMs?: number;\n\n      /**\n       * Optional user to run the command as.\n       */\n      user?: string;\n\n      /**\n       * Optional working directory to run the command in.\n       */\n      workingDirectory?: string;\n\n      /**\n       * Environment variables to set for the command.\n       */\n      env?: Record<string, string>;\n    };\n  },\n  {\n    /**\n     * The output of local shell tool call.\n     */\n    output: string;\n  },\n  {}\n>({\n  id: 'openai.local_shell',\n  name: 'local_shell',\n  inputSchema: localShellInputSchema,\n  outputSchema: localShellOutputSchema,\n});\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const webSearchArgsSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      filters: z\n        .object({ allowedDomains: z.array(z.string()).optional() })\n        .optional(),\n      searchContextSize: z.enum(['low', 'medium', 'high']).optional(),\n      userLocation: z\n        .object({\n          type: z.literal('approximate'),\n          country: z.string().optional(),\n          city: z.string().optional(),\n          region: z.string().optional(),\n          timezone: z.string().optional(),\n        })\n        .optional(),\n    }),\n  ),\n);\n\nconst webSearchInputSchema = lazySchema(() => zodSchema(z.object({})));\n\nexport const webSearchOutputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      action: z.discriminatedUnion('type', [\n        z.object({\n          type: z.literal('search'),\n          query: z.string().optional(),\n        }),\n        z.object({\n          type: z.literal('openPage'),\n          url: z.string(),\n        }),\n        z.object({\n          type: z.literal('find'),\n          url: z.string(),\n          pattern: z.string(),\n        }),\n      ]),\n    }),\n  ),\n);\n\nexport const webSearchToolFactory =\n  createProviderDefinedToolFactoryWithOutputSchema<\n    {\n      // Web search doesn't take input parameters - it's controlled by the prompt\n    },\n    {\n      /**\n       * An object describing the specific action taken in this web search call.\n       * Includes details on how the model used the web (search, open_page, find).\n       */\n      action:\n        | {\n            /**\n             * Action type \"search\" - Performs a web search query.\n             */\n            type: 'search';\n\n            /**\n             * The search query.\n             */\n            query?: string;\n          }\n        | {\n            /**\n             * Action type \"openPage\" - Opens a specific URL from search results.\n             */\n            type: 'openPage';\n\n            /**\n             * The URL opened by the model.\n             */\n            url: string;\n          }\n        | {\n            /**\n             * Action type \"find\": Searches for a pattern within a loaded page.\n             */\n            type: 'find';\n\n            /**\n             * The URL of the page searched for the pattern.\n             */\n            url: string;\n\n            /**\n             * The pattern or text to search for within the page.\n             */\n            pattern: string;\n          };\n    },\n    {\n      /**\n       * Filters for the search.\n       */\n      filters?: {\n        /**\n         * Allowed domains for the search.\n         * If not provided, all domains are allowed.\n         * Subdomains of the provided domains are allowed as well.\n         */\n        allowedDomains?: string[];\n      };\n\n      /**\n       * Search context size to use for the web search.\n       * - high: Most comprehensive context, highest cost, slower response\n       * - medium: Balanced context, cost, and latency (default)\n       * - low: Least context, lowest cost, fastest response\n       */\n      searchContextSize?: 'low' | 'medium' | 'high';\n\n      /**\n       * User location information to provide geographically relevant search results.\n       */\n      userLocation?: {\n        /**\n         * Type of location (always 'approximate')\n         */\n        type: 'approximate';\n        /**\n         * Two-letter ISO country code (e.g., 'US', 'GB')\n         */\n        country?: string;\n        /**\n         * City name (free text, e.g., 'Minneapolis')\n         */\n        city?: string;\n        /**\n         * Region name (free text, e.g., 'Minnesota')\n         */\n        region?: string;\n        /**\n         * IANA timezone (e.g., 'America/Chicago')\n         */\n        timezone?: string;\n      };\n    }\n  >({\n    id: 'openai.web_search',\n    name: 'web_search',\n    inputSchema: webSearchInputSchema,\n    outputSchema: webSearchOutputSchema,\n  });\n\nexport const webSearch = (\n  args: Parameters<typeof webSearchToolFactory>[0] = {}, // default\n) => webSearchToolFactory(args);\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const webSearchPreviewArgsSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      searchContextSize: z.enum(['low', 'medium', 'high']).optional(),\n      userLocation: z\n        .object({\n          type: z.literal('approximate'),\n          country: z.string().optional(),\n          city: z.string().optional(),\n          region: z.string().optional(),\n          timezone: z.string().optional(),\n        })\n        .optional(),\n    }),\n  ),\n);\n\nexport const webSearchPreviewInputSchema = lazySchema(() =>\n  zodSchema(z.object({})),\n);\n\nconst webSearchPreviewOutputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      action: z.discriminatedUnion('type', [\n        z.object({\n          type: z.literal('search'),\n          query: z.string().optional(),\n        }),\n        z.object({\n          type: z.literal('openPage'),\n          url: z.string(),\n        }),\n        z.object({\n          type: z.literal('find'),\n          url: z.string(),\n          pattern: z.string(),\n        }),\n      ]),\n    }),\n  ),\n);\n\nexport const webSearchPreview =\n  createProviderDefinedToolFactoryWithOutputSchema<\n    {\n      // Web search preview doesn't take input parameters - it's controlled by the prompt\n    },\n    {\n      /**\n       * An object describing the specific action taken in this web search call.\n       * Includes details on how the model used the web (search, open_page, find).\n       */\n      action:\n        | {\n            /**\n             * Action type \"search\" - Performs a web search query.\n             */\n            type: 'search';\n\n            /**\n             * The search query.\n             */\n            query?: string;\n          }\n        | {\n            /**\n             * Action type \"openPage\" - Opens a specific URL from search results.\n             */\n            type: 'openPage';\n\n            /**\n             * The URL opened by the model.\n             */\n            url: string;\n          }\n        | {\n            /**\n             * Action type \"find\": Searches for a pattern within a loaded page.\n             */\n            type: 'find';\n\n            /**\n             * The URL of the page searched for the pattern.\n             */\n            url: string;\n\n            /**\n             * The pattern or text to search for within the page.\n             */\n            pattern: string;\n          };\n    },\n    {\n      /**\n       * Search context size to use for the web search.\n       * - high: Most comprehensive context, highest cost, slower response\n       * - medium: Balanced context, cost, and latency (default)\n       * - low: Least context, lowest cost, fastest response\n       */\n      searchContextSize?: 'low' | 'medium' | 'high';\n\n      /**\n       * User location information to provide geographically relevant search results.\n       */\n      userLocation?: {\n        /**\n         * Type of location (always 'approximate')\n         */\n        type: 'approximate';\n        /**\n         * Two-letter ISO country code (e.g., 'US', 'GB')\n         */\n        country?: string;\n        /**\n         * City name (free text, e.g., 'Minneapolis')\n         */\n        city?: string;\n        /**\n         * Region name (free text, e.g., 'Minnesota')\n         */\n        region?: string;\n        /**\n         * IANA timezone (e.g., 'America/Chicago')\n         */\n        timezone?: string;\n      };\n    }\n  >({\n    id: 'openai.web_search_preview',\n    name: 'web_search_preview',\n    inputSchema: webSearchPreviewInputSchema,\n    outputSchema: webSearchPreviewOutputSchema,\n  });\n","import { codeInterpreter } from './tool/code-interpreter';\nimport { fileSearch } from './tool/file-search';\nimport { imageGeneration } from './tool/image-generation';\nimport { localShell } from './tool/local-shell';\nimport { webSearch } from './tool/web-search';\nimport { webSearchPreview } from './tool/web-search-preview';\n\nexport const openaiTools = {\n  /**\n   * The Code Interpreter tool allows models to write and run Python code in a\n   * sandboxed environment to solve complex problems in domains like data analysis,\n   * coding, and math.\n   *\n   * @param container - The container to use for the code interpreter.\n   *\n   * Must have name `code_interpreter`.\n   */\n  codeInterpreter,\n\n  /**\n   * File search is a tool available in the Responses API. It enables models to\n   * retrieve information in a knowledge base of previously uploaded files through\n   * semantic and keyword search.\n   *\n   * Must have name `file_search`.\n   *\n   * @param vectorStoreIds - The vector store IDs to use for the file search.\n   * @param maxNumResults - The maximum number of results to return.\n   * @param ranking - The ranking options to use for the file search.\n   * @param filters - The filters to use for the file search.\n   */\n  fileSearch,\n\n  /**\n   * The image generation tool allows you to generate images using a text prompt,\n   * and optionally image inputs. It leverages the GPT Image model,\n   * and automatically optimizes text inputs for improved performance.\n   *\n   * Must have name `image_generation`.\n   *\n   * @param size - Image dimensions (e.g., 1024x1024, 1024x1536)\n   * @param quality - Rendering quality (e.g. low, medium, high)\n   * @param format - File output format\n   * @param compression - Compression level (0-100%) for JPEG and WebP formats\n   * @param background - Transparent or opaque\n   */\n  imageGeneration,\n\n  /**\n   * Local shell is a tool that allows agents to run shell commands locally\n   * on a machine you or the user provides.\n   *\n   * Supported models: `gpt-5-codex` and `codex-mini-latest`\n   *\n   * Must have name `local_shell`.\n   */\n  localShell,\n\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search_preview`.\n   *\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   *\n   * @deprecated Use `webSearch` instead.\n   */\n  webSearchPreview,\n\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search`.\n   *\n   * @param filters - The filters to use for the web search.\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   */\n  webSearch,\n};\n","import {\n  APICallError,\n  LanguageModelV2,\n  LanguageModelV2CallWarning,\n  LanguageModelV2Content,\n  LanguageModelV2FinishReason,\n  LanguageModelV2ProviderDefinedTool,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n} from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonResponseHandler,\n  generateId,\n  InferValidator,\n  parseProviderOptions,\n  ParseResult,\n  postJsonToApi,\n} from '@ai-sdk/provider-utils';\nimport { OpenAIConfig } from '../openai-config';\nimport { openaiFailedResponseHandler } from '../openai-error';\nimport {\n  codeInterpreterInputSchema,\n  codeInterpreterOutputSchema,\n} from '../tool/code-interpreter';\nimport { fileSearchOutputSchema } from '../tool/file-search';\nimport { imageGenerationOutputSchema } from '../tool/image-generation';\nimport { localShellInputSchema } from '../tool/local-shell';\nimport { webSearchOutputSchema } from '../tool/web-search';\nimport { convertToOpenAIResponsesInput } from './convert-to-openai-responses-input';\nimport { mapOpenAIResponseFinishReason } from './map-openai-responses-finish-reason';\nimport {\n  OpenAIResponsesChunk,\n  openaiResponsesChunkSchema,\n  OpenAIResponsesIncludeOptions,\n  OpenAIResponsesIncludeValue,\n  OpenAIResponsesLogprobs,\n  openaiResponsesResponseSchema,\n  OpenAIResponsesWebSearchAction,\n} from './openai-responses-api';\nimport {\n  OpenAIResponsesModelId,\n  openaiResponsesProviderOptionsSchema,\n  TOP_LOGPROBS_MAX,\n} from './openai-responses-options';\nimport { prepareResponsesTools } from './openai-responses-prepare-tools';\n\nexport class OpenAIResponsesLanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  readonly modelId: OpenAIResponsesModelId;\n\n  private readonly config: OpenAIConfig;\n\n  constructor(modelId: OpenAIResponsesModelId, config: OpenAIConfig) {\n    this.modelId = modelId;\n    this.config = config;\n  }\n\n  readonly supportedUrls: Record<string, RegExp[]> = {\n    'image/*': [/^https?:\\/\\/.*$/],\n    'application/pdf': [/^https?:\\/\\/.*$/],\n  };\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  private async getArgs({\n    maxOutputTokens,\n    temperature,\n    stopSequences,\n    topP,\n    topK,\n    presencePenalty,\n    frequencyPenalty,\n    seed,\n    prompt,\n    providerOptions,\n    tools,\n    toolChoice,\n    responseFormat,\n  }: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const warnings: LanguageModelV2CallWarning[] = [];\n    const modelConfig = getResponsesModelConfig(this.modelId);\n\n    if (topK != null) {\n      warnings.push({ type: 'unsupported-setting', setting: 'topK' });\n    }\n\n    if (seed != null) {\n      warnings.push({ type: 'unsupported-setting', setting: 'seed' });\n    }\n\n    if (presencePenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'presencePenalty',\n      });\n    }\n\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'frequencyPenalty',\n      });\n    }\n\n    if (stopSequences != null) {\n      warnings.push({ type: 'unsupported-setting', setting: 'stopSequences' });\n    }\n\n    const openaiOptions = await parseProviderOptions({\n      provider: 'openai',\n      providerOptions,\n      schema: openaiResponsesProviderOptionsSchema,\n    });\n\n    const { input, warnings: inputWarnings } =\n      await convertToOpenAIResponsesInput({\n        prompt,\n        systemMessageMode: modelConfig.systemMessageMode,\n        fileIdPrefixes: this.config.fileIdPrefixes,\n        store: openaiOptions?.store ?? true,\n        hasLocalShellTool: hasOpenAITool('openai.local_shell'),\n      });\n\n    warnings.push(...inputWarnings);\n\n    const strictJsonSchema = openaiOptions?.strictJsonSchema ?? false;\n\n    let include: OpenAIResponsesIncludeOptions = openaiOptions?.include;\n\n    function addInclude(key: OpenAIResponsesIncludeValue) {\n      if (include == null) {\n        include = [key];\n      } else if (!include.includes(key)) {\n        include = [...include, key];\n      }\n    }\n\n    function hasOpenAITool(id: string) {\n      return (\n        tools?.find(\n          tool => tool.type === 'provider-defined' && tool.id === id,\n        ) != null\n      );\n    }\n\n    // when logprobs are requested, automatically include them:\n    const topLogprobs =\n      typeof openaiOptions?.logprobs === 'number'\n        ? openaiOptions?.logprobs\n        : openaiOptions?.logprobs === true\n          ? TOP_LOGPROBS_MAX\n          : undefined;\n\n    if (topLogprobs) {\n      addInclude('message.output_text.logprobs');\n    }\n\n    // when a web search tool is present, automatically include the sources:\n    const webSearchToolName = (\n      tools?.find(\n        tool =>\n          tool.type === 'provider-defined' &&\n          (tool.id === 'openai.web_search' ||\n            tool.id === 'openai.web_search_preview'),\n      ) as LanguageModelV2ProviderDefinedTool | undefined\n    )?.name;\n\n    if (webSearchToolName) {\n      addInclude('web_search_call.action.sources');\n    }\n\n    // when a code interpreter tool is present, automatically include the outputs:\n    if (hasOpenAITool('openai.code_interpreter')) {\n      addInclude('code_interpreter_call.outputs');\n    }\n\n    const store = openaiOptions?.store;\n\n    // store defaults to true in the OpenAI responses API, so check for false exactly:\n    if (store === false && modelConfig.isReasoningModel) {\n      addInclude('reasoning.encrypted_content');\n    }\n\n    const baseArgs = {\n      model: this.modelId,\n      input,\n      temperature,\n      top_p: topP,\n      max_output_tokens: maxOutputTokens,\n\n      ...((responseFormat?.type === 'json' || openaiOptions?.textVerbosity) && {\n        text: {\n          ...(responseFormat?.type === 'json' && {\n            format:\n              responseFormat.schema != null\n                ? {\n                    type: 'json_schema',\n                    strict: strictJsonSchema,\n                    name: responseFormat.name ?? 'response',\n                    description: responseFormat.description,\n                    schema: responseFormat.schema,\n                  }\n                : { type: 'json_object' },\n          }),\n          ...(openaiOptions?.textVerbosity && {\n            verbosity: openaiOptions.textVerbosity,\n          }),\n        },\n      }),\n\n      // provider options:\n      max_tool_calls: openaiOptions?.maxToolCalls,\n      metadata: openaiOptions?.metadata,\n      parallel_tool_calls: openaiOptions?.parallelToolCalls,\n      previous_response_id: openaiOptions?.previousResponseId,\n      store,\n      user: openaiOptions?.user,\n      instructions: openaiOptions?.instructions,\n      service_tier: openaiOptions?.serviceTier,\n      include,\n      prompt_cache_key: openaiOptions?.promptCacheKey,\n      safety_identifier: openaiOptions?.safetyIdentifier,\n      top_logprobs: topLogprobs,\n\n      // model-specific settings:\n      ...(modelConfig.isReasoningModel &&\n        (openaiOptions?.reasoningEffort != null ||\n          openaiOptions?.reasoningSummary != null) && {\n          reasoning: {\n            ...(openaiOptions?.reasoningEffort != null && {\n              effort: openaiOptions.reasoningEffort,\n            }),\n            ...(openaiOptions?.reasoningSummary != null && {\n              summary: openaiOptions.reasoningSummary,\n            }),\n          },\n        }),\n      ...(modelConfig.requiredAutoTruncation && {\n        truncation: 'auto',\n      }),\n    };\n\n    if (modelConfig.isReasoningModel) {\n      // remove unsupported settings for reasoning models\n      // see https://platform.openai.com/docs/guides/reasoning#limitations\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'temperature',\n          details: 'temperature is not supported for reasoning models',\n        });\n      }\n\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topP',\n          details: 'topP is not supported for reasoning models',\n        });\n      }\n    } else {\n      if (openaiOptions?.reasoningEffort != null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'reasoningEffort',\n          details: 'reasoningEffort is not supported for non-reasoning models',\n        });\n      }\n\n      if (openaiOptions?.reasoningSummary != null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'reasoningSummary',\n          details: 'reasoningSummary is not supported for non-reasoning models',\n        });\n      }\n    }\n\n    // Validate flex processing support\n    if (\n      openaiOptions?.serviceTier === 'flex' &&\n      !modelConfig.supportsFlexProcessing\n    ) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'serviceTier',\n        details:\n          'flex processing is only available for o3, o4-mini, and gpt-5 models',\n      });\n      // Remove from args if not supported\n      delete (baseArgs as any).service_tier;\n    }\n\n    // Validate priority processing support\n    if (\n      openaiOptions?.serviceTier === 'priority' &&\n      !modelConfig.supportsPriorityProcessing\n    ) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'serviceTier',\n        details:\n          'priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported',\n      });\n      // Remove from args if not supported\n      delete (baseArgs as any).service_tier;\n    }\n\n    const {\n      tools: openaiTools,\n      toolChoice: openaiToolChoice,\n      toolWarnings,\n    } = await prepareResponsesTools({\n      tools,\n      toolChoice,\n      strictJsonSchema,\n    });\n\n    return {\n      webSearchToolName,\n      args: {\n        ...baseArgs,\n        tools: openaiTools,\n        tool_choice: openaiToolChoice,\n      },\n      warnings: [...warnings, ...toolWarnings],\n      store,\n    };\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const {\n      args: body,\n      warnings,\n      webSearchToolName,\n    } = await this.getArgs(options);\n    const url = this.config.url({\n      path: '/responses',\n      modelId: this.modelId,\n    });\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url,\n      headers: combineHeaders(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        openaiResponsesResponseSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    if (response.error) {\n      throw new APICallError({\n        message: response.error.message,\n        url,\n        requestBodyValues: body,\n        statusCode: 400,\n        responseHeaders,\n        responseBody: rawResponse as string,\n        isRetryable: false,\n      });\n    }\n\n    const content: Array<LanguageModelV2Content> = [];\n    const logprobs: Array<OpenAIResponsesLogprobs> = [];\n\n    // flag that checks if there have been client-side tool calls (not executed by openai)\n    let hasFunctionCall = false;\n\n    // map response content to content array\n    for (const part of response.output) {\n      switch (part.type) {\n        case 'reasoning': {\n          // when there are no summary parts, we need to add an empty reasoning part:\n          if (part.summary.length === 0) {\n            part.summary.push({ type: 'summary_text', text: '' });\n          }\n\n          for (const summary of part.summary) {\n            content.push({\n              type: 'reasoning' as const,\n              text: summary.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id,\n                  reasoningEncryptedContent: part.encrypted_content ?? null,\n                },\n              },\n            });\n          }\n          break;\n        }\n\n        case 'image_generation_call': {\n          content.push({\n            type: 'tool-call',\n            toolCallId: part.id,\n            toolName: 'image_generation',\n            input: '{}',\n            providerExecuted: true,\n          });\n\n          content.push({\n            type: 'tool-result',\n            toolCallId: part.id,\n            toolName: 'image_generation',\n            result: {\n              result: part.result,\n            } satisfies InferValidator<typeof imageGenerationOutputSchema>,\n            providerExecuted: true,\n          });\n\n          break;\n        }\n\n        case 'local_shell_call': {\n          content.push({\n            type: 'tool-call',\n            toolCallId: part.call_id,\n            toolName: 'local_shell',\n            input: JSON.stringify({\n              action: part.action,\n            } satisfies InferValidator<typeof localShellInputSchema>),\n            providerMetadata: {\n              openai: {\n                itemId: part.id,\n              },\n            },\n          });\n\n          break;\n        }\n\n        case 'message': {\n          for (const contentPart of part.content) {\n            if (\n              options.providerOptions?.openai?.logprobs &&\n              contentPart.logprobs\n            ) {\n              logprobs.push(contentPart.logprobs);\n            }\n\n            content.push({\n              type: 'text',\n              text: contentPart.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id,\n                },\n              },\n            });\n\n            for (const annotation of contentPart.annotations) {\n              if (annotation.type === 'url_citation') {\n                content.push({\n                  type: 'source',\n                  sourceType: 'url',\n                  id: this.config.generateId?.() ?? generateId(),\n                  url: annotation.url,\n                  title: annotation.title,\n                });\n              } else if (annotation.type === 'file_citation') {\n                content.push({\n                  type: 'source',\n                  sourceType: 'document',\n                  id: this.config.generateId?.() ?? generateId(),\n                  mediaType: 'text/plain',\n                  title: annotation.quote ?? annotation.filename ?? 'Document',\n                  filename: annotation.filename ?? annotation.file_id,\n                });\n              }\n            }\n          }\n\n          break;\n        }\n\n        case 'function_call': {\n          hasFunctionCall = true;\n\n          content.push({\n            type: 'tool-call',\n            toolCallId: part.call_id,\n            toolName: part.name,\n            input: part.arguments,\n            providerMetadata: {\n              openai: {\n                itemId: part.id,\n              },\n            },\n          });\n          break;\n        }\n\n        case 'web_search_call': {\n          content.push({\n            type: 'tool-call',\n            toolCallId: part.id,\n            toolName: webSearchToolName ?? 'web_search',\n            input: JSON.stringify({}),\n            providerExecuted: true,\n          });\n\n          content.push({\n            type: 'tool-result',\n            toolCallId: part.id,\n            toolName: webSearchToolName ?? 'web_search',\n            result: mapWebSearchOutput(part.action),\n            providerExecuted: true,\n          });\n\n          break;\n        }\n\n        case 'computer_call': {\n          content.push({\n            type: 'tool-call',\n            toolCallId: part.id,\n            toolName: 'computer_use',\n            input: '',\n            providerExecuted: true,\n          });\n\n          content.push({\n            type: 'tool-result',\n            toolCallId: part.id,\n            toolName: 'computer_use',\n            result: {\n              type: 'computer_use_tool_result',\n              status: part.status || 'completed',\n            },\n            providerExecuted: true,\n          });\n          break;\n        }\n\n        case 'file_search_call': {\n          content.push({\n            type: 'tool-call',\n            toolCallId: part.id,\n            toolName: 'file_search',\n            input: '{}',\n            providerExecuted: true,\n          });\n\n          content.push({\n            type: 'tool-result',\n            toolCallId: part.id,\n            toolName: 'file_search',\n            result: {\n              queries: part.queries,\n              results:\n                part.results?.map(result => ({\n                  attributes: result.attributes,\n                  fileId: result.file_id,\n                  filename: result.filename,\n                  score: result.score,\n                  text: result.text,\n                })) ?? null,\n            } satisfies InferValidator<typeof fileSearchOutputSchema>,\n            providerExecuted: true,\n          });\n          break;\n        }\n\n        case 'code_interpreter_call': {\n          content.push({\n            type: 'tool-call',\n            toolCallId: part.id,\n            toolName: 'code_interpreter',\n            input: JSON.stringify({\n              code: part.code,\n              containerId: part.container_id,\n            } satisfies InferValidator<typeof codeInterpreterInputSchema>),\n            providerExecuted: true,\n          });\n\n          content.push({\n            type: 'tool-result',\n            toolCallId: part.id,\n            toolName: 'code_interpreter',\n            result: {\n              outputs: part.outputs,\n            } satisfies InferValidator<typeof codeInterpreterOutputSchema>,\n            providerExecuted: true,\n          });\n          break;\n        }\n      }\n    }\n\n    const providerMetadata: SharedV2ProviderMetadata = {\n      openai: { responseId: response.id },\n    };\n\n    if (logprobs.length > 0) {\n      providerMetadata.openai.logprobs = logprobs;\n    }\n\n    if (typeof response.service_tier === 'string') {\n      providerMetadata.openai.serviceTier = response.service_tier;\n    }\n\n    return {\n      content,\n      finishReason: mapOpenAIResponseFinishReason({\n        finishReason: response.incomplete_details?.reason,\n        hasFunctionCall,\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        reasoningTokens:\n          response.usage.output_tokens_details?.reasoning_tokens ?? undefined,\n        cachedInputTokens:\n          response.usage.input_tokens_details?.cached_tokens ?? undefined,\n      },\n      request: { body },\n      response: {\n        id: response.id,\n        timestamp: new Date(response.created_at * 1000),\n        modelId: response.model,\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n      providerMetadata,\n      warnings,\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const {\n      args: body,\n      warnings,\n      webSearchToolName,\n      store,\n    } = await this.getArgs(options);\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url: this.config.url({\n        path: '/responses',\n        modelId: this.modelId,\n      }),\n      headers: combineHeaders(this.config.headers(), options.headers),\n      body: {\n        ...body,\n        stream: true,\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(\n        openaiResponsesChunkSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const self = this;\n\n    let finishReason: LanguageModelV2FinishReason = 'unknown';\n    const usage: LanguageModelV2Usage = {\n      inputTokens: undefined,\n      outputTokens: undefined,\n      totalTokens: undefined,\n    };\n    const logprobs: Array<OpenAIResponsesLogprobs> = [];\n    let responseId: string | null = null;\n    const ongoingToolCalls: Record<\n      number,\n      | {\n          toolName: string;\n          toolCallId: string;\n          codeInterpreter?: {\n            containerId: string;\n          };\n        }\n      | undefined\n    > = {};\n\n    // flag that checks if there have been client-side tool calls (not executed by openai)\n    let hasFunctionCall = false;\n\n    const activeReasoning: Record<\n      string,\n      {\n        encryptedContent?: string | null;\n        // summary index as string to reasoning part state:\n        summaryParts: Record<string, 'active' | 'can-conclude' | 'concluded'>;\n      }\n    > = {};\n\n    let serviceTier: string | undefined;\n\n    return {\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<OpenAIResponsesChunk>,\n          LanguageModelV2StreamPart\n        >({\n          start(controller) {\n            controller.enqueue({ type: 'stream-start', warnings });\n          },\n\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: 'raw', rawValue: chunk.rawValue });\n            }\n\n            // handle failed chunk parsing / validation:\n            if (!chunk.success) {\n              finishReason = 'error';\n              controller.enqueue({ type: 'error', error: chunk.error });\n              return;\n            }\n\n            const value = chunk.value;\n\n            if (isResponseOutputItemAddedChunk(value)) {\n              if (value.item.type === 'function_call') {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: value.item.name,\n                  toolCallId: value.item.call_id,\n                };\n\n                controller.enqueue({\n                  type: 'tool-input-start',\n                  id: value.item.call_id,\n                  toolName: value.item.name,\n                });\n              } else if (value.item.type === 'web_search_call') {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: webSearchToolName ?? 'web_search',\n                  toolCallId: value.item.id,\n                };\n\n                controller.enqueue({\n                  type: 'tool-input-start',\n                  id: value.item.id,\n                  toolName: webSearchToolName ?? 'web_search',\n                  providerExecuted: true,\n                });\n\n                controller.enqueue({\n                  type: 'tool-input-end',\n                  id: value.item.id,\n                });\n\n                controller.enqueue({\n                  type: 'tool-call',\n                  toolCallId: value.item.id,\n                  toolName: 'web_search',\n                  input: JSON.stringify({}),\n                  providerExecuted: true,\n                });\n              } else if (value.item.type === 'computer_call') {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: 'computer_use',\n                  toolCallId: value.item.id,\n                };\n\n                controller.enqueue({\n                  type: 'tool-input-start',\n                  id: value.item.id,\n                  toolName: 'computer_use',\n                  providerExecuted: true,\n                });\n              } else if (value.item.type === 'code_interpreter_call') {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: 'code_interpreter',\n                  toolCallId: value.item.id,\n                  codeInterpreter: {\n                    containerId: value.item.container_id,\n                  },\n                };\n\n                controller.enqueue({\n                  type: 'tool-input-start',\n                  id: value.item.id,\n                  toolName: 'code_interpreter',\n                  providerExecuted: true,\n                });\n\n                controller.enqueue({\n                  type: 'tool-input-delta',\n                  id: value.item.id,\n                  delta: `{\"containerId\":\"${value.item.container_id}\",\"code\":\"`,\n                });\n              } else if (value.item.type === 'file_search_call') {\n                controller.enqueue({\n                  type: 'tool-call',\n                  toolCallId: value.item.id,\n                  toolName: 'file_search',\n                  input: '{}',\n                  providerExecuted: true,\n                });\n              } else if (value.item.type === 'image_generation_call') {\n                controller.enqueue({\n                  type: 'tool-call',\n                  toolCallId: value.item.id,\n                  toolName: 'image_generation',\n                  input: '{}',\n                  providerExecuted: true,\n                });\n              } else if (value.item.type === 'message') {\n                controller.enqueue({\n                  type: 'text-start',\n                  id: value.item.id,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id,\n                    },\n                  },\n                });\n              } else if (\n                isResponseOutputItemAddedChunk(value) &&\n                value.item.type === 'reasoning'\n              ) {\n                activeReasoning[value.item.id] = {\n                  encryptedContent: value.item.encrypted_content,\n                  summaryParts: { 0: 'active' },\n                };\n\n                controller.enqueue({\n                  type: 'reasoning-start',\n                  id: `${value.item.id}:0`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id,\n                      reasoningEncryptedContent:\n                        value.item.encrypted_content ?? null,\n                    },\n                  },\n                });\n              }\n            } else if (isResponseOutputItemDoneChunk(value)) {\n              if (value.item.type === 'function_call') {\n                ongoingToolCalls[value.output_index] = undefined;\n                hasFunctionCall = true;\n\n                controller.enqueue({\n                  type: 'tool-input-end',\n                  id: value.item.call_id,\n                });\n\n                controller.enqueue({\n                  type: 'tool-call',\n                  toolCallId: value.item.call_id,\n                  toolName: value.item.name,\n                  input: value.item.arguments,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id,\n                    },\n                  },\n                });\n              } else if (value.item.type === 'web_search_call') {\n                ongoingToolCalls[value.output_index] = undefined;\n\n                controller.enqueue({\n                  type: 'tool-result',\n                  toolCallId: value.item.id,\n                  toolName: 'web_search',\n                  result: mapWebSearchOutput(value.item.action),\n                  providerExecuted: true,\n                });\n              } else if (value.item.type === 'computer_call') {\n                ongoingToolCalls[value.output_index] = undefined;\n\n                controller.enqueue({\n                  type: 'tool-input-end',\n                  id: value.item.id,\n                });\n\n                controller.enqueue({\n                  type: 'tool-call',\n                  toolCallId: value.item.id,\n                  toolName: 'computer_use',\n                  input: '',\n                  providerExecuted: true,\n                });\n\n                controller.enqueue({\n                  type: 'tool-result',\n                  toolCallId: value.item.id,\n                  toolName: 'computer_use',\n                  result: {\n                    type: 'computer_use_tool_result',\n                    status: value.item.status || 'completed',\n                  },\n                  providerExecuted: true,\n                });\n              } else if (value.item.type === 'file_search_call') {\n                ongoingToolCalls[value.output_index] = undefined;\n\n                controller.enqueue({\n                  type: 'tool-result',\n                  toolCallId: value.item.id,\n                  toolName: 'file_search',\n                  result: {\n                    queries: value.item.queries,\n                    results:\n                      value.item.results?.map(result => ({\n                        attributes: result.attributes,\n                        fileId: result.file_id,\n                        filename: result.filename,\n                        score: result.score,\n                        text: result.text,\n                      })) ?? null,\n                  } satisfies InferValidator<typeof fileSearchOutputSchema>,\n                  providerExecuted: true,\n                });\n              } else if (value.item.type === 'code_interpreter_call') {\n                ongoingToolCalls[value.output_index] = undefined;\n\n                controller.enqueue({\n                  type: 'tool-result',\n                  toolCallId: value.item.id,\n                  toolName: 'code_interpreter',\n                  result: {\n                    outputs: value.item.outputs,\n                  } satisfies InferValidator<\n                    typeof codeInterpreterOutputSchema\n                  >,\n                  providerExecuted: true,\n                });\n              } else if (value.item.type === 'image_generation_call') {\n                controller.enqueue({\n                  type: 'tool-result',\n                  toolCallId: value.item.id,\n                  toolName: 'image_generation',\n                  result: {\n                    result: value.item.result,\n                  } satisfies InferValidator<\n                    typeof imageGenerationOutputSchema\n                  >,\n                  providerExecuted: true,\n                });\n              } else if (value.item.type === 'local_shell_call') {\n                ongoingToolCalls[value.output_index] = undefined;\n\n                controller.enqueue({\n                  type: 'tool-call',\n                  toolCallId: value.item.call_id,\n                  toolName: 'local_shell',\n                  input: JSON.stringify({\n                    action: {\n                      type: 'exec',\n                      command: value.item.action.command,\n                      timeoutMs: value.item.action.timeout_ms,\n                      user: value.item.action.user,\n                      workingDirectory: value.item.action.working_directory,\n                      env: value.item.action.env,\n                    },\n                  } satisfies InferValidator<typeof localShellInputSchema>),\n                  providerMetadata: {\n                    openai: { itemId: value.item.id },\n                  },\n                });\n              } else if (value.item.type === 'message') {\n                controller.enqueue({\n                  type: 'text-end',\n                  id: value.item.id,\n                });\n              } else if (value.item.type === 'reasoning') {\n                const activeReasoningPart = activeReasoning[value.item.id];\n\n                // get all active or can-conclude summary parts' ids\n                // to conclude ongoing reasoning parts:\n                const summaryPartIndices = Object.entries(\n                  activeReasoningPart.summaryParts,\n                )\n                  .filter(\n                    ([_, status]) =>\n                      status === 'active' || status === 'can-conclude',\n                  )\n                  .map(([summaryIndex]) => summaryIndex);\n\n                for (const summaryIndex of summaryPartIndices) {\n                  controller.enqueue({\n                    type: 'reasoning-end',\n                    id: `${value.item.id}:${summaryIndex}`,\n                    providerMetadata: {\n                      openai: {\n                        itemId: value.item.id,\n                        reasoningEncryptedContent:\n                          value.item.encrypted_content ?? null,\n                      },\n                    },\n                  });\n                }\n\n                delete activeReasoning[value.item.id];\n              }\n            } else if (isResponseFunctionCallArgumentsDeltaChunk(value)) {\n              const toolCall = ongoingToolCalls[value.output_index];\n\n              if (toolCall != null) {\n                controller.enqueue({\n                  type: 'tool-input-delta',\n                  id: toolCall.toolCallId,\n                  delta: value.delta,\n                });\n              }\n            } else if (isResponseCodeInterpreterCallCodeDeltaChunk(value)) {\n              const toolCall = ongoingToolCalls[value.output_index];\n\n              if (toolCall != null) {\n                controller.enqueue({\n                  type: 'tool-input-delta',\n                  id: toolCall.toolCallId,\n                  // The delta is code, which is embedding in a JSON string.\n                  // To escape it, we use JSON.stringify and slice to remove the outer quotes.\n                  delta: JSON.stringify(value.delta).slice(1, -1),\n                });\n              }\n            } else if (isResponseCodeInterpreterCallCodeDoneChunk(value)) {\n              const toolCall = ongoingToolCalls[value.output_index];\n\n              if (toolCall != null) {\n                controller.enqueue({\n                  type: 'tool-input-delta',\n                  id: toolCall.toolCallId,\n                  delta: '\"}',\n                });\n\n                controller.enqueue({\n                  type: 'tool-input-end',\n                  id: toolCall.toolCallId,\n                });\n\n                // immediately send the tool call after the input end:\n                controller.enqueue({\n                  type: 'tool-call',\n                  toolCallId: toolCall.toolCallId,\n                  toolName: 'code_interpreter',\n                  input: JSON.stringify({\n                    code: value.code,\n                    containerId: toolCall.codeInterpreter!.containerId,\n                  } satisfies InferValidator<\n                    typeof codeInterpreterInputSchema\n                  >),\n                  providerExecuted: true,\n                });\n              }\n            } else if (isResponseCreatedChunk(value)) {\n              responseId = value.response.id;\n              controller.enqueue({\n                type: 'response-metadata',\n                id: value.response.id,\n                timestamp: new Date(value.response.created_at * 1000),\n                modelId: value.response.model,\n              });\n            } else if (isTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: 'text-delta',\n                id: value.item_id,\n                delta: value.delta,\n              });\n\n              if (options.providerOptions?.openai?.logprobs && value.logprobs) {\n                logprobs.push(value.logprobs);\n              }\n            } else if (value.type === 'response.reasoning_summary_part.added') {\n              // the first reasoning start is pushed in isResponseOutputItemAddedReasoningChunk\n              if (value.summary_index > 0) {\n                const activeReasoningPart = activeReasoning[value.item_id]!;\n\n                activeReasoningPart.summaryParts[value.summary_index] =\n                  'active';\n\n                // since there is a new active summary part, we can conclude all can-conclude summary parts\n                for (const summaryIndex of Object.keys(\n                  activeReasoningPart.summaryParts,\n                )) {\n                  if (\n                    activeReasoningPart.summaryParts[summaryIndex] ===\n                    'can-conclude'\n                  ) {\n                    controller.enqueue({\n                      type: 'reasoning-end',\n                      id: `${value.item_id}:${summaryIndex}`,\n                      providerMetadata: { openai: { itemId: value.item_id } },\n                    });\n                    activeReasoningPart.summaryParts[summaryIndex] =\n                      'concluded';\n                  }\n                }\n\n                controller.enqueue({\n                  type: 'reasoning-start',\n                  id: `${value.item_id}:${value.summary_index}`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item_id,\n                      reasoningEncryptedContent:\n                        activeReasoning[value.item_id]?.encryptedContent ??\n                        null,\n                    },\n                  },\n                });\n              }\n            } else if (value.type === 'response.reasoning_summary_text.delta') {\n              controller.enqueue({\n                type: 'reasoning-delta',\n                id: `${value.item_id}:${value.summary_index}`,\n                delta: value.delta,\n                providerMetadata: {\n                  openai: {\n                    itemId: value.item_id,\n                  },\n                },\n              });\n            } else if (value.type === 'response.reasoning_summary_part.done') {\n              // when OpenAI stores the message data, we can immediately conclude the reasoning part\n              // since we do not need to send the encrypted content.\n              if (store) {\n                controller.enqueue({\n                  type: 'reasoning-end',\n                  id: `${value.item_id}:${value.summary_index}`,\n                  providerMetadata: {\n                    openai: { itemId: value.item_id },\n                  },\n                });\n\n                // mark the summary part as concluded\n                activeReasoning[value.item_id]!.summaryParts[\n                  value.summary_index\n                ] = 'concluded';\n              } else {\n                // mark the summary part as can-conclude only\n                // because we need to have a final summary part with the encrypted content\n                activeReasoning[value.item_id]!.summaryParts[\n                  value.summary_index\n                ] = 'can-conclude';\n              }\n            } else if (isResponseFinishedChunk(value)) {\n              finishReason = mapOpenAIResponseFinishReason({\n                finishReason: value.response.incomplete_details?.reason,\n                hasFunctionCall,\n              });\n              usage.inputTokens = value.response.usage.input_tokens;\n              usage.outputTokens = value.response.usage.output_tokens;\n              usage.totalTokens =\n                value.response.usage.input_tokens +\n                value.response.usage.output_tokens;\n              usage.reasoningTokens =\n                value.response.usage.output_tokens_details?.reasoning_tokens ??\n                undefined;\n              usage.cachedInputTokens =\n                value.response.usage.input_tokens_details?.cached_tokens ??\n                undefined;\n              if (typeof value.response.service_tier === 'string') {\n                serviceTier = value.response.service_tier;\n              }\n            } else if (isResponseAnnotationAddedChunk(value)) {\n              if (value.annotation.type === 'url_citation') {\n                controller.enqueue({\n                  type: 'source',\n                  sourceType: 'url',\n                  id: self.config.generateId?.() ?? generateId(),\n                  url: value.annotation.url,\n                  title: value.annotation.title,\n                });\n              } else if (value.annotation.type === 'file_citation') {\n                controller.enqueue({\n                  type: 'source',\n                  sourceType: 'document',\n                  id: self.config.generateId?.() ?? generateId(),\n                  mediaType: 'text/plain',\n                  title:\n                    value.annotation.quote ??\n                    value.annotation.filename ??\n                    'Document',\n                  filename:\n                    value.annotation.filename ?? value.annotation.file_id,\n                });\n              }\n            } else if (isErrorChunk(value)) {\n              controller.enqueue({ type: 'error', error: value });\n            }\n          },\n\n          flush(controller) {\n            const providerMetadata: SharedV2ProviderMetadata = {\n              openai: {\n                responseId,\n              },\n            };\n\n            if (logprobs.length > 0) {\n              providerMetadata.openai.logprobs = logprobs;\n            }\n\n            if (serviceTier !== undefined) {\n              providerMetadata.openai.serviceTier = serviceTier;\n            }\n\n            controller.enqueue({\n              type: 'finish',\n              finishReason,\n              usage,\n              providerMetadata,\n            });\n          },\n        }),\n      ),\n      request: { body },\n      response: { headers: responseHeaders },\n    };\n  }\n}\n\nfunction isTextDeltaChunk(\n  chunk: OpenAIResponsesChunk,\n): chunk is OpenAIResponsesChunk & { type: 'response.output_text.delta' } {\n  return chunk.type === 'response.output_text.delta';\n}\n\nfunction isResponseOutputItemDoneChunk(\n  chunk: OpenAIResponsesChunk,\n): chunk is OpenAIResponsesChunk & { type: 'response.output_item.done' } {\n  return chunk.type === 'response.output_item.done';\n}\n\nfunction isResponseFinishedChunk(\n  chunk: OpenAIResponsesChunk,\n): chunk is OpenAIResponsesChunk & {\n  type: 'response.completed' | 'response.incomplete';\n} {\n  return (\n    chunk.type === 'response.completed' || chunk.type === 'response.incomplete'\n  );\n}\n\nfunction isResponseCreatedChunk(\n  chunk: OpenAIResponsesChunk,\n): chunk is OpenAIResponsesChunk & { type: 'response.created' } {\n  return chunk.type === 'response.created';\n}\n\nfunction isResponseFunctionCallArgumentsDeltaChunk(\n  chunk: OpenAIResponsesChunk,\n): chunk is OpenAIResponsesChunk & {\n  type: 'response.function_call_arguments.delta';\n} {\n  return chunk.type === 'response.function_call_arguments.delta';\n}\n\nfunction isResponseCodeInterpreterCallCodeDeltaChunk(\n  chunk: OpenAIResponsesChunk,\n): chunk is OpenAIResponsesChunk & {\n  type: 'response.code_interpreter_call_code.delta';\n} {\n  return chunk.type === 'response.code_interpreter_call_code.delta';\n}\n\nfunction isResponseCodeInterpreterCallCodeDoneChunk(\n  chunk: OpenAIResponsesChunk,\n): chunk is OpenAIResponsesChunk & {\n  type: 'response.code_interpreter_call_code.done';\n} {\n  return chunk.type === 'response.code_interpreter_call_code.done';\n}\n\nfunction isResponseOutputItemAddedChunk(\n  chunk: OpenAIResponsesChunk,\n): chunk is OpenAIResponsesChunk & { type: 'response.output_item.added' } {\n  return chunk.type === 'response.output_item.added';\n}\n\nfunction isResponseAnnotationAddedChunk(\n  chunk: OpenAIResponsesChunk,\n): chunk is OpenAIResponsesChunk & {\n  type: 'response.output_text.annotation.added';\n} {\n  return chunk.type === 'response.output_text.annotation.added';\n}\n\nfunction isErrorChunk(\n  chunk: OpenAIResponsesChunk,\n): chunk is OpenAIResponsesChunk & { type: 'error' } {\n  return chunk.type === 'error';\n}\n\ntype ResponsesModelConfig = {\n  isReasoningModel: boolean;\n  systemMessageMode: 'remove' | 'system' | 'developer';\n  requiredAutoTruncation: boolean;\n  supportsFlexProcessing: boolean;\n  supportsPriorityProcessing: boolean;\n};\n\nfunction getResponsesModelConfig(modelId: string): ResponsesModelConfig {\n  const supportsFlexProcessing =\n    modelId.startsWith('o3') ||\n    modelId.startsWith('o4-mini') ||\n    (modelId.startsWith('gpt-5') && !modelId.startsWith('gpt-5-chat'));\n  const supportsPriorityProcessing =\n    modelId.startsWith('gpt-4') ||\n    modelId.startsWith('gpt-5-mini') ||\n    (modelId.startsWith('gpt-5') &&\n      !modelId.startsWith('gpt-5-nano') &&\n      !modelId.startsWith('gpt-5-chat')) ||\n    modelId.startsWith('o3') ||\n    modelId.startsWith('o4-mini');\n  const defaults = {\n    requiredAutoTruncation: false,\n    systemMessageMode: 'system' as const,\n    supportsFlexProcessing,\n    supportsPriorityProcessing,\n  };\n\n  // gpt-5-chat models are non-reasoning\n  if (modelId.startsWith('gpt-5-chat')) {\n    return {\n      ...defaults,\n      isReasoningModel: false,\n    };\n  }\n\n  // o series reasoning models:\n  if (\n    modelId.startsWith('o') ||\n    modelId.startsWith('gpt-5') ||\n    modelId.startsWith('codex-') ||\n    modelId.startsWith('computer-use')\n  ) {\n    if (modelId.startsWith('o1-mini') || modelId.startsWith('o1-preview')) {\n      return {\n        ...defaults,\n        isReasoningModel: true,\n        systemMessageMode: 'remove',\n      };\n    }\n\n    return {\n      ...defaults,\n      isReasoningModel: true,\n      systemMessageMode: 'developer',\n    };\n  }\n\n  // gpt models:\n  return {\n    ...defaults,\n    isReasoningModel: false,\n  };\n}\n\nfunction mapWebSearchOutput(\n  action: OpenAIResponsesWebSearchAction,\n): InferValidator<typeof webSearchOutputSchema> {\n  switch (action.type) {\n    case 'search':\n      return { action: { type: 'search', query: action.query ?? undefined } };\n    case 'open_page':\n      return { action: { type: 'openPage', url: action.url } };\n    case 'find':\n      return {\n        action: { type: 'find', url: action.url, pattern: action.pattern },\n      };\n  }\n}\n","import {\n  LanguageModelV2CallWarning,\n  LanguageModelV2Prompt,\n  LanguageModelV2ToolCallPart,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  convertToBase64,\n  parseProviderOptions,\n  validateTypes,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport {\n  localShellInputSchema,\n  localShellOutputSchema,\n} from '../tool/local-shell';\nimport {\n  OpenAIResponsesFunctionCallOutput,\n  OpenAIResponsesInput,\n  OpenAIResponsesReasoning,\n} from './openai-responses-api';\n\n/**\n * Check if a string is a file ID based on the given prefixes\n * Returns false if prefixes is undefined (disables file ID detection)\n */\nfunction isFileId(data: string, prefixes?: readonly string[]): boolean {\n  if (!prefixes) return false;\n  return prefixes.some(prefix => data.startsWith(prefix));\n}\n\nexport async function convertToOpenAIResponsesInput({\n  prompt,\n  systemMessageMode,\n  fileIdPrefixes,\n  store,\n  hasLocalShellTool = false,\n}: {\n  prompt: LanguageModelV2Prompt;\n  systemMessageMode: 'system' | 'developer' | 'remove';\n  fileIdPrefixes?: readonly string[];\n  store: boolean;\n  hasLocalShellTool?: boolean;\n}): Promise<{\n  input: OpenAIResponsesInput;\n  warnings: Array<LanguageModelV2CallWarning>;\n}> {\n  const input: OpenAIResponsesInput = [];\n  const warnings: Array<LanguageModelV2CallWarning> = [];\n\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case 'system': {\n        switch (systemMessageMode) {\n          case 'system': {\n            input.push({ role: 'system', content });\n            break;\n          }\n          case 'developer': {\n            input.push({ role: 'developer', content });\n            break;\n          }\n          case 'remove': {\n            warnings.push({\n              type: 'other',\n              message: 'system messages are removed for this model',\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck: never = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`,\n            );\n          }\n        }\n        break;\n      }\n\n      case 'user': {\n        input.push({\n          role: 'user',\n          content: content.map((part, index) => {\n            switch (part.type) {\n              case 'text': {\n                return { type: 'input_text', text: part.text };\n              }\n              case 'file': {\n                if (part.mediaType.startsWith('image/')) {\n                  const mediaType =\n                    part.mediaType === 'image/*'\n                      ? 'image/jpeg'\n                      : part.mediaType;\n\n                  return {\n                    type: 'input_image',\n                    ...(part.data instanceof URL\n                      ? { image_url: part.data.toString() }\n                      : typeof part.data === 'string' &&\n                          isFileId(part.data, fileIdPrefixes)\n                        ? { file_id: part.data }\n                        : {\n                            image_url: `data:${mediaType};base64,${convertToBase64(part.data)}`,\n                          }),\n                    detail: part.providerOptions?.openai?.imageDetail,\n                  };\n                } else if (part.mediaType === 'application/pdf') {\n                  if (part.data instanceof URL) {\n                    return {\n                      type: 'input_file',\n                      file_url: part.data.toString(),\n                    };\n                  }\n                  return {\n                    type: 'input_file',\n                    ...(typeof part.data === 'string' &&\n                    isFileId(part.data, fileIdPrefixes)\n                      ? { file_id: part.data }\n                      : {\n                          filename: part.filename ?? `part-${index}.pdf`,\n                          file_data: `data:application/pdf;base64,${convertToBase64(part.data)}`,\n                        }),\n                  };\n                } else {\n                  throw new UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`,\n                  });\n                }\n              }\n            }\n          }),\n        });\n\n        break;\n      }\n\n      case 'assistant': {\n        const reasoningMessages: Record<string, OpenAIResponsesReasoning> = {};\n        const toolCallParts: Record<string, LanguageModelV2ToolCallPart> = {};\n\n        for (const part of content) {\n          switch (part.type) {\n            case 'text': {\n              const id = part.providerOptions?.openai?.itemId as\n                | string\n                | undefined;\n\n              // item references reduce the payload size\n              if (store && id != null) {\n                input.push({ type: 'item_reference', id });\n                break;\n              }\n\n              input.push({\n                role: 'assistant',\n                content: [{ type: 'output_text', text: part.text }],\n                id,\n              });\n\n              break;\n            }\n            case 'tool-call': {\n              toolCallParts[part.toolCallId] = part;\n\n              if (part.providerExecuted) {\n                break;\n              }\n\n              const id = part.providerOptions?.openai?.itemId as\n                | string\n                | undefined;\n\n              // item references reduce the payload size\n              if (store && id != null) {\n                input.push({ type: 'item_reference', id });\n                break;\n              }\n\n              if (hasLocalShellTool && part.toolName === 'local_shell') {\n                const parsedInput = await validateTypes({\n                  value: part.input,\n                  schema: localShellInputSchema,\n                });\n                input.push({\n                  type: 'local_shell_call',\n                  call_id: part.toolCallId,\n                  id: id!,\n                  action: {\n                    type: 'exec',\n                    command: parsedInput.action.command,\n                    timeout_ms: parsedInput.action.timeoutMs,\n                    user: parsedInput.action.user,\n                    working_directory: parsedInput.action.workingDirectory,\n                    env: parsedInput.action.env,\n                  },\n                });\n\n                break;\n              }\n\n              input.push({\n                type: 'function_call',\n                call_id: part.toolCallId,\n                name: part.toolName,\n                arguments: JSON.stringify(part.input),\n                id,\n              });\n              break;\n            }\n\n            // assistant tool result parts are from provider-executed tools:\n            case 'tool-result': {\n              if (store) {\n                // use item references to refer to tool results from built-in tools\n                input.push({ type: 'item_reference', id: part.toolCallId });\n              } else {\n                warnings.push({\n                  type: 'other',\n                  message: `Results for OpenAI tool ${part.toolName} are not sent to the API when store is false`,\n                });\n              }\n\n              break;\n            }\n\n            case 'reasoning': {\n              const providerOptions = await parseProviderOptions({\n                provider: 'openai',\n                providerOptions: part.providerOptions,\n                schema: openaiResponsesReasoningProviderOptionsSchema,\n              });\n\n              const reasoningId = providerOptions?.itemId;\n\n              if (reasoningId != null) {\n                const reasoningMessage = reasoningMessages[reasoningId];\n\n                if (store) {\n                  // use item references to refer to reasoning (single reference)\n                  // when the first part is encountered\n                  if (reasoningMessage === undefined) {\n                    input.push({ type: 'item_reference', id: reasoningId });\n\n                    // store unused reasoning message to mark id as used\n                    reasoningMessages[reasoningId] = {\n                      type: 'reasoning',\n                      id: reasoningId,\n                      summary: [],\n                    };\n                  }\n                } else {\n                  const summaryParts: Array<{\n                    type: 'summary_text';\n                    text: string;\n                  }> = [];\n\n                  if (part.text.length > 0) {\n                    summaryParts.push({\n                      type: 'summary_text',\n                      text: part.text,\n                    });\n                  } else if (reasoningMessage !== undefined) {\n                    warnings.push({\n                      type: 'other',\n                      message: `Cannot append empty reasoning part to existing reasoning sequence. Skipping reasoning part: ${JSON.stringify(part)}.`,\n                    });\n                  }\n\n                  if (reasoningMessage === undefined) {\n                    reasoningMessages[reasoningId] = {\n                      type: 'reasoning',\n                      id: reasoningId,\n                      encrypted_content:\n                        providerOptions?.reasoningEncryptedContent,\n                      summary: summaryParts,\n                    };\n                    input.push(reasoningMessages[reasoningId]);\n                  } else {\n                    reasoningMessage.summary.push(...summaryParts);\n\n                    // updated encrypted content to enable setting it in the last summary part:\n                    if (providerOptions?.reasoningEncryptedContent != null) {\n                      reasoningMessage.encrypted_content =\n                        providerOptions.reasoningEncryptedContent;\n                    }\n                  }\n                }\n              } else {\n                warnings.push({\n                  type: 'other',\n                  message: `Non-OpenAI reasoning parts are not supported. Skipping reasoning part: ${JSON.stringify(part)}.`,\n                });\n              }\n              break;\n            }\n          }\n        }\n\n        break;\n      }\n\n      case 'tool': {\n        for (const part of content) {\n          const output = part.output;\n\n          if (\n            hasLocalShellTool &&\n            part.toolName === 'local_shell' &&\n            output.type === 'json'\n          ) {\n            const parsedOutput = await validateTypes({\n              value: output.value,\n              schema: localShellOutputSchema,\n            });\n\n            input.push({\n              type: 'local_shell_call_output',\n              call_id: part.toolCallId,\n              output: parsedOutput.output,\n            });\n            break;\n          }\n\n          let contentValue: OpenAIResponsesFunctionCallOutput['output'];\n          switch (output.type) {\n            case 'text':\n            case 'error-text':\n              contentValue = output.value;\n              break;\n            case 'json':\n            case 'error-json':\n              contentValue = JSON.stringify(output.value);\n              break;\n            case 'content':\n              contentValue = output.value.map(item => {\n                switch (item.type) {\n                  case 'text': {\n                    return { type: 'input_text' as const, text: item.text };\n                  }\n                  case 'media': {\n                    return item.mediaType.startsWith('image/')\n                      ? {\n                          type: 'input_image' as const,\n                          image_url: `data:${item.mediaType};base64,${item.data}`,\n                        }\n                      : {\n                          type: 'input_file' as const,\n                          filename: 'data',\n                          file_data: `data:${item.mediaType};base64,${item.data}`,\n                        };\n                  }\n                }\n              });\n              break;\n          }\n\n          input.push({\n            type: 'function_call_output',\n            call_id: part.toolCallId,\n            output: contentValue,\n          });\n        }\n\n        break;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return { input, warnings };\n}\n\nconst openaiResponsesReasoningProviderOptionsSchema = z.object({\n  itemId: z.string().nullish(),\n  reasoningEncryptedContent: z.string().nullish(),\n});\n\nexport type OpenAIResponsesReasoningProviderOptions = z.infer<\n  typeof openaiResponsesReasoningProviderOptionsSchema\n>;\n","import { LanguageModelV2FinishReason } from '@ai-sdk/provider';\n\nexport function mapOpenAIResponseFinishReason({\n  finishReason,\n  hasFunctionCall,\n}: {\n  finishReason: string | null | undefined;\n  // flag that checks if there have been client-side tool calls (not executed by openai)\n  hasFunctionCall: boolean;\n}): LanguageModelV2FinishReason {\n  switch (finishReason) {\n    case undefined:\n    case null:\n      return hasFunctionCall ? 'tool-calls' : 'stop';\n    case 'max_output_tokens':\n      return 'length';\n    case 'content_filter':\n      return 'content-filter';\n    default:\n      return hasFunctionCall ? 'tool-calls' : 'unknown';\n  }\n}\n","import { JSONSchema7 } from '@ai-sdk/provider';\nimport {\n  InferValidator,\n  lazyValidator,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport type OpenAIResponsesInput = Array<OpenAIResponsesInputItem>;\n\nexport type OpenAIResponsesInputItem =\n  | OpenAIResponsesSystemMessage\n  | OpenAIResponsesUserMessage\n  | OpenAIResponsesAssistantMessage\n  | OpenAIResponsesFunctionCall\n  | OpenAIResponsesFunctionCallOutput\n  | OpenAIResponsesComputerCall\n  | OpenAIResponsesLocalShellCall\n  | OpenAIResponsesLocalShellCallOutput\n  | OpenAIResponsesReasoning\n  | OpenAIResponsesItemReference;\n\nexport type OpenAIResponsesIncludeValue =\n  | 'web_search_call.action.sources'\n  | 'code_interpreter_call.outputs'\n  | 'computer_call_output.output.image_url'\n  | 'file_search_call.results'\n  | 'message.input_image.image_url'\n  | 'message.output_text.logprobs'\n  | 'reasoning.encrypted_content';\n\nexport type OpenAIResponsesIncludeOptions =\n  | Array<OpenAIResponsesIncludeValue>\n  | undefined\n  | null;\n\nexport type OpenAIResponsesSystemMessage = {\n  role: 'system' | 'developer';\n  content: string;\n};\n\nexport type OpenAIResponsesUserMessage = {\n  role: 'user';\n  content: Array<\n    | { type: 'input_text'; text: string }\n    | { type: 'input_image'; image_url: string }\n    | { type: 'input_image'; file_id: string }\n    | { type: 'input_file'; file_url: string }\n    | { type: 'input_file'; filename: string; file_data: string }\n    | { type: 'input_file'; file_id: string }\n  >;\n};\n\nexport type OpenAIResponsesAssistantMessage = {\n  role: 'assistant';\n  content: Array<{ type: 'output_text'; text: string }>;\n  id?: string;\n};\n\nexport type OpenAIResponsesFunctionCall = {\n  type: 'function_call';\n  call_id: string;\n  name: string;\n  arguments: string;\n  id?: string;\n};\n\nexport type OpenAIResponsesFunctionCallOutput = {\n  type: 'function_call_output';\n  call_id: string;\n  output:\n    | string\n    | Array<\n        | { type: 'input_text'; text: string }\n        | { type: 'input_image'; image_url: string }\n        | { type: 'input_file'; filename: string; file_data: string }\n      >;\n};\n\nexport type OpenAIResponsesComputerCall = {\n  type: 'computer_call';\n  id: string;\n  status?: string;\n};\n\nexport type OpenAIResponsesLocalShellCall = {\n  type: 'local_shell_call';\n  id: string;\n  call_id: string;\n  action: {\n    type: 'exec';\n    command: string[];\n    timeout_ms?: number;\n    user?: string;\n    working_directory?: string;\n    env?: Record<string, string>;\n  };\n};\n\nexport type OpenAIResponsesLocalShellCallOutput = {\n  type: 'local_shell_call_output';\n  call_id: string;\n  output: string;\n};\n\nexport type OpenAIResponsesItemReference = {\n  type: 'item_reference';\n  id: string;\n};\n\n/**\n * A filter used to compare a specified attribute key to a given value using a defined comparison operation.\n */\nexport type OpenAIResponsesFileSearchToolComparisonFilter = {\n  /**\n   * The key to compare against the value.\n   */\n  key: string;\n\n  /**\n   * Specifies the comparison operator: eq, ne, gt, gte, lt, lte.\n   */\n  type: 'eq' | 'ne' | 'gt' | 'gte' | 'lt' | 'lte';\n\n  /**\n   * The value to compare against the attribute key; supports string, number, or boolean types.\n   */\n  value: string | number | boolean;\n};\n\n/**\n * Combine multiple filters using and or or.\n */\nexport type OpenAIResponsesFileSearchToolCompoundFilter = {\n  /**\n   * Type of operation: and or or.\n   */\n  type: 'and' | 'or';\n\n  /**\n   * Array of filters to combine. Items can be ComparisonFilter or CompoundFilter.\n   */\n  filters: Array<\n    | OpenAIResponsesFileSearchToolComparisonFilter\n    | OpenAIResponsesFileSearchToolCompoundFilter\n  >;\n};\n\nexport type OpenAIResponsesTool =\n  | {\n      type: 'function';\n      name: string;\n      description: string | undefined;\n      parameters: JSONSchema7;\n      strict: boolean | undefined;\n    }\n  | {\n      type: 'web_search';\n      filters: { allowed_domains: string[] | undefined } | undefined;\n      search_context_size: 'low' | 'medium' | 'high' | undefined;\n      user_location:\n        | {\n            type: 'approximate';\n            city?: string;\n            country?: string;\n            region?: string;\n            timezone?: string;\n          }\n        | undefined;\n    }\n  | {\n      type: 'web_search_preview';\n      search_context_size: 'low' | 'medium' | 'high' | undefined;\n      user_location:\n        | {\n            type: 'approximate';\n            city?: string;\n            country?: string;\n            region?: string;\n            timezone?: string;\n          }\n        | undefined;\n    }\n  | {\n      type: 'code_interpreter';\n      container: string | { type: 'auto'; file_ids: string[] | undefined };\n    }\n  | {\n      type: 'file_search';\n      vector_store_ids: string[];\n      max_num_results: number | undefined;\n      ranking_options:\n        | { ranker?: string; score_threshold?: number }\n        | undefined;\n      filters:\n        | OpenAIResponsesFileSearchToolComparisonFilter\n        | OpenAIResponsesFileSearchToolCompoundFilter\n        | undefined;\n    }\n  | {\n      type: 'image_generation';\n      background: 'auto' | 'opaque' | 'transparent' | undefined;\n      input_fidelity: 'low' | 'high' | undefined;\n      input_image_mask:\n        | {\n            file_id: string | undefined;\n            image_url: string | undefined;\n          }\n        | undefined;\n      model: string | undefined;\n      moderation: 'auto' | undefined;\n      output_compression: number | undefined;\n      output_format: 'png' | 'jpeg' | 'webp' | undefined;\n      quality: 'auto' | 'low' | 'medium' | 'high' | undefined;\n      size: 'auto' | '1024x1024' | '1024x1536' | '1536x1024' | undefined;\n    }\n  | {\n      type: 'local_shell';\n    };\n\nexport type OpenAIResponsesReasoning = {\n  type: 'reasoning';\n  id: string;\n  encrypted_content?: string | null;\n  summary: Array<{\n    type: 'summary_text';\n    text: string;\n  }>;\n};\n\nexport const openaiResponsesChunkSchema = lazyValidator(() =>\n  zodSchema(\n    z.union([\n      z.object({\n        type: z.literal('response.output_text.delta'),\n        item_id: z.string(),\n        delta: z.string(),\n        logprobs: z\n          .array(\n            z.object({\n              token: z.string(),\n              logprob: z.number(),\n              top_logprobs: z.array(\n                z.object({\n                  token: z.string(),\n                  logprob: z.number(),\n                }),\n              ),\n            }),\n          )\n          .nullish(),\n      }),\n      z.object({\n        type: z.enum(['response.completed', 'response.incomplete']),\n        response: z.object({\n          incomplete_details: z.object({ reason: z.string() }).nullish(),\n          usage: z.object({\n            input_tokens: z.number(),\n            input_tokens_details: z\n              .object({ cached_tokens: z.number().nullish() })\n              .nullish(),\n            output_tokens: z.number(),\n            output_tokens_details: z\n              .object({ reasoning_tokens: z.number().nullish() })\n              .nullish(),\n          }),\n          service_tier: z.string().nullish(),\n        }),\n      }),\n      z.object({\n        type: z.literal('response.created'),\n        response: z.object({\n          id: z.string(),\n          created_at: z.number(),\n          model: z.string(),\n          service_tier: z.string().nullish(),\n        }),\n      }),\n      z.object({\n        type: z.literal('response.output_item.added'),\n        output_index: z.number(),\n        item: z.discriminatedUnion('type', [\n          z.object({\n            type: z.literal('message'),\n            id: z.string(),\n          }),\n          z.object({\n            type: z.literal('reasoning'),\n            id: z.string(),\n            encrypted_content: z.string().nullish(),\n          }),\n          z.object({\n            type: z.literal('function_call'),\n            id: z.string(),\n            call_id: z.string(),\n            name: z.string(),\n            arguments: z.string(),\n          }),\n          z.object({\n            type: z.literal('web_search_call'),\n            id: z.string(),\n            status: z.string(),\n          }),\n          z.object({\n            type: z.literal('computer_call'),\n            id: z.string(),\n            status: z.string(),\n          }),\n          z.object({\n            type: z.literal('file_search_call'),\n            id: z.string(),\n          }),\n          z.object({\n            type: z.literal('image_generation_call'),\n            id: z.string(),\n          }),\n          z.object({\n            type: z.literal('code_interpreter_call'),\n            id: z.string(),\n            container_id: z.string(),\n            code: z.string().nullable(),\n            outputs: z\n              .array(\n                z.discriminatedUnion('type', [\n                  z.object({ type: z.literal('logs'), logs: z.string() }),\n                  z.object({ type: z.literal('image'), url: z.string() }),\n                ]),\n              )\n              .nullable(),\n            status: z.string(),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('response.output_item.done'),\n        output_index: z.number(),\n        item: z.discriminatedUnion('type', [\n          z.object({\n            type: z.literal('message'),\n            id: z.string(),\n          }),\n          z.object({\n            type: z.literal('reasoning'),\n            id: z.string(),\n            encrypted_content: z.string().nullish(),\n          }),\n          z.object({\n            type: z.literal('function_call'),\n            id: z.string(),\n            call_id: z.string(),\n            name: z.string(),\n            arguments: z.string(),\n            status: z.literal('completed'),\n          }),\n          z.object({\n            type: z.literal('code_interpreter_call'),\n            id: z.string(),\n            code: z.string().nullable(),\n            container_id: z.string(),\n            outputs: z\n              .array(\n                z.discriminatedUnion('type', [\n                  z.object({ type: z.literal('logs'), logs: z.string() }),\n                  z.object({ type: z.literal('image'), url: z.string() }),\n                ]),\n              )\n              .nullable(),\n          }),\n          z.object({\n            type: z.literal('image_generation_call'),\n            id: z.string(),\n            result: z.string(),\n          }),\n          z.object({\n            type: z.literal('web_search_call'),\n            id: z.string(),\n            status: z.string(),\n            action: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('search'),\n                query: z.string().nullish(),\n              }),\n              z.object({\n                type: z.literal('open_page'),\n                url: z.string(),\n              }),\n              z.object({\n                type: z.literal('find'),\n                url: z.string(),\n                pattern: z.string(),\n              }),\n            ]),\n          }),\n          z.object({\n            type: z.literal('file_search_call'),\n            id: z.string(),\n            queries: z.array(z.string()),\n            results: z\n              .array(\n                z.object({\n                  attributes: z.record(z.string(), z.unknown()),\n                  file_id: z.string(),\n                  filename: z.string(),\n                  score: z.number(),\n                  text: z.string(),\n                }),\n              )\n              .nullish(),\n          }),\n          z.object({\n            type: z.literal('local_shell_call'),\n            id: z.string(),\n            call_id: z.string(),\n            action: z.object({\n              type: z.literal('exec'),\n              command: z.array(z.string()),\n              timeout_ms: z.number().optional(),\n              user: z.string().optional(),\n              working_directory: z.string().optional(),\n              env: z.record(z.string(), z.string()).optional(),\n            }),\n          }),\n          z.object({\n            type: z.literal('computer_call'),\n            id: z.string(),\n            status: z.literal('completed'),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('response.function_call_arguments.delta'),\n        item_id: z.string(),\n        output_index: z.number(),\n        delta: z.string(),\n      }),\n      z.object({\n        type: z.literal('response.image_generation_call.partial_image'),\n        item_id: z.string(),\n        output_index: z.number(),\n        partial_image_b64: z.string(),\n      }),\n      z.object({\n        type: z.literal('response.code_interpreter_call_code.delta'),\n        item_id: z.string(),\n        output_index: z.number(),\n        delta: z.string(),\n      }),\n      z.object({\n        type: z.literal('response.code_interpreter_call_code.done'),\n        item_id: z.string(),\n        output_index: z.number(),\n        code: z.string(),\n      }),\n      z.object({\n        type: z.literal('response.output_text.annotation.added'),\n        annotation: z.discriminatedUnion('type', [\n          z.object({\n            type: z.literal('url_citation'),\n            url: z.string(),\n            title: z.string(),\n          }),\n          z.object({\n            type: z.literal('file_citation'),\n            file_id: z.string(),\n            filename: z.string().nullish(),\n            index: z.number().nullish(),\n            start_index: z.number().nullish(),\n            end_index: z.number().nullish(),\n            quote: z.string().nullish(),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('response.reasoning_summary_part.added'),\n        item_id: z.string(),\n        summary_index: z.number(),\n      }),\n      z.object({\n        type: z.literal('response.reasoning_summary_text.delta'),\n        item_id: z.string(),\n        summary_index: z.number(),\n        delta: z.string(),\n      }),\n      z.object({\n        type: z.literal('response.reasoning_summary_part.done'),\n        item_id: z.string(),\n        summary_index: z.number(),\n      }),\n      z.object({\n        type: z.literal('error'),\n        code: z.string(),\n        message: z.string(),\n        param: z.string().nullish(),\n        sequence_number: z.number(),\n      }),\n      z\n        .object({ type: z.string() })\n        .loose()\n        .transform(value => ({\n          type: 'unknown_chunk' as const,\n          message: value.type,\n        })), // fallback for unknown chunks\n    ]),\n  ),\n);\n\nexport type OpenAIResponsesChunk = InferValidator<\n  typeof openaiResponsesChunkSchema\n>;\n\nexport type OpenAIResponsesLogprobs = NonNullable<\n  (OpenAIResponsesChunk & {\n    type: 'response.output_text.delta';\n  })['logprobs']\n> | null;\n\nexport type OpenAIResponsesWebSearchAction = NonNullable<\n  ((OpenAIResponsesChunk & {\n    type: 'response.output_item.done';\n  })['item'] & {\n    type: 'web_search_call';\n  })['action']\n>;\n\nexport const openaiResponsesResponseSchema = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      id: z.string(),\n      created_at: z.number(),\n      error: z\n        .object({\n          code: z.string(),\n          message: z.string(),\n        })\n        .nullish(),\n      model: z.string(),\n      output: z.array(\n        z.discriminatedUnion('type', [\n          z.object({\n            type: z.literal('message'),\n            role: z.literal('assistant'),\n            id: z.string(),\n            content: z.array(\n              z.object({\n                type: z.literal('output_text'),\n                text: z.string(),\n                logprobs: z\n                  .array(\n                    z.object({\n                      token: z.string(),\n                      logprob: z.number(),\n                      top_logprobs: z.array(\n                        z.object({\n                          token: z.string(),\n                          logprob: z.number(),\n                        }),\n                      ),\n                    }),\n                  )\n                  .nullish(),\n                annotations: z.array(\n                  z.discriminatedUnion('type', [\n                    z.object({\n                      type: z.literal('url_citation'),\n                      start_index: z.number(),\n                      end_index: z.number(),\n                      url: z.string(),\n                      title: z.string(),\n                    }),\n                    z.object({\n                      type: z.literal('file_citation'),\n                      file_id: z.string(),\n                      filename: z.string().nullish(),\n                      index: z.number().nullish(),\n                      start_index: z.number().nullish(),\n                      end_index: z.number().nullish(),\n                      quote: z.string().nullish(),\n                    }),\n                    z.object({\n                      type: z.literal('container_file_citation'),\n                    }),\n                  ]),\n                ),\n              }),\n            ),\n          }),\n          z.object({\n            type: z.literal('web_search_call'),\n            id: z.string(),\n            status: z.string(),\n            action: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('search'),\n                query: z.string().nullish(),\n              }),\n              z.object({\n                type: z.literal('open_page'),\n                url: z.string(),\n              }),\n              z.object({\n                type: z.literal('find'),\n                url: z.string(),\n                pattern: z.string(),\n              }),\n            ]),\n          }),\n          z.object({\n            type: z.literal('file_search_call'),\n            id: z.string(),\n            queries: z.array(z.string()),\n            results: z\n              .array(\n                z.object({\n                  attributes: z.record(z.string(), z.unknown()),\n                  file_id: z.string(),\n                  filename: z.string(),\n                  score: z.number(),\n                  text: z.string(),\n                }),\n              )\n              .nullish(),\n          }),\n          z.object({\n            type: z.literal('code_interpreter_call'),\n            id: z.string(),\n            code: z.string().nullable(),\n            container_id: z.string(),\n            outputs: z\n              .array(\n                z.discriminatedUnion('type', [\n                  z.object({ type: z.literal('logs'), logs: z.string() }),\n                  z.object({ type: z.literal('image'), url: z.string() }),\n                ]),\n              )\n              .nullable(),\n          }),\n          z.object({\n            type: z.literal('image_generation_call'),\n            id: z.string(),\n            result: z.string(),\n          }),\n          z.object({\n            type: z.literal('local_shell_call'),\n            id: z.string(),\n            call_id: z.string(),\n            action: z.object({\n              type: z.literal('exec'),\n              command: z.array(z.string()),\n              timeout_ms: z.number().optional(),\n              user: z.string().optional(),\n              working_directory: z.string().optional(),\n              env: z.record(z.string(), z.string()).optional(),\n            }),\n          }),\n          z.object({\n            type: z.literal('function_call'),\n            call_id: z.string(),\n            name: z.string(),\n            arguments: z.string(),\n            id: z.string(),\n          }),\n          z.object({\n            type: z.literal('computer_call'),\n            id: z.string(),\n            status: z.string().optional(),\n          }),\n          z.object({\n            type: z.literal('reasoning'),\n            id: z.string(),\n            encrypted_content: z.string().nullish(),\n            summary: z.array(\n              z.object({\n                type: z.literal('summary_text'),\n                text: z.string(),\n              }),\n            ),\n          }),\n        ]),\n      ),\n      service_tier: z.string().nullish(),\n      incomplete_details: z.object({ reason: z.string() }).nullish(),\n      usage: z.object({\n        input_tokens: z.number(),\n        input_tokens_details: z\n          .object({ cached_tokens: z.number().nullish() })\n          .nullish(),\n        output_tokens: z.number(),\n        output_tokens_details: z\n          .object({ reasoning_tokens: z.number().nullish() })\n          .nullish(),\n      }),\n    }),\n  ),\n);\n","import {\n  InferValidator,\n  lazyValidator,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n/**\n * `top_logprobs` request body argument can be set to an integer between\n * 0 and 20 specifying the number of most likely tokens to return at each\n * token position, each with an associated log probability.\n *\n * @see https://platform.openai.com/docs/api-reference/responses/create#responses_create-top_logprobs\n */\nexport const TOP_LOGPROBS_MAX = 20;\n\nexport const openaiResponsesReasoningModelIds = [\n  'o1',\n  'o1-2024-12-17',\n  'o3-mini',\n  'o3-mini-2025-01-31',\n  'o3',\n  'o3-2025-04-16',\n  'o4-mini',\n  'o4-mini-2025-04-16',\n  'codex-mini-latest',\n  'computer-use-preview',\n  'gpt-5',\n  'gpt-5-2025-08-07',\n  'gpt-5-codex',\n  'gpt-5-mini',\n  'gpt-5-mini-2025-08-07',\n  'gpt-5-nano',\n  'gpt-5-nano-2025-08-07',\n  'gpt-5-pro',\n  'gpt-5-pro-2025-10-06',\n] as const;\n\nexport const openaiResponsesModelIds = [\n  'gpt-4.1',\n  'gpt-4.1-2025-04-14',\n  'gpt-4.1-mini',\n  'gpt-4.1-mini-2025-04-14',\n  'gpt-4.1-nano',\n  'gpt-4.1-nano-2025-04-14',\n  'gpt-4o',\n  'gpt-4o-2024-05-13',\n  'gpt-4o-2024-08-06',\n  'gpt-4o-2024-11-20',\n  'gpt-4o-audio-preview',\n  'gpt-4o-audio-preview-2024-10-01',\n  'gpt-4o-audio-preview-2024-12-17',\n  'gpt-4o-search-preview',\n  'gpt-4o-search-preview-2025-03-11',\n  'gpt-4o-mini-search-preview',\n  'gpt-4o-mini-search-preview-2025-03-11',\n  'gpt-4o-mini',\n  'gpt-4o-mini-2024-07-18',\n  'gpt-4-turbo',\n  'gpt-4-turbo-2024-04-09',\n  'gpt-4-turbo-preview',\n  'gpt-4-0125-preview',\n  'gpt-4-1106-preview',\n  'gpt-4',\n  'gpt-4-0613',\n  'gpt-4.5-preview',\n  'gpt-4.5-preview-2025-02-27',\n  'gpt-3.5-turbo-0125',\n  'gpt-3.5-turbo',\n  'gpt-3.5-turbo-1106',\n  'chatgpt-4o-latest',\n  'gpt-5-chat-latest',\n  ...openaiResponsesReasoningModelIds,\n] as const;\n\nexport type OpenAIResponsesModelId =\n  | 'chatgpt-4o-latest'\n  | 'gpt-3.5-turbo-0125'\n  | 'gpt-3.5-turbo-1106'\n  | 'gpt-3.5-turbo'\n  | 'gpt-4-0613'\n  | 'gpt-4-turbo-2024-04-09'\n  | 'gpt-4-turbo'\n  | 'gpt-4.1-2025-04-14'\n  | 'gpt-4.1-mini-2025-04-14'\n  | 'gpt-4.1-mini'\n  | 'gpt-4.1-nano-2025-04-14'\n  | 'gpt-4.1-nano'\n  | 'gpt-4.1'\n  | 'gpt-4'\n  | 'gpt-4o-2024-05-13'\n  | 'gpt-4o-2024-08-06'\n  | 'gpt-4o-2024-11-20'\n  | 'gpt-4o-mini-2024-07-18'\n  | 'gpt-4o-mini'\n  | 'gpt-4o'\n  | 'gpt-5-2025-08-07'\n  | 'gpt-5-chat-latest'\n  | 'gpt-5-codex'\n  | 'gpt-5-mini-2025-08-07'\n  | 'gpt-5-mini'\n  | 'gpt-5-nano-2025-08-07'\n  | 'gpt-5-nano'\n  | 'gpt-5-pro-2025-10-06'\n  | 'gpt-5-pro'\n  | 'gpt-5'\n  | 'o1-2024-12-17'\n  | 'o1'\n  | 'o3-2025-04-16'\n  | 'o3-mini-2025-01-31'\n  | 'o3-mini'\n  | 'o3'\n  | (string & {});\n\n// TODO AI SDK 6: use optional here instead of nullish\nexport const openaiResponsesProviderOptionsSchema = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      include: z\n        .array(\n          z.enum([\n            'reasoning.encrypted_content', // handled internally by default, only needed for unknown reasoning models\n            'file_search_call.results',\n            'message.output_text.logprobs',\n          ]),\n        )\n        .nullish(),\n      instructions: z.string().nullish(),\n\n      /**\n       * Return the log probabilities of the tokens.\n       *\n       * Setting to true will return the log probabilities of the tokens that\n       * were generated.\n       *\n       * Setting to a number will return the log probabilities of the top n\n       * tokens that were generated.\n       *\n       * @see https://platform.openai.com/docs/api-reference/responses/create\n       * @see https://cookbook.openai.com/examples/using_logprobs\n       */\n      logprobs: z\n        .union([z.boolean(), z.number().min(1).max(TOP_LOGPROBS_MAX)])\n        .optional(),\n\n      /**\n       * The maximum number of total calls to built-in tools that can be processed in a response.\n       * This maximum number applies across all built-in tool calls, not per individual tool.\n       * Any further attempts to call a tool by the model will be ignored.\n       */\n      maxToolCalls: z.number().nullish(),\n\n      metadata: z.any().nullish(),\n      parallelToolCalls: z.boolean().nullish(),\n      previousResponseId: z.string().nullish(),\n      promptCacheKey: z.string().nullish(),\n      reasoningEffort: z.string().nullish(),\n      reasoningSummary: z.string().nullish(),\n      safetyIdentifier: z.string().nullish(),\n      serviceTier: z.enum(['auto', 'flex', 'priority', 'default']).nullish(),\n      store: z.boolean().nullish(),\n      strictJsonSchema: z.boolean().nullish(),\n      textVerbosity: z.enum(['low', 'medium', 'high']).nullish(),\n      user: z.string().nullish(),\n    }),\n  ),\n);\n\nexport type OpenAIResponsesProviderOptions = InferValidator<\n  typeof openaiResponsesProviderOptionsSchema\n>;\n","import {\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { codeInterpreterArgsSchema } from '../tool/code-interpreter';\nimport { fileSearchArgsSchema } from '../tool/file-search';\nimport { webSearchArgsSchema } from '../tool/web-search';\nimport { webSearchPreviewArgsSchema } from '../tool/web-search-preview';\nimport { imageGenerationArgsSchema } from '../tool/image-generation';\nimport { OpenAIResponsesTool } from './openai-responses-api';\nimport { validateTypes } from '@ai-sdk/provider-utils';\n\nexport async function prepareResponsesTools({\n  tools,\n  toolChoice,\n  strictJsonSchema,\n}: {\n  tools: LanguageModelV2CallOptions['tools'];\n  toolChoice?: LanguageModelV2CallOptions['toolChoice'];\n  strictJsonSchema: boolean;\n}): Promise<{\n  tools?: Array<OpenAIResponsesTool>;\n  toolChoice?:\n    | 'auto'\n    | 'none'\n    | 'required'\n    | { type: 'file_search' }\n    | { type: 'web_search_preview' }\n    | { type: 'web_search' }\n    | { type: 'function'; name: string }\n    | { type: 'code_interpreter' }\n    | { type: 'image_generation' };\n  toolWarnings: LanguageModelV2CallWarning[];\n}> {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  tools = tools?.length ? tools : undefined;\n\n  const toolWarnings: LanguageModelV2CallWarning[] = [];\n\n  if (tools == null) {\n    return { tools: undefined, toolChoice: undefined, toolWarnings };\n  }\n\n  const openaiTools: Array<OpenAIResponsesTool> = [];\n\n  for (const tool of tools) {\n    switch (tool.type) {\n      case 'function':\n        openaiTools.push({\n          type: 'function',\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.inputSchema,\n          strict: strictJsonSchema,\n        });\n        break;\n      case 'provider-defined': {\n        switch (tool.id) {\n          case 'openai.file_search': {\n            const args = await validateTypes({\n              value: tool.args,\n              schema: fileSearchArgsSchema,\n            });\n\n            openaiTools.push({\n              type: 'file_search',\n              vector_store_ids: args.vectorStoreIds,\n              max_num_results: args.maxNumResults,\n              ranking_options: args.ranking\n                ? {\n                    ranker: args.ranking.ranker,\n                    score_threshold: args.ranking.scoreThreshold,\n                  }\n                : undefined,\n              filters: args.filters,\n            });\n\n            break;\n          }\n          case 'openai.local_shell': {\n            openaiTools.push({\n              type: 'local_shell',\n            });\n            break;\n          }\n          case 'openai.web_search_preview': {\n            const args = await validateTypes({\n              value: tool.args,\n              schema: webSearchPreviewArgsSchema,\n            });\n            openaiTools.push({\n              type: 'web_search_preview',\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation,\n            });\n            break;\n          }\n          case 'openai.web_search': {\n            const args = await validateTypes({\n              value: tool.args,\n              schema: webSearchArgsSchema,\n            });\n            openaiTools.push({\n              type: 'web_search',\n              filters:\n                args.filters != null\n                  ? { allowed_domains: args.filters.allowedDomains }\n                  : undefined,\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation,\n            });\n            break;\n          }\n          case 'openai.code_interpreter': {\n            const args = await validateTypes({\n              value: tool.args,\n              schema: codeInterpreterArgsSchema,\n            });\n\n            openaiTools.push({\n              type: 'code_interpreter',\n              container:\n                args.container == null\n                  ? { type: 'auto', file_ids: undefined }\n                  : typeof args.container === 'string'\n                    ? args.container\n                    : { type: 'auto', file_ids: args.container.fileIds },\n            });\n            break;\n          }\n          case 'openai.image_generation': {\n            const args = await validateTypes({\n              value: tool.args,\n              schema: imageGenerationArgsSchema,\n            });\n\n            openaiTools.push({\n              type: 'image_generation',\n              background: args.background,\n              input_fidelity: args.inputFidelity,\n              input_image_mask: args.inputImageMask\n                ? {\n                    file_id: args.inputImageMask.fileId,\n                    image_url: args.inputImageMask.imageUrl,\n                  }\n                : undefined,\n              model: args.model,\n              size: args.size,\n              quality: args.quality,\n              moderation: args.moderation,\n              output_format: args.outputFormat,\n              output_compression: args.outputCompression,\n            });\n            break;\n          }\n        }\n        break;\n      }\n      default:\n        toolWarnings.push({ type: 'unsupported-tool', tool });\n        break;\n    }\n  }\n\n  if (toolChoice == null) {\n    return { tools: openaiTools, toolChoice: undefined, toolWarnings };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n    case 'none':\n    case 'required':\n      return { tools: openaiTools, toolChoice: type, toolWarnings };\n    case 'tool':\n      return {\n        tools: openaiTools,\n        toolChoice:\n          toolChoice.toolName === 'code_interpreter' ||\n          toolChoice.toolName === 'file_search' ||\n          toolChoice.toolName === 'image_generation' ||\n          toolChoice.toolName === 'web_search_preview' ||\n          toolChoice.toolName === 'web_search'\n            ? { type: toolChoice.toolName }\n            : { type: 'function', name: toolChoice.toolName },\n        toolWarnings,\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`,\n      });\n    }\n  }\n}\n","import { SpeechModelV2, SpeechModelV2CallWarning } from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createBinaryResponseHandler,\n  parseProviderOptions,\n  postJsonToApi,\n} from '@ai-sdk/provider-utils';\nimport { OpenAIConfig } from '../openai-config';\nimport { openaiFailedResponseHandler } from '../openai-error';\nimport { OpenAISpeechAPITypes } from './openai-speech-api';\nimport {\n  openaiSpeechProviderOptionsSchema,\n  OpenAISpeechModelId,\n} from './openai-speech-options';\n\ninterface OpenAISpeechModelConfig extends OpenAIConfig {\n  _internal?: {\n    currentDate?: () => Date;\n  };\n}\n\nexport class OpenAISpeechModel implements SpeechModelV2 {\n  readonly specificationVersion = 'v2';\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  constructor(\n    readonly modelId: OpenAISpeechModelId,\n    private readonly config: OpenAISpeechModelConfig,\n  ) {}\n\n  private async getArgs({\n    text,\n    voice = 'alloy',\n    outputFormat = 'mp3',\n    speed,\n    instructions,\n    language,\n    providerOptions,\n  }: Parameters<SpeechModelV2['doGenerate']>[0]) {\n    const warnings: SpeechModelV2CallWarning[] = [];\n\n    // Parse provider options\n    const openAIOptions = await parseProviderOptions({\n      provider: 'openai',\n      providerOptions,\n      schema: openaiSpeechProviderOptionsSchema,\n    });\n\n    // Create request body\n    const requestBody: Record<string, unknown> = {\n      model: this.modelId,\n      input: text,\n      voice,\n      response_format: 'mp3',\n      speed,\n      instructions,\n    };\n\n    if (outputFormat) {\n      if (['mp3', 'opus', 'aac', 'flac', 'wav', 'pcm'].includes(outputFormat)) {\n        requestBody.response_format = outputFormat;\n      } else {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'outputFormat',\n          details: `Unsupported output format: ${outputFormat}. Using mp3 instead.`,\n        });\n      }\n    }\n\n    // Add provider-specific options\n    if (openAIOptions) {\n      const speechModelOptions: OpenAISpeechAPITypes = {};\n\n      for (const key in speechModelOptions) {\n        const value = speechModelOptions[key as keyof OpenAISpeechAPITypes];\n        if (value !== undefined) {\n          requestBody[key] = value;\n        }\n      }\n    }\n\n    if (language) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'language',\n        details: `OpenAI speech models do not support language selection. Language parameter \"${language}\" was ignored.`,\n      });\n    }\n\n    return {\n      requestBody,\n      warnings,\n    };\n  }\n\n  async doGenerate(\n    options: Parameters<SpeechModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<SpeechModelV2['doGenerate']>>> {\n    const currentDate = this.config._internal?.currentDate?.() ?? new Date();\n    const { requestBody, warnings } = await this.getArgs(options);\n\n    const {\n      value: audio,\n      responseHeaders,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url: this.config.url({\n        path: '/audio/speech',\n        modelId: this.modelId,\n      }),\n      headers: combineHeaders(this.config.headers(), options.headers),\n      body: requestBody,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: createBinaryResponseHandler(),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    return {\n      audio,\n      warnings,\n      request: {\n        body: JSON.stringify(requestBody),\n      },\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n    };\n  }\n}\n","import {\n  InferValidator,\n  lazyValidator,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport type OpenAISpeechModelId =\n  | 'tts-1'\n  | 'tts-1-hd'\n  | 'gpt-4o-mini-tts'\n  | (string & {});\n\n// https://platform.openai.com/docs/api-reference/audio/createSpeech\nexport const openaiSpeechProviderOptionsSchema = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      instructions: z.string().nullish(),\n      speed: z.number().min(0.25).max(4.0).default(1.0).nullish(),\n    }),\n  ),\n);\n\nexport type OpenAISpeechCallOptions = InferValidator<\n  typeof openaiSpeechProviderOptionsSchema\n>;\n","import {\n  TranscriptionModelV2,\n  TranscriptionModelV2CallOptions,\n  TranscriptionModelV2CallWarning,\n} from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  convertBase64ToUint8Array,\n  createJsonResponseHandler,\n  mediaTypeToExtension,\n  parseProviderOptions,\n  postFormDataToApi,\n} from '@ai-sdk/provider-utils';\nimport { OpenAIConfig } from '../openai-config';\nimport { openaiFailedResponseHandler } from '../openai-error';\nimport { openaiTranscriptionResponseSchema } from './openai-transcription-api';\nimport {\n  OpenAITranscriptionModelId,\n  openAITranscriptionProviderOptions,\n  OpenAITranscriptionProviderOptions,\n} from './openai-transcription-options';\n\nexport type OpenAITranscriptionCallOptions = Omit<\n  TranscriptionModelV2CallOptions,\n  'providerOptions'\n> & {\n  providerOptions?: {\n    openai?: OpenAITranscriptionProviderOptions;\n  };\n};\n\ninterface OpenAITranscriptionModelConfig extends OpenAIConfig {\n  _internal?: {\n    currentDate?: () => Date;\n  };\n}\n\n// https://platform.openai.com/docs/guides/speech-to-text#supported-languages\nconst languageMap = {\n  afrikaans: 'af',\n  arabic: 'ar',\n  armenian: 'hy',\n  azerbaijani: 'az',\n  belarusian: 'be',\n  bosnian: 'bs',\n  bulgarian: 'bg',\n  catalan: 'ca',\n  chinese: 'zh',\n  croatian: 'hr',\n  czech: 'cs',\n  danish: 'da',\n  dutch: 'nl',\n  english: 'en',\n  estonian: 'et',\n  finnish: 'fi',\n  french: 'fr',\n  galician: 'gl',\n  german: 'de',\n  greek: 'el',\n  hebrew: 'he',\n  hindi: 'hi',\n  hungarian: 'hu',\n  icelandic: 'is',\n  indonesian: 'id',\n  italian: 'it',\n  japanese: 'ja',\n  kannada: 'kn',\n  kazakh: 'kk',\n  korean: 'ko',\n  latvian: 'lv',\n  lithuanian: 'lt',\n  macedonian: 'mk',\n  malay: 'ms',\n  marathi: 'mr',\n  maori: 'mi',\n  nepali: 'ne',\n  norwegian: 'no',\n  persian: 'fa',\n  polish: 'pl',\n  portuguese: 'pt',\n  romanian: 'ro',\n  russian: 'ru',\n  serbian: 'sr',\n  slovak: 'sk',\n  slovenian: 'sl',\n  spanish: 'es',\n  swahili: 'sw',\n  swedish: 'sv',\n  tagalog: 'tl',\n  tamil: 'ta',\n  thai: 'th',\n  turkish: 'tr',\n  ukrainian: 'uk',\n  urdu: 'ur',\n  vietnamese: 'vi',\n  welsh: 'cy',\n};\n\nexport class OpenAITranscriptionModel implements TranscriptionModelV2 {\n  readonly specificationVersion = 'v2';\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  constructor(\n    readonly modelId: OpenAITranscriptionModelId,\n    private readonly config: OpenAITranscriptionModelConfig,\n  ) {}\n\n  private async getArgs({\n    audio,\n    mediaType,\n    providerOptions,\n  }: OpenAITranscriptionCallOptions) {\n    const warnings: TranscriptionModelV2CallWarning[] = [];\n\n    // Parse provider options\n    const openAIOptions = await parseProviderOptions({\n      provider: 'openai',\n      providerOptions,\n      schema: openAITranscriptionProviderOptions,\n    });\n\n    // Create form data with base fields\n    const formData = new FormData();\n    const blob =\n      audio instanceof Uint8Array\n        ? new Blob([audio])\n        : new Blob([convertBase64ToUint8Array(audio)]);\n\n    formData.append('model', this.modelId);\n    const fileExtension = mediaTypeToExtension(mediaType);\n    formData.append(\n      'file',\n      new File([blob], 'audio', { type: mediaType }),\n      `audio.${fileExtension}`,\n    );\n\n    // Add provider-specific options\n    if (openAIOptions) {\n      const transcriptionModelOptions = {\n        include: openAIOptions.include,\n        language: openAIOptions.language,\n        prompt: openAIOptions.prompt,\n        // https://platform.openai.com/docs/api-reference/audio/createTranscription#audio_createtranscription-response_format\n        // prefer verbose_json to get segments for models that support it\n        response_format: [\n          'gpt-4o-transcribe',\n          'gpt-4o-mini-transcribe',\n        ].includes(this.modelId)\n          ? 'json'\n          : 'verbose_json',\n        temperature: openAIOptions.temperature,\n        timestamp_granularities: openAIOptions.timestampGranularities,\n      };\n\n      for (const [key, value] of Object.entries(transcriptionModelOptions)) {\n        if (value != null) {\n          if (Array.isArray(value)) {\n            for (const item of value) {\n              formData.append(`${key}[]`, String(item));\n            }\n          } else {\n            formData.append(key, String(value));\n          }\n        }\n      }\n    }\n\n    return {\n      formData,\n      warnings,\n    };\n  }\n\n  async doGenerate(\n    options: OpenAITranscriptionCallOptions,\n  ): Promise<Awaited<ReturnType<TranscriptionModelV2['doGenerate']>>> {\n    const currentDate = this.config._internal?.currentDate?.() ?? new Date();\n    const { formData, warnings } = await this.getArgs(options);\n\n    const {\n      value: response,\n      responseHeaders,\n      rawValue: rawResponse,\n    } = await postFormDataToApi({\n      url: this.config.url({\n        path: '/audio/transcriptions',\n        modelId: this.modelId,\n      }),\n      headers: combineHeaders(this.config.headers(), options.headers),\n      formData,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        openaiTranscriptionResponseSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const language =\n      response.language != null && response.language in languageMap\n        ? languageMap[response.language as keyof typeof languageMap]\n        : undefined;\n\n    return {\n      text: response.text,\n      segments:\n        response.segments?.map(segment => ({\n          text: segment.text,\n          startSecond: segment.start,\n          endSecond: segment.end,\n        })) ??\n        response.words?.map(word => ({\n          text: word.word,\n          startSecond: word.start,\n          endSecond: word.end,\n        })) ??\n        [],\n      language,\n      durationInSeconds: response.duration ?? undefined,\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n    };\n  }\n}\n","import { lazyValidator, zodSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const openaiTranscriptionResponseSchema = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      text: z.string(),\n      language: z.string().nullish(),\n      duration: z.number().nullish(),\n      words: z\n        .array(\n          z.object({\n            word: z.string(),\n            start: z.number(),\n            end: z.number(),\n          }),\n        )\n        .nullish(),\n      segments: z\n        .array(\n          z.object({\n            id: z.number(),\n            seek: z.number(),\n            start: z.number(),\n            end: z.number(),\n            text: z.string(),\n            tokens: z.array(z.number()),\n            temperature: z.number(),\n            avg_logprob: z.number(),\n            compression_ratio: z.number(),\n            no_speech_prob: z.number(),\n          }),\n        )\n        .nullish(),\n    }),\n  ),\n);\n","import {\n  InferValidator,\n  lazyValidator,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport type OpenAITranscriptionModelId =\n  | 'whisper-1'\n  | 'gpt-4o-mini-transcribe'\n  | 'gpt-4o-transcribe'\n  | (string & {});\n\n// https://platform.openai.com/docs/api-reference/audio/createTranscription\nexport const openAITranscriptionProviderOptions = lazyValidator(() =>\n  zodSchema(\n    z.object({\n      /**\n       * Additional information to include in the transcription response.\n       */\n\n      include: z.array(z.string()).optional(),\n\n      /**\n       * The language of the input audio in ISO-639-1 format.\n       */\n      language: z.string().optional(),\n\n      /**\n       * An optional text to guide the model's style or continue a previous audio segment.\n       */\n      prompt: z.string().optional(),\n\n      /**\n       * The sampling temperature, between 0 and 1.\n       * @default 0\n       */\n      temperature: z.number().min(0).max(1).default(0).optional(),\n\n      /**\n       * The timestamp granularities to populate for this transcription.\n       * @default ['segment']\n       */\n      timestampGranularities: z\n        .array(z.enum(['word', 'segment']))\n        .default(['segment'])\n        .optional(),\n    }),\n  ),\n);\n\nexport type OpenAITranscriptionProviderOptions = InferValidator<\n  typeof openAITranscriptionProviderOptions\n>;\n","// Version string of this package injected at build time.\ndeclare const __PACKAGE_VERSION__: string | undefined;\nexport const VERSION: string =\n  typeof __PACKAGE_VERSION__ !== 'undefined'\n    ? __PACKAGE_VERSION__\n    : '0.0.0-test';\n"],"names":["z","lazyValidator","zodSchema","openaiTools","UnsupportedFunctionalityError","toolCall","getResponseMetadata","mapOpenAIFinishReason","parseProviderOptions","postJsonToApi","combineHeaders","createJsonResponseHandler","createEventSourceResponseHandler","lazySchema","createProviderDefinedToolFactoryWithOutputSchema","_a","_b","_c","convertToBase64","validateTypes","generateId","supportsFlexProcessing","supportsPriorityProcessing"],"mappings":"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"}},
    {"offset": {"line": 4529, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}